######################################################
###
###  pycudd Makefile
###     -- modified for new SWIG syntax
###     -- re-organised source .i files
###     -- BREL extensions
###     -- target strip_depend
###     -- as of 1.3.14, -shadow is no longer needed
###  Bug reports to: aravind@engr.ucsb.edu
###
######################################################

MOD = pycudd

#######
##
## Change these to reflect local settings
##
#######
CUDD        := ../cudd-2.4.2/cudd/
CUDDVER     = 0x020400
PYTHON_LOC  := /usr
# Change the following to lib64 for 64-bit architectures
LIB_DIR     := lib
#PYTHON_LOC  := /usr
PYTHON_VER  := python2.7
SWIG	    := /usr/bin/swig
CCPLUS      := g++

##
## Leave USE_BREL undefined if you do not have the Boolean Relation minimisation package
#USE_BREL =
#USE_BREL    := 1

##
## Set debugging info on/off -- this should normally be off.
PYCUDD_DEBUG =
#PYCUDD_DEBUG = 1

##
## For internal use only
TESTING = 

#######
##
## Normal pycudd flags
##   * Set -malign-double if you compiled CUDD with that (default). If not, take it out.
##
#######
#
#PYTHON_INCL := -I$(PYTHON_LOC)/include/$(PYTHON_VER) -I$(PYTHON_LOC)/lib/$(PYTHON_VER)/config
#PY_DEP_INCL := -isystem $(PYTHON_LOC)/include/$(PYTHON_VER) -isystem $(PYTHON_LOC)/lib/$(PYTHON_VER)/config
#
# For AMD64 with 64-bit code:
# Point to the 64-bit libs -- this is for Mandriva linux, may be different for other distros
PYTHON_INCL := -I$(PYTHON_LOC)/include/$(PYTHON_VER) -I$(PYTHON_LOC)/$(LIB_DIR)/$(PYTHON_VER)/config
PY_DEP_INCL := -isystem $(PYTHON_LOC)/include/$(PYTHON_VER) -isystem $(PYTHON_LOC)$(LIB_DIR)/$(PYTHON_VER)/config
#
CUDD_INCL   := -I$(CUDD)/include
INCLUDES    := $(CUDD_INCL) -I. $(PYTHON_INCL)
DEP_INCL    := $(CUDD_INCL) -I. $(PY_DEP_INCL)
LDFLAGS     := -L$(CUDD)/lib -lm -lstdc++ -lcudd -lcuddmtr -lcuddst -lcuddutil -ldddmp -lcuddepd
SWIG_FLAGS  := -c++ -python -o $(MOD)_wrap.cpp -DCUDDVER=$(CUDDVER)
#FLAGS       := -malign-double -DCUDDVER=$(CUDDVER)
#
# For AMD64:
# -malign-double is meaningless. 
FLAGS       := -DCUDDVER=$(CUDDVER) -fPIC
#
ifdef PYCUDD_DEBUG
FLAGS       := $(FLAGS) -g -DPYCUDD_DEBUG
SWIG_FLAGS  := $(SWIG_FLAGS) -DPYCUDD_DEBUG -v -Wall
else
FLAGS       := $(FLAGS) -O2 
endif
LFLAGS      := -Xlinker -rpath $(CUDD)/lib 

#######
##
## BREL-specific additions -- modify to reflect your installation of BREL
##
#######
ifdef USE_BREL
BREL_LOC    = /usr/local/brel
BREL_INCL   := -I$(BREL_LOC) -I$(BREL_LOC)/list
INCLUDES    := $(INCLUDES) $(BREL_INCL)
DEP_INCL    := $(DEP_INCL) $(BREL_INCL)
LDFLAGS     := $(LDFLAGS) -L$(BREL_LOC) -lbrel
FLAGS       := $(FLAGS) -DBREL_R_THERE 
LFLAGS      := $(LFLAGS) -Xlinker -rpath $(BREL_LOC)
SWIG_FLAGS  := $(SWIG_FLAGS) -DBREL_R_THERE
endif

SWG = $(MOD).i brel.i ddgen.i ddmanager.i ddnode.i externs.i pyiter.i tlcinfo.i utils.i epd.i
SRC = $(MOD).cpp $(MOD)_wrap.cpp
OBJ = $(SRC:.cpp=.o)
HDR = $(MOD).h docstring.h

.SUFFIXES: .cpp .cc .o .i .c
.PHONY : clean depend strip_depend docs
.cpp.o:
	$(CCPLUS) $(FLAGS) $(INCLUDES) -c $<

.c.o:
	$(CCPLUS) $(FLAGS) $(INCLUDES) -c $<

all: $(OBJ) $(HDR)
	$(CCPLUS) -shared $(OBJ) $(LFLAGS) -o _$(MOD).so $(LDFLAGS);

##
## This target is useful if you're hacking manually with the SWIG wrapper
libso:
	$(CCPLUS) $(FLAGS) -g $(INCLUDES) -c $(MOD)_wrap.cpp
	$(CCPLUS) -shared $(OBJ) $(LFLAGS) -o _$(MOD).so $(LDFLAGS);
##
## The sed script fixes a problem with the disposal of DdNodes.
## Essentially, the destructor has to call Cudd_RecursiveDeref irrespective of whoever swig thinks
## owns the object -- we aren't going to really free anything anyway -- we only deref the node and
## let CUDD handle the actual freeing up of the node.
## Note: This used to be done by a script called fixpycudd.py
## Note to note: This is now fixed by using the declaration %newobject for methods that require the returned Node to be derefed on GC
##

$(MOD)_wrap.cpp:$(SWG)
	gcc -E -P -x c ./docstring | sed -e "s/\"\([^,]*\)\"/\1/g" | sed -e "s/\([^\n].*\)/#define DOCSTRING \"\1\"/" > docstring.h
	$(SWIG) $(SWIG_FLAGS) $(MOD).i;

clean:
	rm -f *.o *_wrap* *.pyc *.pyo _$(MOD).so $(MOD).py $(MOD)tmp.py docstring.h;

depend: 
	@sed "/^# DO NOT CHANGE THIS OR ANY SUCCEEDING LINE -- AUTOGENERATED DEPS/, $$ d" Makefile > mktemp
	@echo "# DO NOT CHANGE THIS OR ANY SUCCEEDING LINE -- AUTOGENERATED DEPS" >> mktemp
	@$(CCPLUS) $(FLAGS) $(DEP_INCL) -E -MM $(MOD).cpp >> mktemp
# The next line tries to get the C++ dependencies for the SWIG interface files 
# First sed prints out the raw C++ code between %{...%}. Second sed removes those markers and any #error directives. Finally, generate a rule for our wrapper cpp file
	@sed -n "/^%{/,/%}/ p" $(SWG) | sed -e "s/^%[{}].*\|#error.*//" | $(CCPLUS) -x c++ $(FLAGS) $(DEP_INCL) -E -MM -MQ "$(MOD)_wrap.cpp" - >> mktemp
	@mv -f mktemp Makefile

strip_depend:
	@sed "/^# DO NOT CHANGE THIS OR ANY SUCCEEDING LINE -- AUTOGENERATED DEPS/, $$ d" Makefile > mktemp # $ marks EOF for sed
	@echo "# DO NOT CHANGE THIS OR ANY SUCCEEDING LINE -- AUTOGENERATED DEPS" >> mktemp
	@mv -f mktemp Makefile

docs:
	rm -rf doc
	rm -f *.html
	cp $(CUDD)/cudd/doc/cuddAllDet.html .
	cp -f $(CUDD)/cudd/cudd.h .
	grep "extern\|define Cudd" cudd.h | grep -v "\"C\"" | sed -e's/extern .* \(C[^(]*\) *(.*/\1/' | sed -e's/#define \([^(]*\).*/\1/' | sort > cudd_funcs
	python doccer.py
	rm -f cudd_funcs cudd.h
	mkdir doc
	mv *.html doc

##################
##
## CREDITS
##
## Current maintainer : Merritt Miller
## Bug reports to     : merrittmiller@umail.ucsb.edu
## Former maintainer  : Aravind Vijayakumar
## Original creator   : Steve Haynal
##
##################
# DO NOT CHANGE THIS OR ANY SUCCEEDING LINE -- AUTOGENERATED DEPS
pycudd.o: pycudd.cpp pycudd.h ../cudd-2.4.2//include/util.h \
 ../cudd-2.4.2//include/cudd.h ../cudd-2.4.2//include/mtr.h \
 ../cudd-2.4.2//include/epd.h ../cudd-2.4.2//include/cuddInt.h \
 ../cudd-2.4.2//include/cudd.h ../cudd-2.4.2//include/st.h \
 ../cudd-2.4.2//include/dddmp.h ../cudd-2.4.2//include/util.h \
 ../cudd-2.4.2//include/epd.h
pycudd_wrap.cpp:  ../cudd-2.4.2//include/cudd.h \
 ../cudd-2.4.2//include/mtr.h ../cudd-2.4.2//include/epd.h pycudd.h \
 ../cudd-2.4.2//include/util.h ../cudd-2.4.2//include/cuddInt.h \
 ../cudd-2.4.2//include/cudd.h ../cudd-2.4.2//include/st.h \
 ../cudd-2.4.2//include/dddmp.h ../cudd-2.4.2//include/util.h \
 ../cudd-2.4.2//include/epd.h
