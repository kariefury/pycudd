/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CUDD_VALUE_TYPE swig_types[0]
#define SWIGTYPE_p_Cudd_AggregationType swig_types[1]
#define SWIGTYPE_p_Cudd_ErrorType swig_types[2]
#define SWIGTYPE_p_DdApaDigit swig_types[3]
#define SWIGTYPE_p_DdApaNumber swig_types[4]
#define SWIGTYPE_p_DdArray swig_types[5]
#define SWIGTYPE_p_DdGen swig_types[6]
#define SWIGTYPE_p_DdHalfWord swig_types[7]
#define SWIGTYPE_p_DdManager swig_types[8]
#define SWIGTYPE_p_DdNode swig_types[9]
#define SWIGTYPE_p_DdTlcInfo swig_types[10]
#define SWIGTYPE_p_DoubleArray swig_types[11]
#define SWIGTYPE_p_EpDouble swig_types[12]
#define SWIGTYPE_p_FILE swig_types[13]
#define SWIGTYPE_p_IntArray swig_types[14]
#define SWIGTYPE_p_MtrNode swig_types[15]
#define SWIGTYPE_p_NodePair swig_types[16]
#define SWIGTYPE_p_RangeError swig_types[17]
#define SWIGTYPE_p_StringArray swig_types[18]
#define SWIGTYPE_p_char swig_types[19]
#define SWIGTYPE_p_double swig_types[20]
#define SWIGTYPE_p_int swig_types[21]
#define SWIGTYPE_p_p_DdNode swig_types[22]
#define SWIGTYPE_p_p_char swig_types[23]
#define SWIGTYPE_p_p_int swig_types[24]
#define SWIGTYPE_p_p_p_DdNode swig_types[25]
#define SWIGTYPE_p_p_p_char swig_types[26]
static swig_type_info *swig_types[28];
static swig_module_info swig_module = {swig_types, 27, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _pycudd.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__pycudd

#else
#  define SWIG_init    init_pycudd

#endif
#define SWIG_name    "_pycudd"

#define SWIGVERSION 0x020011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include <iostream>
#include <iomanip>
#include <cassert>
#include <string>
using std::cerr;
using std::endl;
using std::hex;
using std::string;

#include "cudd.h"
#include "pycudd.h"
#include "dddmp.h"
#include "epd.h"
#ifdef BREL_R_THERE
#include "brelInt.h"
#endif
#define FROM_PYCUDDI


extern DdNode ***glob_conj;
extern DdNode **node_iter;    
extern int **cube_iter;



#ifdef PYCUDD_DEBUG
#define using_map(x) printf("Entering typemap for %s\n",x);
#endif

/////////////////////////////////////////////
//
// This takes a PyObject * result that is assumed to be a long
// If it is 0, there is no array to convert in src, else, there
// is an array of sz elements to grab from there
//
/////////////////////////////////////////////

static PyObject * array_to_tuple(PyObject *dest, int **src, int sz) {
  PyObject *o2, *result;
  // Note: When adding o2 to the tuple using PyTuple_SetItem, Py_DECREF is not called, since
  // PyTuple_SetItem is one of a few functions that "steal" a reference (Python manual terminology)
  // What this means is that PyTuple_SetItem will take care of the DECREF when the tuple is destroyed
  int chk;
  int i;
  o2 = dest;
  chk = (int) PyInt_AsLong(o2);
  if (chk) {
    result = PyTuple_New(sz+1);
    PyTuple_SetItem(result,0,o2);
    for (i=0;i<sz;i++) PyTuple_SetItem(result,i+1,PyInt_FromLong((*src)[i]));
    // Note that DdGen will free the memory allocated for the int array 
  }
  else {
    result = PyTuple_New(1);
    PyTuple_SetItem(result,0,o2);
  }
  return result;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





  #define SWIG_From_double   PyFloat_FromDouble 


#ifndef FROM_PYCUDDI
#error Use only from pycudd.i. Make sure to define FROM_PYCUDDI!
#endif

SWIGINTERN DdTlcInfo *new_DdTlcInfo(){
    return NULL;
  }
SWIGINTERN void delete_DdTlcInfo(DdTlcInfo *self){
    Cudd_tlcInfoFree(self);
  }
SWIGINTERN int DdTlcInfo_ReadIthClause(DdTlcInfo *self,int i,DdHalfWord *dum_var1,DdHalfWord *dum_var2,int *dum_phase1,int *dum_phase2){ return Cudd_ReadIthClause(self, i, dum_var1, dum_var2, dum_phase1, dum_phase2); }
SWIGINTERN EpDouble *new_EpDouble__SWIG_0(){
    EpDouble * epdouble;
    epdouble = EpdAlloc();
    return epdouble;
  }
SWIGINTERN EpDouble *new_EpDouble__SWIG_1(double value){
    EpDouble * epdouble;
    epdouble = EpdAlloc();
    EpdConvert(value,epdouble);
    return epdouble;
  }
SWIGINTERN EpDouble *new_EpDouble__SWIG_2(EpDouble *value){
    EpDouble * epdouble;
    epdouble = EpdAlloc();
    EpdCopy(value,epdouble);
    return epdouble;
  }
SWIGINTERN void delete_EpDouble(EpDouble *self){
    EpdFree(self);
  }
SWIGINTERN void EpDouble_EpdConvert(EpDouble *self,double value){ EpdConvert(value,self); }
SWIGINTERN void EpDouble_EpdNormalize(EpDouble *self){ EpdNormalize(self); }
SWIGINTERN void EpDouble_EpdNormalizeDecimal(EpDouble *self){ EpdNormalizeDecimal(self); }
SWIGINTERN void EpDouble_EpdMakeInf(EpDouble *self,int sign){ EpdMakeInf(self, sign); }
SWIGINTERN void EpDouble_EpdMakeZero(EpDouble *self,int sign){ EpdMakeZero(self,sign); }
SWIGINTERN void EpDouble_EpdMakeNan(EpDouble *self){ EpdMakeNan(self); }
SWIGINTERN void EpDouble_EpdCopy(EpDouble *self,EpDouble *to){ EpdCopy(self,to); }
SWIGINTERN void EpDouble_EpdGetValueAndDecimalExponent(EpDouble *self,double *dum_value,int *dum_exponent){ return EpdGetValueAndDecimalExponent(self,dum_value,dum_exponent); }
SWIGINTERN void EpDouble_EpdMultiply(EpDouble *self,double value){ EpdMultiply(self,value); }
SWIGINTERN void EpDouble_EpdMultiply2(EpDouble *self,EpDouble *epd2){ EpdMultiply2(self,epd2); }
SWIGINTERN void EpDouble_EpdMultiply2Decimal(EpDouble *self,EpDouble *epd2){ EpdMultiply2Decimal(self,epd2); }
SWIGINTERN void EpDouble_EpdMultiply3(EpDouble *self,EpDouble *epd2,EpDouble *epd3){ EpdMultiply3(self,epd2,epd3); }
SWIGINTERN void EpDouble_EpdMultiply3Decimal(EpDouble *self,EpDouble *epd2,EpDouble *epd3){ EpdMultiply3Decimal(self,epd2,epd3); }
SWIGINTERN void EpDouble_EpdDivide(EpDouble *self,double value){ EpdDivide(self,value); }
SWIGINTERN void EpDouble_EpdDivide2(EpDouble *self,EpDouble *epd2){ EpdDivide2(self,epd2); }
SWIGINTERN void EpDouble_EpdDivide3(EpDouble *self,EpDouble *epd2,EpDouble *epd3){ EpdDivide3(self,epd2,epd3); }
SWIGINTERN void EpDouble_EpdAdd(EpDouble *self,double value){ EpdAdd(self,value); }
SWIGINTERN void EpDouble_EpdAdd2(EpDouble *self,EpDouble *epd2){ EpdAdd2(self,epd2); }
SWIGINTERN void EpDouble_EpdAdd3(EpDouble *self,EpDouble *epd2,EpDouble *epd3){ EpdAdd3(self,epd2,epd3); }
SWIGINTERN void EpDouble_EpdSubtract(EpDouble *self,double value){ EpdSubtract(self,value); }
SWIGINTERN void EpDouble_EpdSubtract2(EpDouble *self,EpDouble *epd2){ EpdSubtract2(self,epd2); }
SWIGINTERN void EpDouble_EpdSubtract3(EpDouble *self,EpDouble *epd2,EpDouble *epd3){ EpdSubtract3(self,epd2,epd3); }
SWIGINTERN void EpDouble_EpdPow2(EpDouble *self,int n){ EpdPow2(n,self); }
SWIGINTERN void EpDouble_EpdPow2Decimal(EpDouble *self,int n){ EpdPow2Decimal(n,self); }
SWIGINTERN EpDouble *EpDouble___add____SWIG_0(EpDouble *self,EpDouble *other){ EpDouble *result = EpdAlloc(); EpdAdd3(self,other,result); return result; }
SWIGINTERN EpDouble *EpDouble___add____SWIG_1(EpDouble *self,double other){ EpDouble *result = EpdAlloc(); EpdCopy(self,result); EpdAdd(result,other); return result; }
SWIGINTERN EpDouble *EpDouble___sub____SWIG_0(EpDouble *self,EpDouble *other){ EpDouble *result = EpdAlloc(); EpdSubtract3(self,other,result); return result; }
SWIGINTERN EpDouble *EpDouble___sub____SWIG_1(EpDouble *self,double other){ EpDouble *result = EpdAlloc(); EpdCopy(self,result); EpdSubtract(result,other); return result; }
SWIGINTERN EpDouble *EpDouble___mul____SWIG_0(EpDouble *self,EpDouble *other){ EpDouble *result = EpdAlloc(); EpdMultiply3(self,other,result); return result; }
SWIGINTERN EpDouble *EpDouble___mul____SWIG_1(EpDouble *self,double other){ EpDouble *result = EpdAlloc(); EpdCopy(self,result); EpdMultiply(result,other); return result; }
SWIGINTERN EpDouble *EpDouble___div____SWIG_0(EpDouble *self,EpDouble *other){ EpDouble *result = EpdAlloc(); EpdDivide3(self,other,result); return result; }
SWIGINTERN EpDouble *EpDouble___div____SWIG_1(EpDouble *self,double other){ EpDouble *result = EpdAlloc(); EpdDivide(self,other); return result; }
SWIGINTERN bool EpDouble_EpdCmp(EpDouble *self,EpDouble *other){ return EpdCmp((const char *) self, (const char *) other) ? true : false; }

SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}

SWIGINTERN bool EpDouble_EpdIsInf(EpDouble *self){ return EpdIsInf(self) ? true : false; }
SWIGINTERN bool EpDouble_EpdIsZero(EpDouble *self){ return EpdIsZero(self) ? true : false; }
SWIGINTERN bool EpDouble_EpdIsNan(EpDouble *self){ return EpdIsNan(self) ? true : false; }
SWIGINTERN bool EpDouble_EpdIsNanOrInf(EpDouble *self){ return EpdIsNanOrInf(self) ? true : false; }
SWIGINTERN bool EpDouble___nonzero__(EpDouble *self){ return EpdIsZero(self) ? false : true; }
SWIGINTERN bool EpDouble___eq__(EpDouble *self,EpDouble *other){ return EpdCmp((const char *) self, (const char *) other) ? false : true; }
SWIGINTERN bool EpDouble___ne__(EpDouble *self,EpDouble *other){ return EpdCmp((const char *) self, (const char *) other) ? true : false; }

#ifndef FROM_PYCUDDI
#error Use only from pycudd.i. Make sure to define FROM_PYCUDDI!
#endif
class CuddFatalError { 
public:
  CuddFatalError(string err);
  string er;
};
 
 CuddFatalError::CuddFatalError(string err) {
   er = err;
 }
   


void KillAllNodes(DdManager * self) {
#ifdef PYCUDD_DEBUG
  cerr << "Entering kill all nodes" << endl;
#endif
  int size;
  int i, j;
  int remain;	/* the expected number of remaining references to one */
  DdNodePtr *nodelist;
  DdNode *node;
  DdNode *Node;
  DdNode *sentinel = &(self->sentinel);
  DdSubtable *subtable;
  int count = 0;
  int badrefs = Cudd_CheckZeroRef(self);
  int collected = 0;
  int zeroed = 0;
  int ord, index;
  if (!badrefs) {
    cerr << "All nodes have already been disposed of correctly!" << endl;
    return;
  }
#ifdef PYCUDD_DEBUG
  cerr << badrefs << " uncollected nodes" << endl;
#endif
  /* First look at the BDD/ADD subtables. */
  remain = 1; /* reference from the manager */
  size = self->size;
  remain += 2 * size;	/* reference from the BDD projection functions */
  
  for (i = 0; i < size; i++) {
    subtable = &(self->subtables[i]);
    nodelist = subtable->nodelist;
    for (j = 0; (unsigned) j < subtable->slots; j++) {
      node = nodelist[j];
      while (node != sentinel) {
	if (node->ref != 0 && node->ref != DD_MAXREF) {
	  index = (int) node->index;
	  if (node != self->vars[index]) {
	    Node = Cudd_Regular(node);   // Do I need to do this? 
#ifdef PYCUDD_DEBUG
	    cerr << "Node: " << hex << node << " Refs: " << node->ref << endl;
#endif
	    Node->ref = 0; 
	    self->dead++;
	    ord = self->perm[Node->index];
	    self->subtables[ord].dead++;
	    zeroed++;
	  } else {
	    if (node->ref != 1) {
	      node->ref = 1;
	      zeroed++;      // Reducing a projection funcs refs to 1 preps it for killing
	    }
	  }  
	}
	node = node->next;
      }
    }
  }
  
  /* Then look at the ZDD subtables. */
  size = self->sizeZ;
  if (size) /* references from ZDD universe */
    remain += 2;
  
  for (i = 0; i < size; i++) {
    subtable = &(self->subtableZ[i]);
    nodelist = subtable->nodelist;
    for (j = 0; (unsigned) j < subtable->slots; j++) {
      node = nodelist[j];
      while (node != NULL) {
	if (node->ref != 0 && node->ref != DD_MAXREF) {
	  index = (int) node->index;
	  if (node == self->univ[self->permZ[index]]) {
	    if (node->ref > 2) {
	      node->ref = 2;   // Playing safe ... set it to values that CheckZeroRefs will feel happy about
	      zeroed++;
	    }
	  } else {
	    node->ref = 0;
	    zeroed++;
	    self->dead++;
	    ord = self->permZ[Node->index];
	    self->subtableZ[ord].dead++;
	  }
	}
	node = node->next;
      }
    }
  }
  
  /* Now examine the constant table. Plusinfinity, minusinfinity, and
  ** zero are referenced by the manager. One is referenced by the
  ** manager, by the ZDD universe, and by all projection functions.
  ** All other nodes should have no references.
  */
  
  nodelist = self->constants.nodelist;
  for (j = 0; (unsigned) j < self->constants.slots; j++) {
    node = nodelist[j];
    while (node != NULL) {
      if (node->ref != 0 && node->ref != DD_MAXREF) {
	if (node == self->one) {
	  node->ref = remain;
	} 
	else if (node == self->zero || node == self->plusinfinity || node == self->minusinfinity) {
	  if (node->ref != 1) {
	    node->ref = 1;
	  }
	} 
      }
      node = node->next;
    }
  }

  collected = cuddGarbageCollect(self, 1);
  mgr = NULL;
#ifdef PYCUDD_DEBUG
  cerr << "Exiting kill all nodes" << endl << "Zeroed refs for " << zeroed <<  " nodes.\nGarbage collection freed a total of " << collected << " nodes" << endl;
  assert(!Cudd_CheckZeroRef(self)); // Better be zero!!
#endif
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN DdManager *new_DdManager__SWIG_0(unsigned int numVars=0,unsigned int numVarsZ=0,unsigned int numSlots=CUDD_UNIQUE_SLOTS,unsigned int cacheSize=CUDD_CACHE_SLOTS,unsigned long maxMemory=0){
    DdManager* mgri = Cudd_Init(numVars,numVarsZ,numSlots,cacheSize,maxMemory);

    if (mgr) cerr << "Default manager already exists!" << endl;
    return mgri;
  }
SWIGINTERN void delete_DdManager(DdManager *self){



    int retval = Cudd_CheckZeroRef(self);
    if (!retval) {
      cerr << "Quitting manager" << endl;
    } else {






    }
    Cudd_Quit(self);
    mgr = NULL;
  }
SWIGINTERN void DdManager_KillNode(DdManager *self,long num){



    Cudd_RecursiveDeref(self, (DdNode *) num);
  }
SWIGINTERN int DdManager_IsPsVar(DdManager *self,int index){ return Cudd_bddIsPsVar(self, index); }
SWIGINTERN int DdManager_IsNsVar(DdManager *self,int index){  return Cudd_bddIsNsVar(self, index);  }
SWIGINTERN int DdManager_SetPsVar(DdManager *self,int index){ return Cudd_bddSetPsVar(self, index);  }
SWIGINTERN int DdManager_SetNsVar(DdManager *self,int index){ return Cudd_bddSetNsVar(self, index);  }
SWIGINTERN int DdManager_SetPairIndex(DdManager *self,int index,int pairIndex){ return Cudd_bddSetPairIndex(self,index,pairIndex);  }
SWIGINTERN int DdManager_ReadPairIndex(DdManager *self,int index){ return Cudd_bddReadPairIndex(self,index); }
SWIGINTERN int DdManager_SetVarToBeGrouped(DdManager *self,int index){ return Cudd_bddSetVarToBeGrouped(self,index); }
SWIGINTERN int DdManager_SetVarHardGroup(DdManager *self,int index){ return Cudd_bddSetVarHardGroup(self,index); }
SWIGINTERN int DdManager_ResetVarToBeGrouped(DdManager *self,int index){ return Cudd_bddResetVarToBeGrouped(self,index); }
SWIGINTERN int DdManager_IsVarToBeGrouped(DdManager *self,int index){ return Cudd_bddIsVarToBeGrouped(self,index); }
SWIGINTERN int DdManager_IsVarHardGroup(DdManager *self,int index){ return Cudd_bddIsVarHardGroup(self,index); }
SWIGINTERN int DdManager_SetVarToBeUngrouped(DdManager *self,int index){ return Cudd_bddSetVarToBeUngrouped(self,index); }
SWIGINTERN int DdManager_IsVarToBeUngrouped(DdManager *self,int index){ return Cudd_bddIsVarToBeUngrouped(self,index); }
SWIGINTERN int DdManager_SetPiVar(DdManager *self,int index){ return Cudd_bddSetPiVar(self,index); }
SWIGINTERN int DdManager_IsPiVar(DdManager *self,int index){ return Cudd_bddIsPiVar(self,index); }
SWIGINTERN int DdManager_BindVar(DdManager *self,int index){ return Cudd_bddBindVar(self,index); }
SWIGINTERN int DdManager_UnbindVar(DdManager *self,int index){ return Cudd_bddUnbindVar(self,index); }
SWIGINTERN int DdManager_VarIsBound(DdManager *self,int index){ return Cudd_bddVarIsBound(self,index); }
SWIGINTERN double DdManager_ReadMaxGrowthAlternate(DdManager *self){ return Cudd_ReadMaxGrowthAlternate(self); }
SWIGINTERN void DdManager_SetMaxGrowthAlternate(DdManager *self,double mg){ Cudd_SetMaxGrowthAlternate(self,mg); }
SWIGINTERN int DdManager_ReadReorderingCycle(DdManager *self){ return Cudd_ReadReorderingCycle(self); }
SWIGINTERN void DdManager_SetReorderingCycle(DdManager *self,int cycle){ Cudd_SetReorderingCycle(self,cycle);}
SWIGINTERN int DdManager_PrintCover(DdManager *self,DdNode *l,DdNode *u){ return Cudd_bddPrintCover(self, l, u); }
SWIGINTERN unsigned int DdManager_Prime(DdManager *self,unsigned int p){ return Cudd_Prime(p); }

SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}

SWIGINTERN int DdManager___len__(DdManager *self){ return Cudd_ReadSize(self); }
SWIGINTERN DdNode *DdManager___getitem__(DdManager *self,int i){ 
    if (i < 0) throw CuddFatalError("CUDD Fatal error: Negative argument to bddIthVar.");
    DdNode * result = Cudd_bddIthVar(self, i); 
    Cudd_Ref(result);
    return result; 
  }
SWIGINTERN DdNode *DdManager_addNewVar(DdManager *self){ DdNode* result = Cudd_addNewVar(self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addNewVarAtLevel(DdManager *self,int level){ DdNode* result = Cudd_addNewVarAtLevel(self,  level); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_NewVar(DdManager *self){ DdNode* result = Cudd_bddNewVar(self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_NewVarAtLevel(DdManager *self,int level){ DdNode* result = Cudd_bddNewVarAtLevel(self,  level); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addIthVar(DdManager *self,int i){ DdNode* result = Cudd_addIthVar(self,  i); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_IthVar(DdManager *self,int i){ DdNode* result = Cudd_bddIthVar(self,  i); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_zddIthVar(DdManager *self,int i){ DdNode* result = Cudd_zddIthVar(self,  i); Cudd_Ref(result); return result; }
SWIGINTERN int DdManager_zddVarsFromBddVars(DdManager *self,int multiplicity){ return Cudd_zddVarsFromBddVars(self,  multiplicity); }
SWIGINTERN DdNode *DdManager_addConst(DdManager *self,CUDD_VALUE_TYPE c){ DdNode* result = Cudd_addConst(self, c); Cudd_Ref(result); return result; }
SWIGINTERN void DdManager_AutodynEnable(DdManager *self,int method){ Cudd_AutodynEnable(self, (Cudd_ReorderingType) method); }
SWIGINTERN void DdManager_AutodynDisable(DdManager *self){ Cudd_AutodynDisable(self); }
SWIGINTERN int DdManager_ReorderingStatus(DdManager *self,int *dum_status){ return Cudd_ReorderingStatus(self, (Cudd_ReorderingType*) dum_status); }
SWIGINTERN void DdManager_AutodynEnableZdd(DdManager *self,int method){ Cudd_AutodynEnableZdd(self, (Cudd_ReorderingType) method); }
SWIGINTERN void DdManager_AutodynDisableZdd(DdManager *self){ Cudd_AutodynDisableZdd(self); }
SWIGINTERN int DdManager_ReorderingStatusZdd(DdManager *self,int *dum_status){ return Cudd_ReorderingStatusZdd(self, (Cudd_ReorderingType*) dum_status); }
SWIGINTERN int DdManager_zddRealignmentEnabled(DdManager *self){ return Cudd_zddRealignmentEnabled(self); }
SWIGINTERN void DdManager_zddRealignEnable(DdManager *self){ Cudd_zddRealignEnable(self); }
SWIGINTERN void DdManager_zddRealignDisable(DdManager *self){ Cudd_zddRealignDisable(self); }
SWIGINTERN int DdManager_RealignmentEnabled(DdManager *self){ return Cudd_bddRealignmentEnabled(self); }
SWIGINTERN void DdManager_RealignEnable(DdManager *self){ Cudd_bddRealignEnable(self); }
SWIGINTERN void DdManager_RealignDisable(DdManager *self){ Cudd_bddRealignDisable(self); }
SWIGINTERN DdNode *DdManager_ReadOne(DdManager *self){ DdNode* result = Cudd_ReadOne(self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_ReadZddOne(DdManager *self,int i){ DdNode* result = Cudd_ReadZddOne(self,  i); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_ReadZero(DdManager *self){ DdNode* result = Cudd_ReadZero(self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_ReadLogicZero(DdManager *self){ DdNode* result = Cudd_ReadLogicZero(self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_ReadPlusInfinity(DdManager *self){ DdNode* result = Cudd_ReadPlusInfinity(self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_ReadMinusInfinity(DdManager *self){ DdNode* result = Cudd_ReadMinusInfinity(self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_ReadBackground(DdManager *self){ DdNode* result = Cudd_ReadBackground(self); Cudd_Ref(result); return result; }
SWIGINTERN unsigned int DdManager_ReadCacheSlots(DdManager *self){ return Cudd_ReadCacheSlots(self); }
SWIGINTERN double DdManager_ReadCacheUsedSlots(DdManager *self){ return Cudd_ReadCacheUsedSlots(self); }
SWIGINTERN double DdManager_ReadCacheLookUps(DdManager *self){ return Cudd_ReadCacheLookUps(self); }
SWIGINTERN double DdManager_ReadCacheHits(DdManager *self){ return Cudd_ReadCacheHits(self); }
SWIGINTERN double DdManager_ReadRecursiveCalls(DdManager *self){ return Cudd_ReadRecursiveCalls(self); }
SWIGINTERN unsigned int DdManager_ReadMinHit(DdManager *self){ return Cudd_ReadMinHit(self); }
SWIGINTERN void DdManager_SetMinHit(DdManager *self,unsigned int hr){ Cudd_SetMinHit(self,   hr); }
SWIGINTERN unsigned int DdManager_ReadLooseUpTo(DdManager *self){ return Cudd_ReadLooseUpTo(self); }
SWIGINTERN void DdManager_SetLooseUpTo(DdManager *self,unsigned int lut){ Cudd_SetLooseUpTo(self,   lut); }
SWIGINTERN unsigned int DdManager_ReadMaxCache(DdManager *self){ return Cudd_ReadMaxCache(self); }
SWIGINTERN unsigned int DdManager_ReadMaxCacheHard(DdManager *self){ return Cudd_ReadMaxCacheHard(self); }
SWIGINTERN void DdManager_SetMaxCacheHard(DdManager *self,unsigned int mc){ Cudd_SetMaxCacheHard(self,   mc); }
SWIGINTERN int DdManager_ReadSize(DdManager *self){ return Cudd_ReadSize(self); }
SWIGINTERN int DdManager_ReadZddSize(DdManager *self){ return Cudd_ReadZddSize(self); }
SWIGINTERN unsigned int DdManager_ReadSlots(DdManager *self){ return Cudd_ReadSlots(self); }
SWIGINTERN double DdManager_ReadUsedSlots(DdManager *self){ return Cudd_ReadUsedSlots(self); }
SWIGINTERN double DdManager_ExpectedUsedSlots(DdManager *self){ return Cudd_ExpectedUsedSlots(self); }
SWIGINTERN unsigned int DdManager_ReadKeys(DdManager *self){ return Cudd_ReadKeys(self); }
SWIGINTERN unsigned int DdManager_ReadDead(DdManager *self){ return Cudd_ReadDead(self); }
SWIGINTERN unsigned int DdManager_ReadMinDead(DdManager *self){ return Cudd_ReadMinDead(self); }
SWIGINTERN int DdManager_ReadReorderings(DdManager *self){ return Cudd_ReadReorderings(self); }
SWIGINTERN long DdManager_ReadReorderingTime(DdManager *self){ return Cudd_ReadReorderingTime(self); }

  #define SWIG_From_long   PyLong_FromLong 

SWIGINTERN int DdManager_ReadGarbageCollections(DdManager *self){ return Cudd_ReadGarbageCollections(self); }
SWIGINTERN long DdManager_ReadGarbageCollectionTime(DdManager *self){ return Cudd_ReadGarbageCollectionTime(self); }
SWIGINTERN int DdManager_GarbageCollect(DdManager *self,int clearCache){ return cuddGarbageCollect(self,clearCache); }
SWIGINTERN double DdManager_ReadNodesFreed(DdManager *self){ return Cudd_ReadNodesFreed(self); }
SWIGINTERN double DdManager_ReadNodesDropped(DdManager *self){ return Cudd_ReadNodesDropped(self); }
SWIGINTERN double DdManager_ReadUniqueLookUps(DdManager *self){ return Cudd_ReadUniqueLookUps(self); }
SWIGINTERN double DdManager_ReadUniqueLinks(DdManager *self){ return Cudd_ReadUniqueLinks(self); }
SWIGINTERN int DdManager_ReadSiftMaxVar(DdManager *self){ return Cudd_ReadSiftMaxVar(self); }
SWIGINTERN void DdManager_SetSiftMaxVar(DdManager *self,int smv){ Cudd_SetSiftMaxVar(self,  smv); }
SWIGINTERN int DdManager_ReadSiftMaxSwap(DdManager *self){ return Cudd_ReadSiftMaxSwap(self); }
SWIGINTERN void DdManager_SetSiftMaxSwap(DdManager *self,int sms){ Cudd_SetSiftMaxSwap(self,  sms); }
SWIGINTERN double DdManager_ReadMaxGrowth(DdManager *self){ return Cudd_ReadMaxGrowth(self); }
SWIGINTERN void DdManager_SetMaxGrowth(DdManager *self,double mg){ Cudd_SetMaxGrowth(self,  mg); }
SWIGINTERN MtrNode *DdManager_ReadTree(DdManager *self){ return Cudd_ReadTree(self); }
SWIGINTERN void DdManager_SetTree(DdManager *self,MtrNode *tree){ Cudd_SetTree(self, tree); }
SWIGINTERN void DdManager_FreeTree(DdManager *self){ Cudd_FreeTree(self); }
SWIGINTERN MtrNode *DdManager_ReadZddTree(DdManager *self){ return Cudd_ReadZddTree(self); }
SWIGINTERN void DdManager_SetZddTree(DdManager *self,MtrNode *tree){ Cudd_SetZddTree(self, tree); }
SWIGINTERN void DdManager_FreeZddTree(DdManager *self){ Cudd_FreeZddTree(self); }
SWIGINTERN int DdManager_ReadPerm(DdManager *self,int i){ return Cudd_ReadPerm(self,  i); }
SWIGINTERN int DdManager_ReadPermZdd(DdManager *self,int i){ return Cudd_ReadPermZdd(self,  i); }
SWIGINTERN int DdManager_ReadInvPerm(DdManager *self,int i){ return Cudd_ReadInvPerm(self,  i); }
SWIGINTERN int DdManager_ReadInvPermZdd(DdManager *self,int i){ return Cudd_ReadInvPermZdd(self,  i); }
SWIGINTERN DdNode *DdManager_ReadVars(DdManager *self,int i){ DdNode* result = Cudd_ReadVars(self,  i); Cudd_Ref(result); return result; }
SWIGINTERN CUDD_VALUE_TYPE DdManager_ReadEpsilon(DdManager *self){ return Cudd_ReadEpsilon(self); }
SWIGINTERN void DdManager_SetEpsilon(DdManager *self,CUDD_VALUE_TYPE ep){ Cudd_SetEpsilon(self, ep); }
SWIGINTERN Cudd_AggregationType DdManager_ReadGroupcheck(DdManager *self){ return Cudd_ReadGroupcheck(self); }
SWIGINTERN void DdManager_SetGroupcheck(DdManager *self,Cudd_AggregationType gc){ Cudd_SetGroupcheck(self, gc); }
SWIGINTERN int DdManager_GarbageCollectionEnabled(DdManager *self){ return Cudd_GarbageCollectionEnabled(self); }
SWIGINTERN void DdManager_EnableGarbageCollection(DdManager *self){ Cudd_EnableGarbageCollection(self); }
SWIGINTERN void DdManager_DisableGarbageCollection(DdManager *self){ Cudd_DisableGarbageCollection(self); }
SWIGINTERN int DdManager_DeadAreCounted(DdManager *self){ return Cudd_DeadAreCounted(self); }
SWIGINTERN void DdManager_TurnOnCountDead(DdManager *self){ Cudd_TurnOnCountDead(self); }
SWIGINTERN void DdManager_TurnOffCountDead(DdManager *self){ Cudd_TurnOffCountDead(self); }
SWIGINTERN int DdManager_ReadRecomb(DdManager *self){ return Cudd_ReadRecomb(self); }
SWIGINTERN void DdManager_SetRecomb(DdManager *self,int recomb){ Cudd_SetRecomb(self,  recomb); }
SWIGINTERN int DdManager_ReadSymmviolation(DdManager *self){ return Cudd_ReadSymmviolation(self); }
SWIGINTERN void DdManager_SetSymmviolation(DdManager *self,int symmviolation){ Cudd_SetSymmviolation(self,  symmviolation); }
SWIGINTERN int DdManager_ReadArcviolation(DdManager *self){ return Cudd_ReadArcviolation(self); }
SWIGINTERN void DdManager_SetArcviolation(DdManager *self,int arcviolation){ Cudd_SetArcviolation(self,  arcviolation); }
SWIGINTERN int DdManager_ReadPopulationSize(DdManager *self){ return Cudd_ReadPopulationSize(self); }
SWIGINTERN void DdManager_SetPopulationSize(DdManager *self,int populationSize){ Cudd_SetPopulationSize(self,  populationSize); }
SWIGINTERN int DdManager_ReadNumberXovers(DdManager *self){ return Cudd_ReadNumberXovers(self); }
SWIGINTERN void DdManager_SetNumberXovers(DdManager *self,int numberXovers){ Cudd_SetNumberXovers(self,  numberXovers); }
SWIGINTERN long DdManager_ReadMemoryInUse(DdManager *self){ return Cudd_ReadMemoryInUse(self); }
SWIGINTERN int DdManager_PrintInfo(DdManager *self,FILE *fp){ return Cudd_PrintInfo(self, fp); }
SWIGINTERN long DdManager_ReadPeakNodeCount(DdManager *self){ return Cudd_ReadPeakNodeCount(self); }
SWIGINTERN int DdManager_ReadPeakLiveNodeCount(DdManager *self){ return Cudd_ReadPeakLiveNodeCount(self); }
SWIGINTERN long DdManager_ReadNodeCount(DdManager *self){ return Cudd_ReadNodeCount(self); }
SWIGINTERN long DdManager_zddReadNodeCount(DdManager *self){ return Cudd_zddReadNodeCount(self); }
SWIGINTERN int DdManager_EnableReorderingReporting(DdManager *self){ return Cudd_EnableReorderingReporting(self); }
SWIGINTERN int DdManager_DisableReorderingReporting(DdManager *self){ return Cudd_DisableReorderingReporting(self); }
SWIGINTERN int DdManager_ReorderingReporting(DdManager *self){ return Cudd_ReorderingReporting(self); }
SWIGINTERN Cudd_ErrorType DdManager_ReadErrorCode(DdManager *self){ return Cudd_ReadErrorCode(self); }
SWIGINTERN void DdManager_ClearErrorCode(DdManager *self){ Cudd_ClearErrorCode(self); }
SWIGINTERN FILE *DdManager_ReadStdout(DdManager *self){ return Cudd_ReadStdout(self); }
SWIGINTERN void DdManager_SetStdout(DdManager *self,FILE *fp){ Cudd_SetStdout(self, fp); }
SWIGINTERN FILE *DdManager_ReadStderr(DdManager *self){ return Cudd_ReadStderr(self); }
SWIGINTERN void DdManager_SetStderr(DdManager *self,FILE *fp){ Cudd_SetStderr(self, fp); }
SWIGINTERN unsigned int DdManager_ReadNextReordering(DdManager *self){ return Cudd_ReadNextReordering(self); }
SWIGINTERN double DdManager_ReadSwapSteps(DdManager *self){ return Cudd_ReadSwapSteps(self); }
SWIGINTERN unsigned int DdManager_ReadMaxLive(DdManager *self){ return Cudd_ReadMaxLive(self); }
SWIGINTERN void DdManager_SetMaxLive(DdManager *self,unsigned int maxLive){ Cudd_SetMaxLive(self,   maxLive); }
SWIGINTERN long DdManager_ReadMaxMemory(DdManager *self){ return Cudd_ReadMaxMemory(self); }
SWIGINTERN void DdManager_SetMaxMemory(DdManager *self,long maxMemory){ Cudd_SetMaxMemory(self,  maxMemory); }
SWIGINTERN void DdManager_SetNextReordering(DdManager *self,unsigned int next){ Cudd_SetNextReordering(self,   next); }
SWIGINTERN int DdManager_DebugCheck(DdManager *self){ return Cudd_DebugCheck(self); }
SWIGINTERN int DdManager_CheckKeys(DdManager *self){ return Cudd_CheckKeys(self); }
SWIGINTERN MtrNode *DdManager_MakeTreeNode(DdManager *self,unsigned int low,unsigned int size,unsigned int type){ return Cudd_MakeTreeNode(self,   low,   size,   type); }
SWIGINTERN int DdManager_PrintLinear(DdManager *self){ return Cudd_PrintLinear(self); }
SWIGINTERN int DdManager_ReadLinear(DdManager *self,int x,int y){ return Cudd_ReadLinear(self,  x,  y); }
SWIGINTERN int DdManager_CheckZeroRef(DdManager *self){ return Cudd_CheckZeroRef(self); }
SWIGINTERN int DdManager_ReduceHeap(DdManager *self,int heuristic,int minsize){ return Cudd_ReduceHeap(self, (Cudd_ReorderingType) heuristic,  minsize); }
SWIGINTERN int DdManager_ShuffleHeap(DdManager *self,IntArray *permutation){ return Cudd_ShuffleHeap(self,  permutation->vec); }
SWIGINTERN void DdManager_SymmProfile(DdManager *self,int lower,int upper){ Cudd_SymmProfile(self,  lower,  upper); }
SWIGINTERN DdNode *DdManager_IndicesToCube(DdManager *self,IntArray *array,int n){ DdNode* result = Cudd_IndicesToCube(self,  array->vec,  n); Cudd_Ref(result); return result; }
SWIGINTERN double DdManager_AverageDistance(DdManager *self){ return Cudd_AverageDistance(self); }
SWIGINTERN MtrNode *DdManager_MakeZddTreeNode(DdManager *self,unsigned int low,unsigned int size,unsigned int type){ return Cudd_MakeZddTreeNode(self,   low,   size,   type); }
SWIGINTERN void DdManager_zddPrintSubtable(DdManager *self){ Cudd_zddPrintSubtable(self); }
SWIGINTERN int DdManager_zddReduceHeap(DdManager *self,int heuristic,int minsize){ return Cudd_zddReduceHeap(self, (Cudd_ReorderingType) heuristic,  minsize); }
SWIGINTERN int DdManager_zddShuffleHeap(DdManager *self,IntArray *permutation){ return Cudd_zddShuffleHeap(self,  permutation->vec); }
SWIGINTERN void DdManager_zddSymmProfile(DdManager *self,int lower,int upper){ Cudd_zddSymmProfile(self,  lower,  upper); }
SWIGINTERN DdNode *DdManager_BddToAdd(DdManager *self,DdNode *B){ DdNode* result = Cudd_BddToAdd(self,  B); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addBddPattern(DdManager *self,DdNode *f){ DdNode* result = Cudd_addBddPattern(self,  f); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addBddThreshold(DdManager *self,DdNode *f,CUDD_VALUE_TYPE value){ DdNode* result = Cudd_addBddThreshold(self,  f, value); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addBddStrictThreshold(DdManager *self,DdNode *f,CUDD_VALUE_TYPE value){ DdNode* result = Cudd_addBddStrictThreshold(self,  f, value); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addBddInterval(DdManager *self,DdNode *f,CUDD_VALUE_TYPE lower,CUDD_VALUE_TYPE upper){ DdNode* result = Cudd_addBddInterval(self,  f, lower, upper); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addBddIthBit(DdManager *self,DdNode *f,int bit){ DdNode* result = Cudd_addBddIthBit(self,  f,  bit); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_zddPortFromBdd(DdManager *self,DdNode *B){ DdNode* result = Cudd_zddPortFromBdd(self,  B); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_zddPortToBdd(DdManager *self,DdNode *f){ DdNode* result = Cudd_zddPortToBdd(self,  f); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_MakeBddFromZddCover(DdManager *self,DdNode *node){ DdNode* result = Cudd_MakeBddFromZddCover(self,  node); Cudd_Ref(result); return result; }
SWIGINTERN void DdManager_PrintVersion(DdManager *self,FILE *fp){ Cudd_PrintVersion(fp); }
SWIGINTERN long DdManager_Random(DdManager *self){ return Cudd_Random(); }
SWIGINTERN void DdManager_Srandom(DdManager *self,long seed){ Cudd_Srandom(seed); }
SWIGINTERN void DdManager_OutOfMem(DdManager *self,long size){  Cudd_OutOfMem(size); }
SWIGINTERN DdNode *DdManager_Transfer(DdManager *self,DdManager *ddDestination,DdNode *f){ DdNode* result = Cudd_bddTransfer(self, ddDestination, f); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_CubeArrayToBdd(DdManager *self,IntArray *y){ DdNode* result = Cudd_CubeArrayToBdd(self, y->vec); Cudd_Ref(result); return result; }
SWIGINTERN int DdManager_SetVarMap(DdManager *self,DdArray *x,DdArray *y,int n){ return Cudd_SetVarMap(self,  x->vec,  y->vec,  n); }
SWIGINTERN DdNode *DdManager_ComputeCube(DdManager *self,DdArray *vars,IntArray *phase,int n){ DdNode* result = Cudd_bddComputeCube(self,  vars->vec,  phase->vec,  n); Cudd_Ref(result); return result; }
SWIGINTERN int DdManager_zddDumpDot(DdManager *self,int n,DdArray *f,char **inames,char **onames,FILE *fp){ return Cudd_zddDumpDot(self,  n,  f->vec, inames, onames, fp); }
SWIGINTERN int DdManager_DumpBlif(DdManager *self,int n,DdArray *f,char **inames,char **onames,char *mname,FILE *fp,int mv){ return Cudd_DumpBlif(self,  n,  f->vec, inames, onames, mname, fp, mv); }
SWIGINTERN int DdManager_DumpBlifBody(DdManager *self,int n,DdArray *f,char **inames,char **onames,FILE *fp,int mv){ return Cudd_DumpBlifBody(self,  n,  f->vec, inames, onames, fp, mv); }
SWIGINTERN int DdManager_DumpDot(DdManager *self,int n,DdArray *f,char **inames,char **onames,FILE *fp){ return Cudd_DumpDot(self,  n,  f->vec,  inames,  onames, fp); }
SWIGINTERN int DdManager_DumpDaVinci(DdManager *self,int n,DdArray *f,char **inames,char **onames,FILE *fp){ return Cudd_DumpDaVinci(self,  n,  f->vec,  inames,  onames, fp); }
SWIGINTERN int DdManager_DumpDDcal(DdManager *self,int n,DdArray *f,char **inames,char **onames,FILE *fp){ return Cudd_DumpDDcal(self,  n,  f->vec,  inames,  onames, fp); }
SWIGINTERN int DdManager_DumpFactoredForm(DdManager *self,int n,DdArray *f,char **inames,char **onames,FILE *fp){ return Cudd_DumpFactoredForm(self,  n,  f->vec,  inames,  onames, fp); }
SWIGINTERN int DdManager_ArrayLoad(DdManager *self,int rootmatchmode,char **rootmatchnames,int varmatchmode,char **varmatchnames,IntArray *varmatchauxids,IntArray *varcomposeids,int mode,char *filename,FILE *fp,DdArray *pproots){ return Dddmp_cuddBddArrayLoad( self, (Dddmp_RootMatchType) rootmatchmode, rootmatchnames, (Dddmp_VarMatchType) varmatchmode, varmatchnames, (int *) ( varmatchauxids ? varmatchauxids->vec : NULL), (int *) ( varcomposeids ? varcomposeids->vec : NULL), mode, filename, fp, &(pproots->vec)); }
SWIGINTERN int DdManager_ArrayStore(DdManager *self,char *ddname,DdArray *roots,char **rootnames,char **varnames,IntArray *auxids,int mode,int varinfo,char *filename,FILE *fp){ return Dddmp_cuddBddArrayStore(self, ddname, roots->sz, roots->vec, rootnames, varnames, (int *) ( auxids ? auxids->vec : NULL), mode, (Dddmp_VarInfoType) varinfo, filename, fp); }
SWIGINTERN DdNode *DdManager_BddLoad(DdManager *self,int varmatchmode,char **varmatchnames,IntArray *varmatchauxids,IntArray *varcomposeids,int mode,char *filename,FILE *fp){ return Dddmp_cuddBddLoad( self, (Dddmp_VarMatchType) varmatchmode, varmatchnames, (int *) ( varmatchauxids ? varmatchauxids->vec : NULL), (int *) ( varcomposeids ? varcomposeids->vec : NULL), mode, filename, fp); }
SWIGINTERN int DdManager_BddStore(DdManager *self,char *ddname,DdNode *f,char **varnames,IntArray *auxids,int mode,int varinfo,char *fname,FILE *fp){ return Dddmp_cuddBddStore( self, ddname, f, varnames, (int *) (auxids ? auxids->vec : NULL), mode, (Dddmp_VarInfoType) varinfo, fname, fp); }
SWIGINTERN int DdManager_Bin2Text(DdManager *self,char *filein,char *fileout){ return Dddmp_Bin2Text( filein, fileout); }
SWIGINTERN int DdManager_DisplayBinary(DdManager *self,char *filein,char *fileout){ return Dddmp_cuddBddDisplayBinary( filein, fileout); }
SWIGINTERN int DdManager_Text2Bin(DdManager *self,char *filein,char *fileout){ return Dddmp_Text2Bin( filein, fileout); }
SWIGINTERN int DdManager_VectorSupportSize(DdManager *self,DdArray *F,int n){ return Cudd_VectorSupportSize(self,  F->vec,  n); }
SWIGINTERN int DdManager_ClassifySupport(DdManager *self,DdNode *f,DdNode *g,DdArray *common,DdArray *onlyF,DdArray *onlyG){ return Cudd_ClassifySupport(self,  f,  g,  common->vec,  onlyF->vec,  onlyG->vec); }
SWIGINTERN DdNode *DdManager_Xgty(DdManager *self,int N,DdArray *z,DdArray *x,DdArray *y){ DdNode* result = Cudd_Xgty(self,  N,  z->vec,  x->vec,  y->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_Xeqy(DdManager *self,int N,DdArray *x,DdArray *y){ DdNode* result = Cudd_Xeqy(self,  N,  x->vec,  y->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_Dxygtdxz(DdManager *self,int N,DdArray *x,DdArray *y,DdArray *z){ DdNode* result = Cudd_Dxygtdxz(self,  N,  x->vec,  y->vec,  z->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_Dxygtdyz(DdManager *self,int N,DdArray *x,DdArray *y,DdArray *z){ DdNode* result = Cudd_Dxygtdyz(self,  N,  x->vec,  y->vec,  z->vec); Cudd_Ref(result); return result; }
SWIGINTERN int DdManager_SharingSize(DdManager *self,DdArray *nodeArray,int n){ return Cudd_SharingSize(nodeArray->vec, n); }
SWIGINTERN int DdManager_ReadIndex(DdManager *self,int i){ return Cudd_ReadPerm(self,  i); }
SWIGINTERN DdNode *DdManager_addPlus(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addPlus(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addTimes(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addTimes(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addThreshold(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addThreshold(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addSetNZ(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addSetNZ(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addDivide(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addDivide(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addMinus(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addMinus(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addMinimum(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addMinimum(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addMaximum(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addMaximum(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addOneZeroMaximum(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addOneZeroMaximum(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addDiff(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addDiff(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addAgreement(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addAgreement(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addOr(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addOr(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addNand(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addNand(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addNor(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addNor(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addXor(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addXor(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addXnor(DdManager *self,DdArray *f,DdArray *g){ DdNode* result = Cudd_addXnor(self, f->vec,  g->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addWalsh(DdManager *self,DdArray *x,DdArray *y,int n){ DdNode* result = Cudd_addWalsh(self, x->vec,  y->vec,  n); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addHamming(DdManager *self,DdArray *xVars,DdArray *yVars,int nVars){ DdNode* result = Cudd_addHamming(self, xVars->vec,  yVars->vec,  nVars); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addComputeCube(DdManager *self,DdArray *vars,IntArray *phase,int n){ DdNode* result = Cudd_addComputeCube(self, vars->vec,  phase->vec,  n); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addResidue(DdManager *self,int n,int m,int options,int top){ DdNode* result = Cudd_addResidue(self, n, m, options, top); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdManager_addXeqy(DdManager *self,int N,DdArray *x,DdArray *y){ DdNode* result = Cudd_addXeqy(self, N, x->vec, y->vec); Cudd_Ref(result); return result; }
SWIGINTERN int DdManager_ApaNumberOfDigits(DdManager *self,int binaryDigits){ return Cudd_ApaNumberOfDigits(binaryDigits); }
SWIGINTERN DdApaNumber DdManager_NewApaNumber(DdManager *self,int digits){ return Cudd_NewApaNumber(digits); }
SWIGINTERN void DdManager_ApaCopy(DdManager *self,int digits,DdApaNumber source,DdApaNumber dest){ return Cudd_ApaCopy(digits, source, dest); }
SWIGINTERN DdApaDigit DdManager_ApaAdd(DdManager *self,int digits,DdApaNumber a,DdApaNumber b,DdApaNumber sum){ return Cudd_ApaAdd(digits, a, b, sum); }
SWIGINTERN DdApaDigit DdManager_ApaSubtract(DdManager *self,int digits,DdApaNumber a,DdApaNumber b,DdApaNumber diff){ return Cudd_ApaSubtract(digits, a, b, diff); }
SWIGINTERN DdApaDigit DdManager_ApaShortDivision(DdManager *self,int digits,DdApaNumber dividend,DdApaDigit divisor,DdApaNumber quotient){ return Cudd_ApaShortDivision(digits, dividend, divisor, quotient); }
SWIGINTERN unsigned int DdManager_ApaIntDivision(DdManager *self,int digits,DdApaNumber dividend,unsigned int divisor,DdApaNumber quotient){ return  Cudd_ApaIntDivision(digits, dividend, divisor, quotient); }
SWIGINTERN void DdManager_ApaShiftRight(DdManager *self,int digits,DdApaDigit in,DdApaNumber a,DdApaNumber b){ Cudd_ApaShiftRight(digits, in, a, b); }
SWIGINTERN void DdManager_ApaSetToLiteral(DdManager *self,int digits,DdApaNumber number,DdApaDigit literal){ Cudd_ApaSetToLiteral(digits, number, literal); }
SWIGINTERN void DdManager_ApaPowerOfTwo(DdManager *self,int digits,DdApaNumber number,int power){ Cudd_ApaPowerOfTwo(digits, number, power); }
SWIGINTERN int DdManager_ApaCompare(DdManager *self,int digitsFirst,DdApaNumber first,int digitsSecond,DdApaNumber second){ return  Cudd_ApaCompare(digitsFirst, first, digitsSecond, second); }
SWIGINTERN int DdManager_ApaCompareRatios(DdManager *self,int digitsFirst,DdApaNumber firstNum,unsigned int firstDen,int digitsSecond,DdApaNumber secondNum,unsigned int secondDen){ return Cudd_ApaCompareRatios(digitsFirst, firstNum, firstDen, digitsSecond, secondNum, secondDen); }
SWIGINTERN int DdManager_ApaPrintHex(DdManager *self,FILE *fp,int digits,DdApaNumber number){ return Cudd_ApaPrintHex(fp, digits, number); }
SWIGINTERN int DdManager_ApaPrintDecimal(DdManager *self,FILE *fp,int digits,DdApaNumber number){ return Cudd_ApaPrintDecimal(fp, digits, number); }
SWIGINTERN int DdManager_ApaPrintExponential(DdManager *self,FILE *fp,int digits,DdApaNumber number,int precision){ return Cudd_ApaPrintExponential(fp, digits, number, precision); }
SWIGINTERN DdNode *DdManager_One(DdManager *self){
    DdNode *result = Cudd_ReadOne(self);
    Cudd_Ref(result);
    return result;
  }
SWIGINTERN DdNode *DdManager_Zero(DdManager *self){
    DdNode *result = Cudd_ReadLogicZero(self);
    Cudd_Ref(result);
    return result;
  }
SWIGINTERN int DdManager_Sort(DdManager *self,DdNode *leftnd,DdNode *rightnd){
    return (Cudd_ReadPerm(self,Cudd_NodeReadIndex(rightnd)) - Cudd_ReadPerm(self,Cudd_NodeReadIndex(leftnd)));
  }
SWIGINTERN int DdManager_PrintStdOut(DdManager *self){ return Cudd_PrintInfo(self, stdout); }
SWIGINTERN DdNode *DdManager_StateCube(DdManager *self,char *cube,int base,int offset,int scale){
  	DdNode *tmp;
	int length;
	int i;
	DdNode *result = Cudd_ReadOne(self);
	Cudd_Ref(result);

	length = strlen(cube);

	for (i = length; i>=0; i--) {
	  if (cube[i]=='1') {
	    tmp = Cudd_bddAnd(self,result,Cudd_bddIthVar(self,((i*scale)+offset+base)));
	    Cudd_Ref(tmp);
	    Cudd_RecursiveDeref(self,result);
	    result = tmp;
	  } else if (cube[i]=='0') {
	    tmp = Cudd_bddAnd(self,result,Cudd_Not(Cudd_bddIthVar(self,((i*scale)+offset+base))));
	    Cudd_Ref(tmp);
	    Cudd_RecursiveDeref(self,result);
	    result = tmp;
	  }
	}
	return result;
  }
SWIGINTERN void DdManager_SetDefault(DdManager *self){
    mgr = self;
  }

#ifndef FROM_PYCUDDI
#error Use only from pycudd.i. Make sure to define FROM_PYCUDDI!
#endif

SWIGINTERN DdGen *new_DdGen__SWIG_0(DdNode *node1,int method,DdNode *node2=NULL){
    CUDD_VALUE_TYPE val;
    DdGen *result;
    if (method == 0) result = Cudd_FirstCube(mgr, node1, cube_iter, &val); 
    else if (method == 1) result = Cudd_FirstNode(mgr, node1, node_iter); 


    else if (method == 2) {
      assert(node2 != NULL);
      result = Cudd_FirstPrime(mgr,node1,node2, cube_iter);
    }





    return result;
  }
SWIGINTERN void delete_DdGen(DdGen *self){
    Cudd_GenFree(self);



  }

#ifndef FROM_PYCUDDI
#error Use only from pycudd.i. Make sure to define FROM_PYCUDDI!
#endif

SWIGINTERN DdNode *new_DdNode(){
   return NULL;
  }
SWIGINTERN void delete_DdNode(DdNode *self){
    //cerr << "Deleting ddnode" << endl;
    if (mgr) {
      Cudd_RecursiveDeref(mgr,self);
    }





  }
SWIGINTERN int DdNode_FirstCube(DdNode *self,DdGen *gen,int **dum_cube){
    if (Cudd_IsGenEmpty(gen)) { /* Happens if you call the generator on Logic Zero */ return 0; }
    return 1;
  }
SWIGINTERN int DdNode_NextCube(DdNode *self,DdGen *gen,int **dum_cube){
    CUDD_VALUE_TYPE val;
    int tmp;
    if (!gen) { /* Something is seriously wrong ! */ assert(0); }
    if (Cudd_IsGenEmpty(gen)) { // We should never hit this -- raise StopIteration in python earlier.
      fprintf(Cudd_ReadStdout(mgr),"You shouldn\'t be here! Fix your Python iterator.");
      return 0;
    }
    else { // Have a cube to return
      tmp = Cudd_NextCube(gen, dum_cube, &val);
      if (tmp <= 0) { // The freakin' generator is already empty ...
	assert(Cudd_IsGenEmpty(gen));
	return 0;
      }
      return 1;
    }
  }
SWIGINTERN int DdNode_FirstNode(DdNode *self,DdGen *gen,DdNode **dum_y){
    if (Cudd_IsGenEmpty(gen)) { /* Happens if you call the generator on Logic Zero */ return 0; }
    return 1;
  }
SWIGINTERN int DdNode_NextNode(DdNode *self,DdGen *gen,DdNode **dum_y){
    int tmp;
    if (!gen) { /* Something is seriously wrong ! */ assert(gen); }
    if (Cudd_IsGenEmpty(gen)) { // We should never hit this -- raise StopIteration in python earlier.
      fprintf(Cudd_ReadStdout(mgr),"You shouldn\'t be here! Fix your Python iterator.\n");
      return 0;
    }
    else { // Have a cube to return
      tmp = Cudd_NextNode(gen, dum_y);
      if (tmp <= 0) { // The freakin' generator is already empty ...
	assert(Cudd_IsGenEmpty(gen));
	return 0;
      }
      return 1;
    } 
  }
SWIGINTERN DdNode *DdNode_AndAbstractLimit(DdNode *self,DdNode *g,DdNode *cube,unsigned int limit){ DdNode* result = Cudd_bddAndAbstractLimit(mgr, self,g,cube,limit); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_AndLimit(DdNode *self,DdNode *g,unsigned int limit){ DdNode* result = Cudd_bddAndLimit(mgr, self, g, limit); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_NPAnd(DdNode *self,DdNode *c){ DdNode* result =  Cudd_bddNPAnd(mgr, self, c); Cudd_Ref(result); return result; }
SWIGINTERN DdTlcInfo *DdNode_FindTwoLiteralClauses(DdNode *self){ DdTlcInfo * result = Cudd_FindTwoLiteralClauses(mgr, self); return result; }
SWIGINTERN int DdNode_EpdCountMinterm(DdNode *self,int nvars,EpDouble *epd){ return Cudd_EpdCountMinterm(mgr,self,nvars,epd); }
SWIGINTERN int DdNode_ApproxConjDecomp(DdNode *self,DdNode ***dum_juncts){ return Cudd_bddApproxConjDecomp(mgr, self, dum_juncts); }
SWIGINTERN int DdNode_ApproxDisjDecomp(DdNode *self,DdNode ***dum_juncts){ return Cudd_bddApproxDisjDecomp(mgr, self, dum_juncts); }
SWIGINTERN int DdNode_IterConjDecomp(DdNode *self,DdNode ***dum_juncts){ return Cudd_bddIterConjDecomp(mgr, self, dum_juncts); }
SWIGINTERN int DdNode_IterDisjDecomp(DdNode *self,DdNode ***dum_juncts){ return Cudd_bddIterDisjDecomp(mgr, self, dum_juncts); }
SWIGINTERN int DdNode_GenConjDecomp(DdNode *self,DdNode ***dum_juncts){ return Cudd_bddGenConjDecomp(mgr, self, dum_juncts); }
SWIGINTERN int DdNode_GenDisjDecomp(DdNode *self,DdNode ***dum_juncts){ return Cudd_bddGenDisjDecomp(mgr, self, dum_juncts); }
SWIGINTERN int DdNode_VarConjDecomp(DdNode *self,DdNode ***dum_juncts){ return Cudd_bddVarConjDecomp(mgr, self, dum_juncts); }
SWIGINTERN int DdNode_VarDisjDecomp(DdNode *self,DdNode ***dum_juncts){ return Cudd_bddVarDisjDecomp(mgr, self, dum_juncts); }
SWIGINTERN DdNode *DdNode_ClosestCube(DdNode *self,DdNode *g,int *dum_distance){ DdNode* result = Cudd_bddClosestCube(mgr,self,g,dum_distance); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_LeqUnless(DdNode *self,DdNode *g,DdNode *D){ return Cudd_bddLeqUnless (mgr,self,g,D); }
SWIGINTERN DdNode *DdNode_MakePrime(DdNode *self,DdNode *f){ DdNode *result = Cudd_bddMakePrime (mgr,self,f); Cudd_Ref(result); return result; }
SWIGINTERN double DdNode_CountPathsToNonZero(DdNode *self){ return  Cudd_CountPathsToNonZero(self); }
SWIGINTERN int DdNode_SupportIndex(DdNode *self,int **dum_sup){ 
    *dum_sup = Cudd_SupportIndex(mgr,self);
    if (*dum_sup == NULL) return 0;
    else return 1;
  }
SWIGINTERN DdNode *DdNode_ExistAbstract(DdNode *self,DdNode *cube){ DdNode* result = Cudd_bddExistAbstract(mgr, self,  cube); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_XorExistAbstract(DdNode *self,DdNode *g,DdNode *cube){ DdNode* result = Cudd_bddXorExistAbstract(mgr, self,  g,  cube); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_UnivAbstract(DdNode *self,DdNode *cube){ DdNode* result = Cudd_bddUnivAbstract(mgr, self,  cube); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_BooleanDiff(DdNode *self,int x){ DdNode* result = Cudd_bddBooleanDiff(mgr, self,  x); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_AndAbstract(DdNode *self,DdNode *g,DdNode *cube){ DdNode* result = Cudd_bddAndAbstract(mgr, self,  g,  cube); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_VarIsDependent(DdNode *self,DdNode *var){ return Cudd_bddVarIsDependent(mgr, self,  var); }
SWIGINTERN double DdNode_Correlation(DdNode *self,DdNode *g){ return Cudd_bddCorrelation(mgr, self,  g); }
SWIGINTERN double DdNode_CorrelationWeights(DdNode *self,DdNode *g,DoubleArray *prob){ return Cudd_bddCorrelationWeights(mgr, self,  g,  prob->vec); }
SWIGINTERN DdNode *DdNode_Ite(DdNode *self,DdNode *g,DdNode *h){ DdNode* result = Cudd_bddIte(mgr, self,  g,  h); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_IteConstant(DdNode *self,DdNode *g,DdNode *h){ DdNode* result = Cudd_bddIteConstant(mgr, self,  g,  h); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Intersect(DdNode *self,DdNode *g){ DdNode* result = Cudd_bddIntersect(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_FIntersect(DdNode *self,DdNode *g){ int result = Cudd_bddLeq( mgr, self, Cudd_Not(g)) ? 0:1; return result; }
SWIGINTERN DdNode *DdNode_And(DdNode *self,DdNode *g){ DdNode* result = Cudd_bddAnd(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Or(DdNode *self,DdNode *g){ DdNode* result = Cudd_bddOr(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Nand(DdNode *self,DdNode *g){ DdNode* result = Cudd_bddNand(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Nor(DdNode *self,DdNode *g){ DdNode* result = Cudd_bddNor(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Xor(DdNode *self,DdNode *g){ DdNode* result = Cudd_bddXor(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Xnor(DdNode *self,DdNode *g){ DdNode* result = Cudd_bddXnor(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_ClippingAnd(DdNode *self,DdNode *g,int maxDepth,int direction){ DdNode* result = Cudd_bddClippingAnd(mgr, self,  g,  maxDepth,  direction); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_ClippingAndAbstract(DdNode *self,DdNode *g,DdNode *cube,int maxDepth,int direction){ DdNode* result = Cudd_bddClippingAndAbstract(mgr, self,  g,  cube,  maxDepth,  direction); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_LICompaction(DdNode *self,DdNode *c){ DdNode* result = Cudd_bddLICompaction(mgr, self,  c); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Squeeze(DdNode *self,DdNode *u){ DdNode* result = Cudd_bddSqueeze(mgr, self,  u); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Minimize(DdNode *self,DdNode *c){ DdNode* result = Cudd_bddMinimize(mgr, self,  c); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Constrain(DdNode *self,DdNode *c){ DdNode* result = Cudd_bddConstrain(mgr, self,  c); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Restrict(DdNode *self,DdNode *c){ DdNode* result = Cudd_bddRestrict(mgr, self,  c); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_PickOneCube(DdNode *self,char *string){ return Cudd_bddPickOneCube(mgr, self, string); }
SWIGINTERN DdNode *DdNode_PickOneMinterm(DdNode *self,DdArray *vars,int n){ DdNode* result = Cudd_bddPickOneMinterm(mgr, self,  vars->vec,  n); Cudd_Ref(result); return result; }
SWIGINTERN DdArray *DdNode_PickArbitraryMinterms(DdNode *self,DdArray *vars,int n,int k){ DdNode** tresult = Cudd_bddPickArbitraryMinterms(mgr, self,  vars->vec,  n,  k); DdArray* result = new DdArray(k); result->Assign(tresult, k); return result; }
SWIGINTERN DdNode *DdNode_Compose(DdNode *self,DdNode *g,int v){ DdNode* result = Cudd_bddCompose(mgr, self,  g,  v); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Permute(DdNode *self,IntArray *permut){ DdNode* result = Cudd_bddPermute(mgr, self,  permut->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_VarMap(DdNode *self){ DdNode* result = Cudd_bddVarMap(mgr, self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_LiteralSetIntersection(DdNode *self,DdNode *g){ DdNode* result = Cudd_bddLiteralSetIntersection(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_IsVarEssential(DdNode *self,int id,int phase){ return Cudd_bddIsVarEssential(mgr, self,  id,  phase); }
SWIGINTERN bool DdNode_Leq(DdNode *self,DdNode *g){ return Cudd_bddLeq(mgr, self,  g) ? TRUE : FALSE; }
SWIGINTERN DdArray *DdNode_CharToVect(DdNode *self){ DdNode** tresult = Cudd_bddCharToVect(mgr, self); int size = Cudd_ReadSize(mgr); DdArray* result = new DdArray(size); result->Assign(tresult,size); return result; }
SWIGINTERN DdArray *DdNode_ConstrainDecomp(DdNode *self){ DdNode** tresult = Cudd_bddConstrainDecomp(mgr, self); int size = Cudd_ReadSize(mgr); DdArray* result = new DdArray(size); result->Assign(tresult,size); return result; }
SWIGINTERN DdNode *DdNode_Isop(DdNode *self,DdNode *U){ DdNode* result = Cudd_bddIsop(mgr, self,  U); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_SwapVariables(DdNode *self,DdArray *x,DdArray *y,int n){ DdNode* result = Cudd_bddSwapVariables(mgr, self,  x->vec,  y->vec,  n); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_AdjPermuteX(DdNode *self,DdArray *x,int n){ DdNode* result = Cudd_bddAdjPermuteX(mgr, self,  x->vec,  n); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_VectorCompose(DdNode *self,DdArray *vector){ DdNode* result = Cudd_bddVectorCompose(mgr, self,  vector->vec); Cudd_Ref(result); return result; }
SWIGINTERN void DdNode_SetBackground(DdNode *self){ Cudd_SetBackground(mgr, self); }
SWIGINTERN DdNode *DdNode_UnderApprox(DdNode *self,int numVars,int threshold,int safe,double quality){ DdNode* result = Cudd_UnderApprox(mgr, self,  numVars,  threshold,  safe,  quality); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_OverApprox(DdNode *self,int numVars,int threshold,int safe,double quality){ DdNode* result = Cudd_OverApprox(mgr, self,  numVars,  threshold,  safe,  quality); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_RemapUnderApprox(DdNode *self,int numVars,int threshold,double quality){ DdNode* result = Cudd_RemapUnderApprox(mgr, self,  numVars,  threshold,  quality); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_RemapOverApprox(DdNode *self,int numVars,int threshold,double quality){ DdNode* result = Cudd_RemapOverApprox(mgr, self,  numVars,  threshold,  quality); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_BiasedUnderApprox(DdNode *self,DdNode *b,int numVars,int threshold,double quality1,double quality0){ DdNode* result = Cudd_BiasedUnderApprox(mgr, self,  b,  numVars,  threshold,  quality1,  quality0); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_BiasedOverApprox(DdNode *self,DdNode *b,int numVars,int threshold,double quality1,double quality0){ DdNode* result = Cudd_BiasedOverApprox(mgr, self,  b,  numVars,  threshold,  quality1,  quality0); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Cofactor(DdNode *self,DdNode *g){ DdNode* result = Cudd_Cofactor(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_FindEssential(DdNode *self){ DdNode* result = Cudd_FindEssential(mgr, self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_SubsetCompress(DdNode *self,int nvars,int threshold){ DdNode* result = Cudd_SubsetCompress(mgr, self,  nvars,  threshold); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_SupersetCompress(DdNode *self,int nvars,int threshold){ DdNode* result = Cudd_SupersetCompress(mgr, self,  nvars,  threshold); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_CProjection(DdNode *self,DdNode *Y){ DdNode* result = Cudd_CProjection(mgr, self,  Y); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_MinHammingDist(DdNode *self,IntArray *minterm,int upperBound){ return Cudd_MinHammingDist(mgr, self,  minterm->vec,  upperBound); }
SWIGINTERN DdNode *DdNode_Eval(DdNode *self,IntArray *inputs){ DdNode* result = Cudd_Eval(mgr, self,  inputs->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_ShortestPath(DdNode *self,IntArray *weight,IntArray *support,IntArray *length){ DdNode* result = Cudd_ShortestPath(mgr, self,  weight->vec,  support->vec,  length->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_LargestCube(DdNode *self,IntArray *length){ DdNode* result = Cudd_LargestCube(mgr, self,  length->vec); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_ShortestLength(DdNode *self,IntArray *weight){ return Cudd_ShortestLength(mgr, self,  weight->vec); }
SWIGINTERN DdNode *DdNode_Decreasing(DdNode *self,int i){ DdNode* result = Cudd_Decreasing(mgr, self,  i); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_Increasing(DdNode *self,int i){ DdNode* result = Cudd_Increasing(mgr, self,  i); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_EquivDC(DdNode *self,DdNode *G,DdNode *D){ return Cudd_EquivDC(mgr, self,  G,  D); }
SWIGINTERN int DdNode_EqualSupNorm(DdNode *self,DdNode *g,CUDD_VALUE_TYPE tolerance,int pr){ return Cudd_EqualSupNorm(mgr, self,  g, tolerance,  pr); }
SWIGINTERN DoubleArray *DdNode_CofMinterm(DdNode *self){ double* tresult = Cudd_CofMinterm(mgr, self); int size = Cudd_ReadSize(mgr)+1; DoubleArray* result = new DoubleArray(size); result->Assign( tresult, size); return result; }
SWIGINTERN DdNode *DdNode_VerifySol(DdNode *self,DdArray *G,IntArray *yIndex,int n){ DdNode* result = Cudd_VerifySol(mgr, self,  G->vec,  yIndex->vec,  n); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_SplitSet(DdNode *self,DdArray *xVars,int n,double m){ DdNode* result = Cudd_SplitSet(mgr, self,  xVars->vec,  n,  m); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_SubsetHeavyBranch(DdNode *self,int numVars,int threshold){ DdNode* result = Cudd_SubsetHeavyBranch(mgr, self,  numVars,  threshold); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_SupersetHeavyBranch(DdNode *self,int numVars,int threshold){ DdNode* result = Cudd_SupersetHeavyBranch(mgr, self,  numVars,  threshold); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_SubsetShortPaths(DdNode *self,int numVars,int threshold,int hardlimit){ DdNode* result = Cudd_SubsetShortPaths(mgr, self,  numVars,  threshold,  hardlimit); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_SupersetShortPaths(DdNode *self,int numVars,int threshold,int hardlimit){ DdNode* result = Cudd_SupersetShortPaths(mgr, self,  numVars,  threshold,  hardlimit); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_BddToCubeArray(DdNode *self,IntArray *y){ return Cudd_BddToCubeArray( mgr, self, y->vec); }
SWIGINTERN int DdNode_PrintMinterm(DdNode *self){ return Cudd_PrintMinterm(mgr, self); }
SWIGINTERN int DdNode_PrintDebug(DdNode *self,int n,int pr){ return Cudd_PrintDebug(mgr, self,  n,  pr); }
SWIGINTERN int DdNode_EstimateCofactor(DdNode *self,int i,int phase){ return Cudd_EstimateCofactor(mgr, self,  i,  phase); }
SWIGINTERN double DdNode_CountMinterm(DdNode *self,int nvars){ return Cudd_CountMinterm(mgr, self,  nvars); }
SWIGINTERN DdNode *DdNode_Support(DdNode *self){ DdNode* result = Cudd_Support(mgr, self); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_SupportSize(DdNode *self){ return Cudd_SupportSize(mgr, self); }
SWIGINTERN double DdNode_Density(DdNode *self,int nvars){ return Cudd_Density(mgr, self,  nvars); }
SWIGINTERN int DdNode_NodeReadIndex(DdNode *self){ return Cudd_NodeReadIndex(self); }
SWIGINTERN int DdNode_IsNonConstant(DdNode *self){ return Cudd_IsNonConstant(self); }
SWIGINTERN int DdNode_DagSize(DdNode *self){ return Cudd_DagSize(self); }
SWIGINTERN int DdNode_EstimateCofactorSimple(DdNode *self,int i){ return Cudd_EstimateCofactorSimple(self, i); }
SWIGINTERN double DdNode_CountPath(DdNode *self){ return Cudd_CountPath(self); }
SWIGINTERN int DdNode_CountLeaves(DdNode *self){ return Cudd_CountLeaves(self); }
SWIGINTERN int DdNode_BddStore(DdNode *self,char *ddname,char **varnames,IntArray *auxids,int mode,int varinfo,char *fname,FILE *fp){ return Dddmp_cuddBddStore( mgr, ddname, self, varnames, (int *) (auxids ? auxids->vec : NULL), mode, (Dddmp_VarInfoType) varinfo, fname, fp); }
SWIGINTERN int DdNode_IsConstant(DdNode *self){ return Cudd_IsConstant(self); }
SWIGINTERN DdNode *DdNode_Not(DdNode *self){ DdNode* result = Cudd_Not(self); Cudd_Ref(result); return result;}
SWIGINTERN DdNode *DdNode_NotCond(DdNode *self,int c){ DdNode* result = Cudd_NotCond(self, c); Cudd_Ref(result); return result;}
SWIGINTERN DdNode *DdNode_Regular(DdNode *self){ DdNode* result = Cudd_Regular(self); Cudd_Ref(result); return result;}
SWIGINTERN DdNode *DdNode_Complement(DdNode *self){ DdNode* result = Cudd_Complement(self); Cudd_Ref(result); return result;}
SWIGINTERN int DdNode_IsComplement(DdNode *self){ return Cudd_IsComplement(self); }
SWIGINTERN DdNode *DdNode_T(DdNode *self){ DdNode* result = Cudd_T(self); Cudd_Ref(result); return result;}
SWIGINTERN DdNode *DdNode_E(DdNode *self){ DdNode* result = Cudd_E(self); Cudd_Ref(result); return result;}
SWIGINTERN double DdNode_V(DdNode *self){ return Cudd_V(self); }
SWIGINTERN int DdNode_ReadIndex(DdNode *self,int index){ return Cudd_ReadPerm(mgr, index); }
SWIGINTERN DdNode *DdNode_addExistAbstract(DdNode *self,DdNode *cube){ DdNode* result = Cudd_addExistAbstract(mgr, self,  cube); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addUnivAbstract(DdNode *self,DdNode *cube){ DdNode* result = Cudd_addUnivAbstract(mgr, self,  cube); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addOrAbstract(DdNode *self,DdNode *cube){ DdNode* result = Cudd_addOrAbstract(mgr, self,  cube); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addFindMax(DdNode *self){ DdNode* result = Cudd_addFindMax(mgr, self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addFindMin(DdNode *self){ DdNode* result = Cudd_addFindMin(mgr, self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addIthBit(DdNode *self,int bit){ DdNode* result = Cudd_addIthBit(mgr, self,  bit); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addScalarInverse(DdNode *self,DdNode *epsilon){ DdNode* result = Cudd_addScalarInverse(mgr, self,  epsilon); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addIte(DdNode *self,DdNode *g,DdNode *h){ DdNode* result = Cudd_addIte(mgr, self,  g,  h); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addIteConstant(DdNode *self,DdNode *g,DdNode *h){ DdNode* result = Cudd_addIteConstant(mgr, self,  g,  h); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addEvalConst(DdNode *self,DdNode *g){ DdNode* result = Cudd_addEvalConst(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_addLeq(DdNode *self,DdNode *g){ return Cudd_addLeq(mgr, self,   g); }
SWIGINTERN DdNode *DdNode_addCmpl(DdNode *self){ DdNode* result = Cudd_addCmpl(mgr, self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addNegate(DdNode *self){ DdNode* result = Cudd_addNegate(mgr, self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addRoundOff(DdNode *self,int N){ DdNode* result = Cudd_addRoundOff(mgr, self,  N); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addCompose(DdNode *self,DdNode *g,int v){ DdNode* result = Cudd_addCompose(mgr, self,  g,  v); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addPermute(DdNode *self,IntArray *permut){ DdNode* result = Cudd_addPermute(mgr, self,  permut->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addConstrain(DdNode *self,DdNode *c){ DdNode* result = Cudd_addConstrain(mgr, self,  c); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addRestrict(DdNode *self,DdNode *c){ DdNode* result = Cudd_addRestrict(mgr, self,  c); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addMatrixMultiply(DdNode *self,DdNode *B,DdArray *z,int nz){ DdNode* result = Cudd_addMatrixMultiply(mgr, self,  B,  z->vec,  nz); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addTimesPlus(DdNode *self,DdNode *B,DdArray *z,int nz){ DdNode* result = Cudd_addTimesPlus(mgr, self,  B,  z->vec,  nz); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addTriangle(DdNode *self,DdNode *g,DdArray *z,int nz){ DdNode* result = Cudd_addTriangle(mgr, self,  g,  z->vec,  nz); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addVectorCompose(DdNode *self,DdArray *vector){ DdNode* result = Cudd_addVectorCompose(mgr, self,  vector->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addNonSimCompose(DdNode *self,DdArray *vector){ DdNode* result = Cudd_addNonSimCompose(mgr, self,  vector->vec); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_addSwapVariables(DdNode *self,DdArray *x,DdArray *y,int n){ DdNode* result = Cudd_addSwapVariables(mgr, self,  x->vec,  y->vec,  n); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddProduct(DdNode *self,DdNode *g){ DdNode* result = Cudd_zddProduct(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddUnateProduct(DdNode *self,DdNode *g){ DdNode* result = Cudd_zddUnateProduct(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddWeakDiv(DdNode *self,DdNode *g){ DdNode* result = Cudd_zddWeakDiv(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddDivide(DdNode *self,DdNode *g){ DdNode* result = Cudd_zddDivide(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddWeakDivF(DdNode *self,DdNode *g){ DdNode* result = Cudd_zddWeakDivF(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddDivideF(DdNode *self,DdNode *g){ DdNode* result = Cudd_zddDivideF(mgr, self,  g); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddComplement(DdNode *self){ DdNode* result = Cudd_zddComplement(mgr, self); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddIte(DdNode *self,DdNode *g,DdNode *h){ DdNode* result = Cudd_zddIte(mgr, self,  g,  h); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddUnion(DdNode *self,DdNode *Q){ DdNode* result = Cudd_zddUnion(mgr, self,  Q); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddIntersect(DdNode *self,DdNode *Q){ DdNode* result = Cudd_zddIntersect(mgr, self,  Q); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddDiff(DdNode *self,DdNode *Q){ DdNode* result = Cudd_zddDiff(mgr, self,  Q); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddDiffConst(DdNode *self,DdNode *Q){ DdNode* result = Cudd_zddDiffConst(mgr, self,  Q); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddSubset1(DdNode *self,int var){ DdNode* result = Cudd_zddSubset1(mgr, self,  var); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddSubset0(DdNode *self,int var){ DdNode* result = Cudd_zddSubset0(mgr, self,  var); Cudd_Ref(result); return result; }
SWIGINTERN DdNode *DdNode_zddChange(DdNode *self,int var){ DdNode* result = Cudd_zddChange(mgr, self,  var); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_zddCount(DdNode *self){ return Cudd_zddCount(mgr, self); }
SWIGINTERN double DdNode_zddCountDouble(DdNode *self){ return Cudd_zddCountDouble(mgr, self); }
SWIGINTERN int DdNode_zddPrintMinterm(DdNode *self){ return Cudd_zddPrintMinterm(mgr, self); }
SWIGINTERN int DdNode_zddPrintCover(DdNode *self){ return Cudd_zddPrintCover(mgr, self); }
SWIGINTERN int DdNode_zddPrintDebug(DdNode *self,int n,int pr){ return Cudd_zddPrintDebug(mgr, self,  n,  pr); }
SWIGINTERN double DdNode_zddCountMinterm(DdNode *self,int path){ return Cudd_zddCountMinterm(mgr, self,  path); }
SWIGINTERN DdNode *DdNode_zddIsop(DdNode *self,DdNode *U,DdArray *zdd_I){ DdNode* result = Cudd_zddIsop(mgr, self,  U,  zdd_I->vec); Cudd_Ref(result); return result; }
SWIGINTERN int DdNode_zddDagSize(DdNode *self,DdNode *p_node){ return Cudd_zddDagSize(self); }
SWIGINTERN int DdNode_ApaPrintMinterm(DdNode *self,FILE *fp,int nvars){ return Cudd_ApaPrintMinterm(fp, mgr, self, nvars); }
SWIGINTERN int DdNode_ApaPrintMintermExp(DdNode *self,FILE *fp,int nvars,int precision){ return Cudd_ApaPrintMintermExp(fp, mgr, self, nvars, precision); }
SWIGINTERN int DdNode_ApaPrintDensity(DdNode *self,FILE *fp,int nvars){ return Cudd_ApaPrintDensity(fp, mgr, self, nvars); }
SWIGINTERN DdApaNumber DdNode_ApaCountMinterm(DdNode *self,int nvars,IntArray *digits){  return Cudd_ApaCountMinterm(mgr, self, nvars, digits->vec); }
SWIGINTERN int DdNode___hash__(DdNode *self){
    return (long int)(self);
  }
SWIGINTERN int DdNode___int__(DdNode *self){
    return (long int)(self);
  }
SWIGINTERN DdNode *DdNode___and__(DdNode *self,DdNode *other){
    DdNode *result = Cudd_bddAnd(mgr, self, other);
    Cudd_Ref(result);
    return result;
  }
SWIGINTERN DdNode *DdNode___or__(DdNode *self,DdNode *other){
    DdNode *result = Cudd_bddOr(mgr, self, other);
    Cudd_Ref(result);
    return result;
  }
SWIGINTERN DdNode *DdNode___xor__(DdNode *self,DdNode *other){
    DdNode *result = Cudd_bddXor(mgr, self, other);
    Cudd_Ref(result);
    return result;
  }
SWIGINTERN DdNode *DdNode___invert__(DdNode *self){
    DdNode *result = Cudd_Not(self);
    Cudd_Ref(result);
    return result;
  }
SWIGINTERN DdNode *DdNode___rshift__(DdNode *self,DdNode *other){
    DdNode *result = Cudd_Not(Cudd_bddAnd(mgr, self, Cudd_Not(other))); 
    Cudd_Ref(result);
    return result;
  }
SWIGINTERN bool DdNode___cmp__(DdNode *self,DdNode *other){
    if (self == other) return FALSE;
    return TRUE;
  }
SWIGINTERN DdNode *DdNode___sub__(DdNode *self,DdNode *other){
    DdNode *result = Cudd_bddAnd(mgr,self,Cudd_Not(other));
    Cudd_Ref(result);
    return result;
  }
SWIGINTERN DdNode *DdNode___add__(DdNode *self,DdNode *other){
    DdNode *result = Cudd_bddOr(mgr, self, other);
    Cudd_Ref(result);
    return result;
  }
SWIGINTERN bool DdNode___lt__(DdNode *self,DdNode *other){
    return Cudd_bddLeq(mgr, self,  other) && self != other ? TRUE : FALSE;
  }
SWIGINTERN bool DdNode___le__(DdNode *self,DdNode *other){
    return Cudd_bddLeq(mgr, self,  other) ? TRUE : FALSE;
  }
SWIGINTERN bool DdNode___eq__(DdNode *self,DdNode *other){
    return self == other ? TRUE : FALSE;
  }
SWIGINTERN bool DdNode___ne__(DdNode *self,DdNode *other){
    return self != other ? TRUE : FALSE;
  }
SWIGINTERN bool DdNode___gt__(DdNode *self,DdNode *other){
    return Cudd_bddLeq(mgr, other,  self) && self != other ? TRUE : FALSE;
  }
SWIGINTERN bool DdNode___ge__(DdNode *self,DdNode *other){
    return Cudd_bddLeq(mgr, other,  self) ? TRUE : FALSE;
  }
SWIGINTERN bool DdNode___nonzero__(DdNode *self){
    return self == Cudd_ReadLogicZero(mgr) ? FALSE : TRUE; 
  }
SWIGINTERN int DdNode___len__(DdNode *self){
    return Cudd_DagSize(self);
  }
SWIGINTERN int DdNode_SizeOf(DdNode *self){
    return sizeof(*self);
  }
SWIGINTERN void DdNode_Show(DdNode *self,char *name,int op1,int op2){
    printf("BDD Name: %s\n",name);
    Cudd_PrintDebug(mgr,self,op1,op2);
  }
SWIGINTERN bool DdNode_Empty(DdNode *self){
    if (self == Cudd_ReadLogicZero(mgr))
       return TRUE;
    return FALSE;
  }
SWIGINTERN int DdNode_DumpDot(DdNode *self){

    FILE *dfp = NULL;
    DdNode *dfunc[1];
    int retval;    
    
    dfunc[0] = self;
    dfp = fopen("out.dot", "w");
    
    retval = Cudd_DumpDot(mgr,1,dfunc,NULL,NULL,dfp);
 
    fclose(dfp);
    return retval;
  }
SWIGINTERN int DdNode_DumpBlif(DdNode *self){

    FILE *dfp = NULL;
    DdNode *dfunc[1];
    int retval;    
    
    dfunc[0] = self;
    dfp = fopen("out.blif", "w");
    
    retval = Cudd_DumpBlif(mgr,1,dfunc,NULL,NULL,NULL,dfp,0);
 
    fclose(dfp);
    return retval;
  }
SWIGINTERN DdArray *DdNode_Vector(DdNode *self){
  
    DdArray* result;
    DdNode *front, *f1, *f0;
    int index;
    int size = Cudd_DagSize(self);
    size = size-1;
  
    if (size > Cudd_ReadSize(mgr)) {
      cerr << "Minterm contains more nodes than manager!\n";
      return NULL;
    }

    result = new DdArray(size);
    if (!size) return result;

    front = self;
 
    index = Cudd_NodeReadIndex(front);
    
    result->__setitem__(0,Cudd_bddIthVar(mgr,index));

    for (int i=1; i< size; i++) {      
      f1 = Cudd_T(front);
      f0 = Cudd_E(front);
     
      if ( (f1 != Cudd_ReadLogicZero(mgr)) && (f1 != Cudd_ReadOne(mgr)) ) {
        if (!( (f0 == Cudd_ReadLogicZero(mgr)) || (f0 == Cudd_ReadOne(mgr)) )) {
          cerr << "Not a minterm\n";
          delete result;
          return NULL;
        }
        front = f1;
      } else if ( (f0 != Cudd_ReadLogicZero(mgr)) && (f0 != Cudd_ReadOne(mgr)) ) {
        if (!( (f1 == Cudd_ReadLogicZero(mgr)) || (f1 == Cudd_ReadOne(mgr)) )) {
          cerr << "Not a minterm\n";
          delete result;
          return NULL;
        }
        front = f0;
      } else {
        cerr << "Not enough nodes in minterm\n";
        delete result;
        return NULL;
      }
      index = Cudd_NodeReadIndex(front);
      result->__setitem__(i,Cudd_bddIthVar(mgr,index));
    }

    return result;
 
  }

struct NodePair {
  DdNode * lower;
  DdNode * upper;
};

SWIGINTERN NodePair *new_NodePair(DdNode *lwr,DdNode *upr){
    NodePair *res;
    res = (NodePair *) malloc(sizeof(NodePair));
    res->lower = lwr;
    res->upper = upr;
    return res;
  }
SWIGINTERN void delete_NodePair(NodePair *self){
    free(self);
  }
SWIGINTERN DdNode *NodePair_LOWER(NodePair *self){ return self->lower; }
SWIGINTERN DdNode *NodePair_UPPER(NodePair *self){ return self->upper; }
SWIGINTERN int NodePair_FirstPrime(NodePair *self,DdGen *gen,int **dum_cube){
    if (Cudd_IsGenEmpty(gen)) { /* Happens if you call the generator on Logic Zero */ return 0; }
    return 1;
  }
SWIGINTERN int NodePair_NextPrime(NodePair *self,DdGen *gen,int **dum_cube){
    int tmp;
    if (!gen) { /* Something is seriously wrong ! */ assert(0); }
    if (Cudd_IsGenEmpty(gen)) { // We should never hit this -- raise StopIteration in python earlier.
      fprintf(Cudd_ReadStdout(mgr),"You shouldn\'t be here! Fix your Python iterator.");
      return 0;
    }
    else { // Have a cube to return
      tmp = Cudd_NextPrime(gen, dum_cube);
      if (tmp <= 0) { // The freakin' generator is already empty ...
	assert(Cudd_IsGenEmpty(gen));
	return 0;
      }
      return 1;
    }
  }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int Swig_var_mgr_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_DdManager,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""mgr""' of type '""DdManager *""'");
    }
    mgr = reinterpret_cast< DdManager * >(argp);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_mgr_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(mgr), SWIGTYPE_p_DdManager,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_RangeError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RangeError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RangeError")) SWIG_fail;
  result = (RangeError *)new RangeError();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RangeError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RangeError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RangeError *arg1 = (RangeError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RangeError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RangeError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RangeError" "', argument " "1"" of type '" "RangeError *""'"); 
  }
  arg1 = reinterpret_cast< RangeError * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RangeError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RangeError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntArray_vec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntArray_vec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray_vec_set" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntArray_vec_set" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  if (arg1) (arg1)->vec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray_vec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntArray_vec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray_vec_get" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  result = (int *) ((arg1)->vec);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  IntArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntArray" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (IntArray *)new IntArray(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntArray" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray_AssignVect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntArray_AssignVect",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray_AssignVect" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntArray_AssignVect" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntArray_AssignVect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->AssignVect(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray_AssignComplVect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntArray_AssignComplVect",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray_AssignComplVect" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntArray_AssignComplVect" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntArray_AssignComplVect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntArray_AssignComplVect" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->AssignComplVect(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray_ArrayAddress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntArray_ArrayAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray_ArrayAddress" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  result = (int **)(arg1)->ArrayAddress();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray___getitem__" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntArray___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->__getitem__(arg2);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray___setitem__" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntArray___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntArray___setitem__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->__setitem__(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntArray___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray___len__" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  {
    try {
      result = (int)(arg1)->__len__();
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray_Assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntArray_Assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray_Assign" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntArray_Assign" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntArray_Assign" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->Assign(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray_Swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntArray_Swap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray_Swap" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntArray_Swap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntArray_Swap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->Swap(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IntArray, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StringArray_vec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StringArray *arg1 = (StringArray *) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringArray_vec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringArray_vec_set" "', argument " "1"" of type '" "StringArray *""'"); 
  }
  arg1 = reinterpret_cast< StringArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringArray_vec_set" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  if (arg1) (arg1)->vec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringArray_vec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StringArray *arg1 = (StringArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringArray_vec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringArray_vec_get" "', argument " "1"" of type '" "StringArray *""'"); 
  }
  arg1 = reinterpret_cast< StringArray * >(argp1);
  result = (char **) ((arg1)->vec);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  StringArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StringArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringArray" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (StringArray *)new StringArray(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StringArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StringArray *arg1 = (StringArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StringArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StringArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringArray" "', argument " "1"" of type '" "StringArray *""'"); 
  }
  arg1 = reinterpret_cast< StringArray * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringArray_ArrayAddress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StringArray *arg1 = (StringArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char ***result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringArray_ArrayAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringArray_ArrayAddress" "', argument " "1"" of type '" "StringArray *""'"); 
  }
  arg1 = reinterpret_cast< StringArray * >(argp1);
  result = (char ***)(arg1)->ArrayAddress();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringArray___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StringArray *arg1 = (StringArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringArray___getitem__" "', argument " "1"" of type '" "StringArray *""'"); 
  }
  arg1 = reinterpret_cast< StringArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringArray___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (char *)(arg1)->__getitem__(arg2);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringArray___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StringArray *arg1 = (StringArray *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringArray___setitem__" "', argument " "1"" of type '" "StringArray *""'"); 
  }
  arg1 = reinterpret_cast< StringArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringArray___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringArray___setitem__" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      (arg1)->__setitem__(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringArray___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StringArray *arg1 = (StringArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringArray___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringArray___len__" "', argument " "1"" of type '" "StringArray *""'"); 
  }
  arg1 = reinterpret_cast< StringArray * >(argp1);
  {
    try {
      result = (int)(arg1)->__len__();
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringArray_Assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StringArray *arg1 = (StringArray *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringArray_Assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringArray_Assign" "', argument " "1"" of type '" "StringArray *""'"); 
  }
  arg1 = reinterpret_cast< StringArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringArray_Assign" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringArray_Assign" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->Assign(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringArray_Swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StringArray *arg1 = (StringArray *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringArray_Swap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringArray_Swap" "', argument " "1"" of type '" "StringArray *""'"); 
  }
  arg1 = reinterpret_cast< StringArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringArray_Swap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringArray_Swap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->Swap(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_StringArray, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DoubleArray_vec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleArray_vec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleArray_vec_set" "', argument " "1"" of type '" "DoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< DoubleArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleArray_vec_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->vec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleArray_vec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleArray_vec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleArray_vec_get" "', argument " "1"" of type '" "DoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< DoubleArray * >(argp1);
  result = (double *) ((arg1)->vec);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  DoubleArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleArray" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (DoubleArray *)new DoubleArray(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DoubleArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DoubleArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DoubleArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleArray" "', argument " "1"" of type '" "DoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< DoubleArray * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleArray___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleArray___getitem__" "', argument " "1"" of type '" "DoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< DoubleArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleArray___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->__getitem__(arg2);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleArray___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleArray___setitem__" "', argument " "1"" of type '" "DoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< DoubleArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleArray___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleArray___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->__setitem__(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleArray_Assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleArray_Assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleArray_Assign" "', argument " "1"" of type '" "DoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< DoubleArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleArray_Assign" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleArray_Assign" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->Assign(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleArray_Swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleArray_Swap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleArray_Swap" "', argument " "1"" of type '" "DoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< DoubleArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleArray_Swap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleArray_Swap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->Swap(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DoubleArray, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DdArray_sz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_sz_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_sz_set" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_sz_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->sz = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_sz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdArray_sz_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_sz_get" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  result = (int) ((arg1)->sz);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_vec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  DdNode **arg2 = (DdNode **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_vec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_vec_set" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_vec_set" "', argument " "2"" of type '" "DdNode **""'"); 
  }
  arg2 = reinterpret_cast< DdNode ** >(argp2);
  if (arg1) (arg1)->vec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_vec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdArray_vec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_vec_get" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  result = (DdNode **) ((arg1)->vec);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DdArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  DdArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DdArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DdArray" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (DdArray *)new DdArray(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DdArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DdArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DdArray" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray___getitem__" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (DdNode *)(arg1)->__getitem__(arg2);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray___setitem__" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdArray___setitem__" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  {
    try {
      (arg1)->__setitem__(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdArray___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray___len__" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  {
    try {
      result = (int)(arg1)->__len__();
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdArray_Swap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Swap" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_Swap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdArray_Swap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->Swap(arg2,arg3);
    }
    catch (RangeError x) {
      PyErr_SetString(PyExc_IndexError,"index out-of-bounds");
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdArray_Pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Pop" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  result = (DdNode *)(arg1)->Pop();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_And(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdArray_And",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_And" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  result = (DdNode *)(arg1)->And();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Or(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdArray_Or",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Or" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  result = (DdNode *)(arg1)->Or();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_AtLeastN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_AtLeastN",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_AtLeastN" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_AtLeastN" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)(arg1)->AtLeastN(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_ExactlyN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_ExactlyN",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_ExactlyN" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_ExactlyN" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)(arg1)->ExactlyN(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_UpToN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_UpToN",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_UpToN" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_UpToN" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)(arg1)->UpToN(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Constraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdArray_Constraint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Constraint" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_Constraint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdArray_Constraint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)(arg1)->Constraint(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Compose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_Compose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Compose" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_Compose" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)(arg1)->Compose(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  DdNode **arg2 = (DdNode **) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdArray_Assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Assign" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_Assign" "', argument " "2"" of type '" "DdNode **""'"); 
  }
  arg2 = reinterpret_cast< DdNode ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdArray_Assign" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->Assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Push(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_Push",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Push" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_Push" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  (arg1)->Push(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_SwapNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdArray_SwapNodes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_SwapNodes" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_SwapNodes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdArray_SwapNodes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->SwapNodes(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Fill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdArray_Fill",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Fill" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_Fill" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdArray_Fill" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->Fill(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_FillWithIntArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_FillWithIntArray",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_FillWithIntArray" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_FillWithIntArray" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  (arg1)->FillWithIntArray(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_OrderVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdArray_OrderVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_OrderVector" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_OrderVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdArray_OrderVector" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->OrderVector(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_SupportVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_SupportVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_SupportVector" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_SupportVector" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  (arg1)->SupportVector(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_SetVarMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_SetVarMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_SetVarMap" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_SetVarMap" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  result = (int)(arg1)->SetVarMap(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_VectorSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdArray_VectorSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_VectorSupport" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  result = (DdNode *)(arg1)->VectorSupport();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_VectorSupportIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int **arg2 = (int **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  {
    arg2 = cube_iter;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DdArray_VectorSupportIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_VectorSupportIndex" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  result = (int)(arg1)->VectorSupportIndex(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int sz = Cudd_ReadSize(mgr);
    int chk = (int) PyInt_AsLong(resultobj);
    resultobj = array_to_tuple(resultobj, arg2, sz);
    if (chk) FREE(*arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_PickOneMinterm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_PickOneMinterm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_PickOneMinterm" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_PickOneMinterm" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)(arg1)->PickOneMinterm(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_HoldTR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_HoldTR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_HoldTR" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_HoldTR" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  result = (DdNode *)(arg1)->HoldTR(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_Find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Find" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_Find" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (int)(arg1)->Find(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_Save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Save" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_Save" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->Save(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_SaveText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_SaveText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_SaveText" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_SaveText" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->SaveText(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_Load(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_Load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_Load" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_Load" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->Load(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_LoadText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdArray_LoadText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_LoadText" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_LoadText" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->LoadText(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_ArrayLoad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  StringArray *arg3 = (StringArray *) 0 ;
  int arg4 ;
  StringArray *arg5 = (StringArray *) 0 ;
  IntArray *arg6 = (IntArray *) 0 ;
  IntArray *arg7 = (IntArray *) 0 ;
  int arg8 ;
  char *arg9 = (char *) 0 ;
  FILE *arg10 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:DdArray_ArrayLoad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_ArrayLoad" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_ArrayLoad" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdArray_ArrayLoad" "', argument " "3"" of type '" "StringArray *""'"); 
  }
  arg3 = reinterpret_cast< StringArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdArray_ArrayLoad" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdArray_ArrayLoad" "', argument " "5"" of type '" "StringArray *""'"); 
  }
  arg5 = reinterpret_cast< StringArray * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DdArray_ArrayLoad" "', argument " "6"" of type '" "IntArray *""'"); 
  }
  arg6 = reinterpret_cast< IntArray * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "DdArray_ArrayLoad" "', argument " "7"" of type '" "IntArray *""'"); 
  }
  arg7 = reinterpret_cast< IntArray * >(argp7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "DdArray_ArrayLoad" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_AsCharPtrAndSize(obj8, &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "DdArray_ArrayLoad" "', argument " "9"" of type '" "char *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  {
    if ( PyFile_Check(obj9) ){
      arg10 = PyFile_AsFile(obj9);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)(arg1)->ArrayLoad(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_ArrayLoad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  int arg2 ;
  StringArray *arg3 = (StringArray *) 0 ;
  int arg4 ;
  StringArray *arg5 = (StringArray *) 0 ;
  IntArray *arg6 = (IntArray *) 0 ;
  IntArray *arg7 = (IntArray *) 0 ;
  int arg8 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:DdArray_ArrayLoad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_ArrayLoad" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdArray_ArrayLoad" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdArray_ArrayLoad" "', argument " "3"" of type '" "StringArray *""'"); 
  }
  arg3 = reinterpret_cast< StringArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdArray_ArrayLoad" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdArray_ArrayLoad" "', argument " "5"" of type '" "StringArray *""'"); 
  }
  arg5 = reinterpret_cast< StringArray * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DdArray_ArrayLoad" "', argument " "6"" of type '" "IntArray *""'"); 
  }
  arg6 = reinterpret_cast< IntArray * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "DdArray_ArrayLoad" "', argument " "7"" of type '" "IntArray *""'"); 
  }
  arg7 = reinterpret_cast< IntArray * >(argp7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "DdArray_ArrayLoad" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_AsCharPtrAndSize(obj8, &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "DdArray_ArrayLoad" "', argument " "9"" of type '" "char *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  result = (int)(arg1)->ArrayLoad(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_ArrayLoad(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[11];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 10) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DdArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_StringArray, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_StringArray, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_IntArray, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_IntArray, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_DdArray_ArrayLoad__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DdArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_StringArray, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_StringArray, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_IntArray, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_IntArray, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    int res = SWIG_AsCharPtrAndSize(argv[8], 0, NULL, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_FILE, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_DdArray_ArrayLoad__SWIG_0(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DdArray_ArrayLoad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DdArray::ArrayLoad(int,StringArray *,int,StringArray *,IntArray *,IntArray *,int,char *,FILE *)\n"
    "    DdArray::ArrayLoad(int,StringArray *,int,StringArray *,IntArray *,IntArray *,int,char *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DdArray_ArrayStore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  char *arg2 = (char *) 0 ;
  StringArray *arg3 = (StringArray *) 0 ;
  StringArray *arg4 = (StringArray *) 0 ;
  IntArray *arg5 = (IntArray *) 0 ;
  int arg6 ;
  int arg7 ;
  char *arg8 = (char *) 0 ;
  FILE *arg9 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:DdArray_ArrayStore",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_ArrayStore" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_ArrayStore" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdArray_ArrayStore" "', argument " "3"" of type '" "StringArray *""'"); 
  }
  arg3 = reinterpret_cast< StringArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdArray_ArrayStore" "', argument " "4"" of type '" "StringArray *""'"); 
  }
  arg4 = reinterpret_cast< StringArray * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdArray_ArrayStore" "', argument " "5"" of type '" "IntArray *""'"); 
  }
  arg5 = reinterpret_cast< IntArray * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DdArray_ArrayStore" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "DdArray_ArrayStore" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_AsCharPtrAndSize(obj7, &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "DdArray_ArrayStore" "', argument " "8"" of type '" "char *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    if ( PyFile_Check(obj8) ){
      arg9 = PyFile_AsFile(obj8);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)(arg1)->ArrayStore(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_ArrayStore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdArray *arg1 = (DdArray *) 0 ;
  char *arg2 = (char *) 0 ;
  StringArray *arg3 = (StringArray *) 0 ;
  StringArray *arg4 = (StringArray *) 0 ;
  IntArray *arg5 = (IntArray *) 0 ;
  int arg6 ;
  int arg7 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:DdArray_ArrayStore",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdArray_ArrayStore" "', argument " "1"" of type '" "DdArray *""'"); 
  }
  arg1 = reinterpret_cast< DdArray * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdArray_ArrayStore" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdArray_ArrayStore" "', argument " "3"" of type '" "StringArray *""'"); 
  }
  arg3 = reinterpret_cast< StringArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_StringArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdArray_ArrayStore" "', argument " "4"" of type '" "StringArray *""'"); 
  }
  arg4 = reinterpret_cast< StringArray * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdArray_ArrayStore" "', argument " "5"" of type '" "IntArray *""'"); 
  }
  arg5 = reinterpret_cast< IntArray * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DdArray_ArrayStore" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "DdArray_ArrayStore" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_AsCharPtrAndSize(obj7, &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "DdArray_ArrayStore" "', argument " "8"" of type '" "char *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  result = (int)(arg1)->ArrayStore(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdArray_ArrayStore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DdArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_StringArray, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_StringArray, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_IntArray, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_DdArray_ArrayStore__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DdArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_StringArray, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_StringArray, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_IntArray, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_FILE, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_DdArray_ArrayStore__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DdArray_ArrayStore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DdArray::ArrayStore(char *,StringArray *,StringArray *,IntArray *,int,int,char *,FILE *)\n"
    "    DdArray::ArrayStore(char *,StringArray *,StringArray *,IntArray *,int,int,char *)\n");
  return 0;
}


SWIGINTERN PyObject *DdArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DdArray, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MtrNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MtrNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MtrNode")) SWIG_fail;
  result = (MtrNode *)new MtrNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MtrNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MtrNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MtrNode *arg1 = (MtrNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MtrNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MtrNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MtrNode" "', argument " "1"" of type '" "MtrNode *""'"); 
  }
  arg1 = reinterpret_cast< MtrNode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MtrNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MtrNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DdTlcInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdTlcInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DdTlcInfo")) SWIG_fail;
  result = (DdTlcInfo *)new_DdTlcInfo();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdTlcInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DdTlcInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdTlcInfo *arg1 = (DdTlcInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DdTlcInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdTlcInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DdTlcInfo" "', argument " "1"" of type '" "DdTlcInfo *""'"); 
  }
  arg1 = reinterpret_cast< DdTlcInfo * >(argp1);
  delete_DdTlcInfo(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdTlcInfo_ReadIthClause(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdTlcInfo *arg1 = (DdTlcInfo *) 0 ;
  int arg2 ;
  DdHalfWord *arg3 = (DdHalfWord *) 0 ;
  DdHalfWord *arg4 = (DdHalfWord *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  DdHalfWord dv13 ;
  DdHalfWord dv24 ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  {
    arg3 = &dv13;
  }
  {
    arg4 = &dv24;
  }
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:DdTlcInfo_ReadIthClause",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdTlcInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdTlcInfo_ReadIthClause" "', argument " "1"" of type '" "DdTlcInfo *""'"); 
  }
  arg1 = reinterpret_cast< DdTlcInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdTlcInfo_ReadIthClause" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdTlcInfo_ReadIthClause(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    PyObject *o, *o2, *o3;
    o2 = resultobj;
    resultobj = PyTuple_New(3);
    PyTuple_SetItem(resultobj,0,o2);
    
    o3 = PyTuple_New(2);
    if (*arg3 == CUDD_MAXINDEX) o = PyInt_FromLong(-1);
    else o = PyInt_FromLong(*arg3);
    PyTuple_SetItem(o3,0,o);
    o = PyInt_FromLong(*arg5);
    PyTuple_SetItem(o3,1,o);
    PyTuple_SetItem(resultobj,1,o3);
    
    o3 = PyTuple_New(2);
    if (*arg4 == CUDD_MAXINDEX) o = PyInt_FromLong(-1);
    else o = PyInt_FromLong(*arg4);
    PyTuple_SetItem(o3,0,o);
    o = PyInt_FromLong(*arg6);
    PyTuple_SetItem(o3,1,o);
    PyTuple_SetItem(resultobj,2,o3);
    
    Py_DECREF(o2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DdTlcInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DdTlcInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EpDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EpDouble")) SWIG_fail;
  result = (EpDouble *)new_EpDouble__SWIG_0();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EpDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EpDouble",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EpDouble" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (EpDouble *)new_EpDouble__SWIG_1(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EpDouble__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EpDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EpDouble" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  result = (EpDouble *)new_EpDouble__SWIG_2(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EpDouble(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_EpDouble__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EpDouble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EpDouble__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_EpDouble__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EpDouble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EpDouble::EpDouble()\n"
    "    EpDouble::EpDouble(double)\n"
    "    EpDouble::EpDouble(EpDouble *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EpDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EpDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EpDouble" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  delete_EpDouble(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdConvert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdConvert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdConvert" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble_EpdConvert" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  EpDouble_EpdConvert(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdNormalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EpDouble_EpdNormalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdNormalize" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  EpDouble_EpdNormalize(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdNormalizeDecimal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EpDouble_EpdNormalizeDecimal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdNormalizeDecimal" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  EpDouble_EpdNormalizeDecimal(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdMakeInf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdMakeInf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdMakeInf" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble_EpdMakeInf" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  EpDouble_EpdMakeInf(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdMakeZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdMakeZero",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdMakeZero" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble_EpdMakeZero" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  EpDouble_EpdMakeZero(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdMakeNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EpDouble_EpdMakeNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdMakeNan" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  EpDouble_EpdMakeNan(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdCopy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdCopy" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdCopy" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  EpDouble_EpdCopy(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdGetValueAndDecimalExponent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  int res2 = SWIG_TMPOBJ ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  
  arg2 = &temp2;
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"O:EpDouble_EpdGetValueAndDecimalExponent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdGetValueAndDecimalExponent" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  EpDouble_EpdGetValueAndDecimalExponent(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdMultiply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdMultiply",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdMultiply" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble_EpdMultiply" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  EpDouble_EpdMultiply(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdMultiply2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdMultiply2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdMultiply2" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdMultiply2" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  EpDouble_EpdMultiply2(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdMultiply2Decimal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdMultiply2Decimal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdMultiply2Decimal" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdMultiply2Decimal" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  EpDouble_EpdMultiply2Decimal(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdMultiply3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  EpDouble *arg3 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EpDouble_EpdMultiply3",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdMultiply3" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdMultiply3" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EpDouble_EpdMultiply3" "', argument " "3"" of type '" "EpDouble *""'"); 
  }
  arg3 = reinterpret_cast< EpDouble * >(argp3);
  EpDouble_EpdMultiply3(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdMultiply3Decimal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  EpDouble *arg3 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EpDouble_EpdMultiply3Decimal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdMultiply3Decimal" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdMultiply3Decimal" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EpDouble_EpdMultiply3Decimal" "', argument " "3"" of type '" "EpDouble *""'"); 
  }
  arg3 = reinterpret_cast< EpDouble * >(argp3);
  EpDouble_EpdMultiply3Decimal(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdDivide(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdDivide",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdDivide" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble_EpdDivide" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  EpDouble_EpdDivide(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdDivide2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdDivide2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdDivide2" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdDivide2" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  EpDouble_EpdDivide2(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdDivide3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  EpDouble *arg3 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EpDouble_EpdDivide3",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdDivide3" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdDivide3" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EpDouble_EpdDivide3" "', argument " "3"" of type '" "EpDouble *""'"); 
  }
  arg3 = reinterpret_cast< EpDouble * >(argp3);
  EpDouble_EpdDivide3(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdAdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdAdd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdAdd" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble_EpdAdd" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  EpDouble_EpdAdd(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdAdd2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdAdd2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdAdd2" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdAdd2" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  EpDouble_EpdAdd2(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdAdd3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  EpDouble *arg3 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EpDouble_EpdAdd3",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdAdd3" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdAdd3" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EpDouble_EpdAdd3" "', argument " "3"" of type '" "EpDouble *""'"); 
  }
  arg3 = reinterpret_cast< EpDouble * >(argp3);
  EpDouble_EpdAdd3(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdSubtract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdSubtract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdSubtract" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble_EpdSubtract" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  EpDouble_EpdSubtract(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdSubtract2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdSubtract2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdSubtract2" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdSubtract2" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  EpDouble_EpdSubtract2(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdSubtract3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  EpDouble *arg3 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EpDouble_EpdSubtract3",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdSubtract3" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdSubtract3" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EpDouble_EpdSubtract3" "', argument " "3"" of type '" "EpDouble *""'"); 
  }
  arg3 = reinterpret_cast< EpDouble * >(argp3);
  EpDouble_EpdSubtract3(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdPow2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdPow2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdPow2" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble_EpdPow2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  EpDouble_EpdPow2(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdPow2Decimal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdPow2Decimal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdPow2Decimal" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble_EpdPow2Decimal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  EpDouble_EpdPow2Decimal(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___add__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble___add__" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  result = (EpDouble *)EpDouble___add____SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___add__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble___add__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (EpDouble *)EpDouble___add____SWIG_1(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___add__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EpDouble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EpDouble, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EpDouble___add____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EpDouble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EpDouble___add____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_EpDouble___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___sub__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble___sub__" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  result = (EpDouble *)EpDouble___sub____SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___sub__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble___sub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (EpDouble *)EpDouble___sub____SWIG_1(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EpDouble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EpDouble, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EpDouble___sub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EpDouble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EpDouble___sub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_EpDouble___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___mul__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble___mul__" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  result = (EpDouble *)EpDouble___mul____SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___mul__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (EpDouble *)EpDouble___mul____SWIG_1(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EpDouble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EpDouble, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EpDouble___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EpDouble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EpDouble___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_EpDouble___div____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___div__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble___div__" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  result = (EpDouble *)EpDouble___div____SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___div____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  EpDouble *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___div__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EpDouble___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (EpDouble *)EpDouble___div____SWIG_1(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EpDouble, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___div__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EpDouble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_EpDouble, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EpDouble___div____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_EpDouble, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EpDouble___div____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdCmp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble_EpdCmp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdCmp" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble_EpdCmp" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  result = (bool)EpDouble_EpdCmp(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdIsInf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EpDouble_EpdIsInf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdIsInf" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  result = (bool)EpDouble_EpdIsInf(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdIsZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EpDouble_EpdIsZero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdIsZero" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  result = (bool)EpDouble_EpdIsZero(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdIsNan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EpDouble_EpdIsNan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdIsNan" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  result = (bool)EpDouble_EpdIsNan(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble_EpdIsNanOrInf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EpDouble_EpdIsNanOrInf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble_EpdIsNanOrInf" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  result = (bool)EpDouble_EpdIsNanOrInf(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EpDouble___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___nonzero__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  result = (bool)EpDouble___nonzero__(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___eq__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble___eq__" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  result = (bool)EpDouble___eq__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpDouble___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EpDouble *arg1 = (EpDouble *) 0 ;
  EpDouble *arg2 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EpDouble___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EpDouble___ne__" "', argument " "1"" of type '" "EpDouble *""'"); 
  }
  arg1 = reinterpret_cast< EpDouble * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EpDouble___ne__" "', argument " "2"" of type '" "EpDouble *""'"); 
  }
  arg2 = reinterpret_cast< EpDouble * >(argp2);
  result = (bool)EpDouble___ne__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EpDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EpDouble, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_EpdGetExponent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EpdGetExponent",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EpdGetExponent" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (int)EpdGetExponent(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EpdGetExponentDecimal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EpdGetExponentDecimal",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EpdGetExponentDecimal" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (int)EpdGetExponentDecimal(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsInfDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsInfDouble",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsInfDouble" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (bool)IsInfDouble(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsNanDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsNanDouble",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsNanDouble" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (bool)IsNanDouble(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsNanOrInfDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IsNanOrInfDouble",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsNanOrInfDouble" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (bool)IsNanOrInfDouble(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DdManager__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned long arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_DdManager",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DdManager" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DdManager" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DdManager" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DdManager" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DdManager" "', argument " "5"" of type '" "unsigned long""'");
  } 
  arg5 = static_cast< unsigned long >(val5);
  result = (DdManager *)new_DdManager__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DdManager__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DdManager",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DdManager" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DdManager" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DdManager" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DdManager" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (DdManager *)new_DdManager__SWIG_0(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DdManager__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DdManager",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DdManager" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DdManager" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DdManager" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (DdManager *)new_DdManager__SWIG_0(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DdManager__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DdManager",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DdManager" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DdManager" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (DdManager *)new_DdManager__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DdManager__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  DdManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DdManager",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DdManager" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (DdManager *)new_DdManager__SWIG_0(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DdManager__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DdManager")) SWIG_fail;
  result = (DdManager *)new_DdManager__SWIG_0();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DdManager(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DdManager__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DdManager__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DdManager__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DdManager__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DdManager__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_DdManager__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DdManager'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DdManager::DdManager(unsigned int,unsigned int,unsigned int,unsigned int,unsigned long)\n"
    "    DdManager::DdManager(unsigned int,unsigned int,unsigned int,unsigned int)\n"
    "    DdManager::DdManager(unsigned int,unsigned int,unsigned int)\n"
    "    DdManager::DdManager(unsigned int,unsigned int)\n"
    "    DdManager::DdManager(unsigned int)\n"
    "    DdManager::DdManager()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DdManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DdManager",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DdManager" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  delete_DdManager(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_KillNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_KillNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_KillNode" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_KillNode" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  DdManager_KillNode(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_IsPsVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_IsPsVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_IsPsVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_IsPsVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_IsPsVar(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_IsNsVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_IsNsVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_IsNsVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_IsNsVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_IsNsVar(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetPsVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetPsVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetPsVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetPsVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_SetPsVar(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetNsVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetNsVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetNsVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetNsVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_SetNsVar(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetPairIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_SetPairIndex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetPairIndex" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetPairIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_SetPairIndex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdManager_SetPairIndex(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadPairIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ReadPairIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadPairIndex" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ReadPairIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_ReadPairIndex(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetVarToBeGrouped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetVarToBeGrouped",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetVarToBeGrouped" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetVarToBeGrouped" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_SetVarToBeGrouped(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetVarHardGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetVarHardGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetVarHardGroup" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetVarHardGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_SetVarHardGroup(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ResetVarToBeGrouped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ResetVarToBeGrouped",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ResetVarToBeGrouped" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ResetVarToBeGrouped" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_ResetVarToBeGrouped(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_IsVarToBeGrouped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_IsVarToBeGrouped",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_IsVarToBeGrouped" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_IsVarToBeGrouped" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_IsVarToBeGrouped(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_IsVarHardGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_IsVarHardGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_IsVarHardGroup" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_IsVarHardGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_IsVarHardGroup(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetVarToBeUngrouped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetVarToBeUngrouped",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetVarToBeUngrouped" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetVarToBeUngrouped" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_SetVarToBeUngrouped(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_IsVarToBeUngrouped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_IsVarToBeUngrouped",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_IsVarToBeUngrouped" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_IsVarToBeUngrouped" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_IsVarToBeUngrouped(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetPiVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetPiVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetPiVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetPiVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_SetPiVar(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_IsPiVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_IsPiVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_IsPiVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_IsPiVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_IsPiVar(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_BindVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_BindVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_BindVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_BindVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_BindVar(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_UnbindVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_UnbindVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_UnbindVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_UnbindVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_UnbindVar(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_VarIsBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_VarIsBound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_VarIsBound" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_VarIsBound" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_VarIsBound(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadMaxGrowthAlternate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadMaxGrowthAlternate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadMaxGrowthAlternate" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadMaxGrowthAlternate(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetMaxGrowthAlternate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetMaxGrowthAlternate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetMaxGrowthAlternate" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetMaxGrowthAlternate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  DdManager_SetMaxGrowthAlternate(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadReorderingCycle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadReorderingCycle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadReorderingCycle" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadReorderingCycle(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetReorderingCycle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetReorderingCycle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetReorderingCycle" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetReorderingCycle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  DdManager_SetReorderingCycle(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_PrintCover(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_PrintCover",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_PrintCover" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_PrintCover" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_PrintCover" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (int)DdManager_PrintCover(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Prime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_Prime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Prime" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_Prime" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)DdManager_Prime(arg1,arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager___len__" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager___len__(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager___getitem__" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (DdNode *)DdManager___getitem__(arg1,arg2);
    } catch (CuddFatalError x) {
      PyErr_SetString(PyExc_RuntimeError,x.er.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addNewVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_addNewVar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addNewVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (DdNode *)DdManager_addNewVar(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addNewVarAtLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_addNewVarAtLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addNewVarAtLevel" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_addNewVarAtLevel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdManager_addNewVarAtLevel(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_NewVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_NewVar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_NewVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (DdNode *)DdManager_NewVar(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_NewVarAtLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_NewVarAtLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_NewVarAtLevel" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_NewVarAtLevel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdManager_NewVarAtLevel(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addIthVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_addIthVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addIthVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_addIthVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdManager_addIthVar(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_IthVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_IthVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_IthVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_IthVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdManager_IthVar(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddIthVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_zddIthVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddIthVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_zddIthVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdManager_zddIthVar(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddVarsFromBddVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_zddVarsFromBddVars",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddVarsFromBddVars" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_zddVarsFromBddVars" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_zddVarsFromBddVars(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addConst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  CUDD_VALUE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_addConst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addConst" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CUDD_VALUE_TYPE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addConst" "', argument " "2"" of type '" "CUDD_VALUE_TYPE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_addConst" "', argument " "2"" of type '" "CUDD_VALUE_TYPE""'");
    } else {
      CUDD_VALUE_TYPE * temp = reinterpret_cast< CUDD_VALUE_TYPE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (DdNode *)DdManager_addConst(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_AutodynEnable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_AutodynEnable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_AutodynEnable" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_AutodynEnable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  DdManager_AutodynEnable(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_AutodynDisable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_AutodynDisable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_AutodynDisable" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_AutodynDisable(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReorderingStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  int result;
  
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReorderingStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReorderingStatus" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReorderingStatus(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_AutodynEnableZdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_AutodynEnableZdd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_AutodynEnableZdd" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_AutodynEnableZdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  DdManager_AutodynEnableZdd(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_AutodynDisableZdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_AutodynDisableZdd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_AutodynDisableZdd" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_AutodynDisableZdd(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReorderingStatusZdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  int result;
  
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReorderingStatusZdd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReorderingStatusZdd" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReorderingStatusZdd(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddRealignmentEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_zddRealignmentEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddRealignmentEnabled" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_zddRealignmentEnabled(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddRealignEnable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_zddRealignEnable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddRealignEnable" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_zddRealignEnable(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddRealignDisable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_zddRealignDisable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddRealignDisable" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_zddRealignDisable(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_RealignmentEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_RealignmentEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_RealignmentEnabled" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_RealignmentEnabled(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_RealignEnable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_RealignEnable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_RealignEnable" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_RealignEnable(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_RealignDisable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_RealignDisable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_RealignDisable" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_RealignDisable(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadOne(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadOne",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadOne" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (DdNode *)DdManager_ReadOne(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadZddOne(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ReadZddOne",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadZddOne" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ReadZddOne" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdManager_ReadZddOne(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadZero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadZero" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (DdNode *)DdManager_ReadZero(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadLogicZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadLogicZero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadLogicZero" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (DdNode *)DdManager_ReadLogicZero(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadPlusInfinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadPlusInfinity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadPlusInfinity" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (DdNode *)DdManager_ReadPlusInfinity(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadMinusInfinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadMinusInfinity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadMinusInfinity" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (DdNode *)DdManager_ReadMinusInfinity(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadBackground(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadBackground",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadBackground" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (DdNode *)DdManager_ReadBackground(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadCacheSlots(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadCacheSlots",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadCacheSlots" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadCacheSlots(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadCacheUsedSlots(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadCacheUsedSlots",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadCacheUsedSlots" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadCacheUsedSlots(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadCacheLookUps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadCacheLookUps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadCacheLookUps" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadCacheLookUps(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadCacheHits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadCacheHits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadCacheHits" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadCacheHits(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadRecursiveCalls(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadRecursiveCalls",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadRecursiveCalls" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadRecursiveCalls(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadMinHit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadMinHit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadMinHit" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadMinHit(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetMinHit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetMinHit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetMinHit" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetMinHit" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  DdManager_SetMinHit(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadLooseUpTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadLooseUpTo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadLooseUpTo" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadLooseUpTo(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetLooseUpTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetLooseUpTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetLooseUpTo" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetLooseUpTo" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  DdManager_SetLooseUpTo(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadMaxCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadMaxCache",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadMaxCache" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadMaxCache(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadMaxCacheHard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadMaxCacheHard",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadMaxCacheHard" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadMaxCacheHard(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetMaxCacheHard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetMaxCacheHard",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetMaxCacheHard" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetMaxCacheHard" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  DdManager_SetMaxCacheHard(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadSize" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadSize(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadZddSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadZddSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadZddSize" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadZddSize(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadSlots(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadSlots",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadSlots" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadSlots(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadUsedSlots(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadUsedSlots",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadUsedSlots" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadUsedSlots(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ExpectedUsedSlots(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ExpectedUsedSlots",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ExpectedUsedSlots" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ExpectedUsedSlots(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadKeys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadKeys" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadKeys(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadDead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadDead",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadDead" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadDead(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadMinDead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadMinDead",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadMinDead" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadMinDead(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadReorderings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadReorderings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadReorderings" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadReorderings(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadReorderingTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadReorderingTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadReorderingTime" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (long)DdManager_ReadReorderingTime(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadGarbageCollections(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadGarbageCollections",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadGarbageCollections" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadGarbageCollections(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadGarbageCollectionTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadGarbageCollectionTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadGarbageCollectionTime" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (long)DdManager_ReadGarbageCollectionTime(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_GarbageCollect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_GarbageCollect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_GarbageCollect" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_GarbageCollect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_GarbageCollect(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadNodesFreed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadNodesFreed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadNodesFreed" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadNodesFreed(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadNodesDropped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadNodesDropped",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadNodesDropped" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadNodesDropped(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadUniqueLookUps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadUniqueLookUps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadUniqueLookUps" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadUniqueLookUps(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadUniqueLinks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadUniqueLinks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadUniqueLinks" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadUniqueLinks(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadSiftMaxVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadSiftMaxVar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadSiftMaxVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadSiftMaxVar(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetSiftMaxVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetSiftMaxVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetSiftMaxVar" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetSiftMaxVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  DdManager_SetSiftMaxVar(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadSiftMaxSwap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadSiftMaxSwap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadSiftMaxSwap" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadSiftMaxSwap(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetSiftMaxSwap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetSiftMaxSwap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetSiftMaxSwap" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetSiftMaxSwap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  DdManager_SetSiftMaxSwap(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadMaxGrowth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadMaxGrowth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadMaxGrowth" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadMaxGrowth(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetMaxGrowth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetMaxGrowth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetMaxGrowth" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetMaxGrowth" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  DdManager_SetMaxGrowth(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MtrNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadTree" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (MtrNode *)DdManager_ReadTree(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MtrNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  MtrNode *arg2 = (MtrNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetTree" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_MtrNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_SetTree" "', argument " "2"" of type '" "MtrNode *""'"); 
  }
  arg2 = reinterpret_cast< MtrNode * >(argp2);
  DdManager_SetTree(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_FreeTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_FreeTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_FreeTree" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_FreeTree(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadZddTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MtrNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadZddTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadZddTree" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (MtrNode *)DdManager_ReadZddTree(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MtrNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetZddTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  MtrNode *arg2 = (MtrNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetZddTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetZddTree" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_MtrNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_SetZddTree" "', argument " "2"" of type '" "MtrNode *""'"); 
  }
  arg2 = reinterpret_cast< MtrNode * >(argp2);
  DdManager_SetZddTree(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_FreeZddTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_FreeZddTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_FreeZddTree" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_FreeZddTree(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadPerm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ReadPerm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadPerm" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ReadPerm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_ReadPerm(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadPermZdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ReadPermZdd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadPermZdd" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ReadPermZdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_ReadPermZdd(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadInvPerm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ReadInvPerm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadInvPerm" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ReadInvPerm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_ReadInvPerm(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadInvPermZdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ReadInvPermZdd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadInvPermZdd" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ReadInvPermZdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_ReadInvPermZdd(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ReadVars",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadVars" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ReadVars" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdManager_ReadVars(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CUDD_VALUE_TYPE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadEpsilon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadEpsilon" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = DdManager_ReadEpsilon(arg1);
  resultobj = SWIG_NewPointerObj((new CUDD_VALUE_TYPE(static_cast< const CUDD_VALUE_TYPE& >(result))), SWIGTYPE_p_CUDD_VALUE_TYPE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  CUDD_VALUE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetEpsilon" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CUDD_VALUE_TYPE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_SetEpsilon" "', argument " "2"" of type '" "CUDD_VALUE_TYPE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_SetEpsilon" "', argument " "2"" of type '" "CUDD_VALUE_TYPE""'");
    } else {
      CUDD_VALUE_TYPE * temp = reinterpret_cast< CUDD_VALUE_TYPE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  DdManager_SetEpsilon(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadGroupcheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Cudd_AggregationType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadGroupcheck",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadGroupcheck" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = DdManager_ReadGroupcheck(arg1);
  resultobj = SWIG_NewPointerObj((new Cudd_AggregationType(static_cast< const Cudd_AggregationType& >(result))), SWIGTYPE_p_Cudd_AggregationType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetGroupcheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  Cudd_AggregationType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetGroupcheck",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetGroupcheck" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cudd_AggregationType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_SetGroupcheck" "', argument " "2"" of type '" "Cudd_AggregationType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_SetGroupcheck" "', argument " "2"" of type '" "Cudd_AggregationType""'");
    } else {
      Cudd_AggregationType * temp = reinterpret_cast< Cudd_AggregationType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  DdManager_SetGroupcheck(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_GarbageCollectionEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_GarbageCollectionEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_GarbageCollectionEnabled" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_GarbageCollectionEnabled(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_EnableGarbageCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_EnableGarbageCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_EnableGarbageCollection" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_EnableGarbageCollection(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DisableGarbageCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_DisableGarbageCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DisableGarbageCollection" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_DisableGarbageCollection(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DeadAreCounted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_DeadAreCounted",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DeadAreCounted" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_DeadAreCounted(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_TurnOnCountDead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_TurnOnCountDead",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_TurnOnCountDead" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_TurnOnCountDead(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_TurnOffCountDead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_TurnOffCountDead",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_TurnOffCountDead" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_TurnOffCountDead(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadRecomb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadRecomb",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadRecomb" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadRecomb(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetRecomb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetRecomb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetRecomb" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetRecomb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  DdManager_SetRecomb(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadSymmviolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadSymmviolation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadSymmviolation" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadSymmviolation(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetSymmviolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetSymmviolation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetSymmviolation" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetSymmviolation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  DdManager_SetSymmviolation(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadArcviolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadArcviolation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadArcviolation" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadArcviolation(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetArcviolation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetArcviolation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetArcviolation" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetArcviolation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  DdManager_SetArcviolation(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadPopulationSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadPopulationSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadPopulationSize" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadPopulationSize(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetPopulationSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetPopulationSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetPopulationSize" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetPopulationSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  DdManager_SetPopulationSize(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadNumberXovers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadNumberXovers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadNumberXovers" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadNumberXovers(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetNumberXovers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetNumberXovers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetNumberXovers" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetNumberXovers" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  DdManager_SetNumberXovers(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadMemoryInUse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadMemoryInUse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadMemoryInUse" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (long)DdManager_ReadMemoryInUse(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_PrintInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_PrintInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_PrintInfo" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  {
    if ( PyFile_Check(obj1) ){
      arg2 = PyFile_AsFile(obj1);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)DdManager_PrintInfo(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadPeakNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadPeakNodeCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadPeakNodeCount" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (long)DdManager_ReadPeakNodeCount(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadPeakLiveNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadPeakLiveNodeCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadPeakLiveNodeCount" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReadPeakLiveNodeCount(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadNodeCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadNodeCount" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (long)DdManager_ReadNodeCount(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddReadNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_zddReadNodeCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddReadNodeCount" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (long)DdManager_zddReadNodeCount(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_EnableReorderingReporting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_EnableReorderingReporting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_EnableReorderingReporting" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_EnableReorderingReporting(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DisableReorderingReporting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_DisableReorderingReporting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DisableReorderingReporting" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_DisableReorderingReporting(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReorderingReporting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReorderingReporting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReorderingReporting" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_ReorderingReporting(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadErrorCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Cudd_ErrorType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadErrorCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadErrorCode" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = DdManager_ReadErrorCode(arg1);
  resultobj = SWIG_NewPointerObj((new Cudd_ErrorType(static_cast< const Cudd_ErrorType& >(result))), SWIGTYPE_p_Cudd_ErrorType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ClearErrorCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ClearErrorCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ClearErrorCode" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_ClearErrorCode(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadStdout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FILE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadStdout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadStdout" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (FILE *)DdManager_ReadStdout(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FILE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetStdout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetStdout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetStdout" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  {
    if ( PyFile_Check(obj1) ){
      arg2 = PyFile_AsFile(obj1);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  DdManager_SetStdout(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadStderr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FILE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadStderr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadStderr" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (FILE *)DdManager_ReadStderr(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FILE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetStderr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetStderr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetStderr" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  {
    if ( PyFile_Check(obj1) ){
      arg2 = PyFile_AsFile(obj1);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  DdManager_SetStderr(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadNextReordering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadNextReordering",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadNextReordering" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadNextReordering(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadSwapSteps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadSwapSteps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadSwapSteps" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_ReadSwapSteps(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadMaxLive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadMaxLive",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadMaxLive" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (unsigned int)DdManager_ReadMaxLive(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetMaxLive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetMaxLive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetMaxLive" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetMaxLive" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  DdManager_SetMaxLive(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadMaxMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_ReadMaxMemory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadMaxMemory" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (long)DdManager_ReadMaxMemory(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetMaxMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetMaxMemory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetMaxMemory" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetMaxMemory" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  DdManager_SetMaxMemory(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetNextReordering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_SetNextReordering",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetNextReordering" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SetNextReordering" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  DdManager_SetNextReordering(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DebugCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_DebugCheck",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DebugCheck" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_DebugCheck(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_CheckKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_CheckKeys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_CheckKeys" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_CheckKeys(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_MakeTreeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  MtrNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_MakeTreeNode",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_MakeTreeNode" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_MakeTreeNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_MakeTreeNode" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_MakeTreeNode" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (MtrNode *)DdManager_MakeTreeNode(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MtrNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_PrintLinear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_PrintLinear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_PrintLinear" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_PrintLinear(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadLinear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_ReadLinear",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadLinear" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ReadLinear" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_ReadLinear" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdManager_ReadLinear(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_CheckZeroRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_CheckZeroRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_CheckZeroRef" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_CheckZeroRef(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReduceHeap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_ReduceHeap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReduceHeap" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ReduceHeap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_ReduceHeap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdManager_ReduceHeap(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ShuffleHeap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ShuffleHeap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ShuffleHeap" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_ShuffleHeap" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  result = (int)DdManager_ShuffleHeap(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SymmProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_SymmProfile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SymmProfile" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_SymmProfile" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_SymmProfile" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  DdManager_SymmProfile(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_IndicesToCube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_IndicesToCube",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_IndicesToCube" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_IndicesToCube" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_IndicesToCube" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)DdManager_IndicesToCube(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_AverageDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_AverageDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_AverageDistance" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (double)DdManager_AverageDistance(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_MakeZddTreeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  MtrNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_MakeZddTreeNode",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_MakeZddTreeNode" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_MakeZddTreeNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_MakeZddTreeNode" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_MakeZddTreeNode" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (MtrNode *)DdManager_MakeZddTreeNode(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MtrNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddPrintSubtable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_zddPrintSubtable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddPrintSubtable" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_zddPrintSubtable(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddReduceHeap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_zddReduceHeap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddReduceHeap" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_zddReduceHeap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_zddReduceHeap" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdManager_zddReduceHeap(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddShuffleHeap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_zddShuffleHeap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddShuffleHeap" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_zddShuffleHeap" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  result = (int)DdManager_zddShuffleHeap(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddSymmProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_zddSymmProfile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddSymmProfile" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_zddSymmProfile" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_zddSymmProfile" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  DdManager_zddSymmProfile(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_BddToAdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_BddToAdd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_BddToAdd" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_BddToAdd" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdManager_BddToAdd(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addBddPattern(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_addBddPattern",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addBddPattern" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addBddPattern" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdManager_addBddPattern(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addBddThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  CUDD_VALUE_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addBddThreshold",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addBddThreshold" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addBddThreshold" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CUDD_VALUE_TYPE,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addBddThreshold" "', argument " "3"" of type '" "CUDD_VALUE_TYPE""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_addBddThreshold" "', argument " "3"" of type '" "CUDD_VALUE_TYPE""'");
    } else {
      CUDD_VALUE_TYPE * temp = reinterpret_cast< CUDD_VALUE_TYPE * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (DdNode *)DdManager_addBddThreshold(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addBddStrictThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  CUDD_VALUE_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addBddStrictThreshold",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addBddStrictThreshold" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addBddStrictThreshold" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CUDD_VALUE_TYPE,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addBddStrictThreshold" "', argument " "3"" of type '" "CUDD_VALUE_TYPE""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_addBddStrictThreshold" "', argument " "3"" of type '" "CUDD_VALUE_TYPE""'");
    } else {
      CUDD_VALUE_TYPE * temp = reinterpret_cast< CUDD_VALUE_TYPE * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (DdNode *)DdManager_addBddStrictThreshold(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addBddInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  CUDD_VALUE_TYPE arg3 ;
  CUDD_VALUE_TYPE arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_addBddInterval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addBddInterval" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addBddInterval" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CUDD_VALUE_TYPE,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addBddInterval" "', argument " "3"" of type '" "CUDD_VALUE_TYPE""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_addBddInterval" "', argument " "3"" of type '" "CUDD_VALUE_TYPE""'");
    } else {
      CUDD_VALUE_TYPE * temp = reinterpret_cast< CUDD_VALUE_TYPE * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_CUDD_VALUE_TYPE,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_addBddInterval" "', argument " "4"" of type '" "CUDD_VALUE_TYPE""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_addBddInterval" "', argument " "4"" of type '" "CUDD_VALUE_TYPE""'");
    } else {
      CUDD_VALUE_TYPE * temp = reinterpret_cast< CUDD_VALUE_TYPE * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (DdNode *)DdManager_addBddInterval(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addBddIthBit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addBddIthBit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addBddIthBit" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addBddIthBit" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_addBddIthBit" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)DdManager_addBddIthBit(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddPortFromBdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_zddPortFromBdd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddPortFromBdd" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_zddPortFromBdd" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdManager_zddPortFromBdd(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddPortToBdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_zddPortToBdd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddPortToBdd" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_zddPortToBdd" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdManager_zddPortToBdd(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_MakeBddFromZddCover(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_MakeBddFromZddCover",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_MakeBddFromZddCover" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_MakeBddFromZddCover" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdManager_MakeBddFromZddCover(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_PrintVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_PrintVersion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_PrintVersion" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  {
    if ( PyFile_Check(obj1) ){
      arg2 = PyFile_AsFile(obj1);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  DdManager_PrintVersion(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_Random",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Random" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (long)DdManager_Random(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Srandom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_Srandom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Srandom" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_Srandom" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  DdManager_Srandom(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_OutOfMem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_OutOfMem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_OutOfMem" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_OutOfMem" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  DdManager_OutOfMem(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Transfer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdManager *arg2 = (DdManager *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_Transfer",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Transfer" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_Transfer" "', argument " "2"" of type '" "DdManager *""'"); 
  }
  arg2 = reinterpret_cast< DdManager * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_Transfer" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (DdNode *)DdManager_Transfer(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_CubeArrayToBdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_CubeArrayToBdd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_CubeArrayToBdd" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_CubeArrayToBdd" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  result = (DdNode *)DdManager_CubeArrayToBdd(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetVarMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_SetVarMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetVarMap" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_SetVarMap" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_SetVarMap" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_SetVarMap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (int)DdManager_SetVarMap(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ComputeCube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  IntArray *arg3 = (IntArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_ComputeCube",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ComputeCube" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_ComputeCube" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ComputeCube" "', argument " "3"" of type '" "IntArray *""'"); 
  }
  arg3 = reinterpret_cast< IntArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_ComputeCube" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdManager_ComputeCube(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_zddDumpDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  FILE *arg6 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DdManager_zddDumpDot",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_zddDumpDot" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_zddDumpDot" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_zddDumpDot" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_zddDumpDot" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_zddDumpDot" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    if ( PyFile_Check(obj5) ){
      arg6 = PyFile_AsFile(obj5);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)DdManager_zddDumpDot(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DumpBlif(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  char *arg6 = (char *) 0 ;
  FILE *arg7 = (FILE *) 0 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:DdManager_DumpBlif",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DumpBlif" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_DumpBlif" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_DumpBlif" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_DumpBlif" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_DumpBlif" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DdManager_DumpBlif" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    if ( PyFile_Check(obj6) ){
      arg7 = PyFile_AsFile(obj6);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "DdManager_DumpBlif" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  result = (int)DdManager_DumpBlif(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DumpBlifBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  FILE *arg6 = (FILE *) 0 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:DdManager_DumpBlifBody",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DumpBlifBody" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_DumpBlifBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_DumpBlifBody" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_DumpBlifBody" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_DumpBlifBody" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    if ( PyFile_Check(obj5) ){
      arg6 = PyFile_AsFile(obj5);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "DdManager_DumpBlifBody" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = (int)DdManager_DumpBlifBody(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DumpDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  FILE *arg6 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DdManager_DumpDot",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DumpDot" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_DumpDot" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_DumpDot" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_DumpDot" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_DumpDot" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    if ( PyFile_Check(obj5) ){
      arg6 = PyFile_AsFile(obj5);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)DdManager_DumpDot(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DumpDaVinci(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  FILE *arg6 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DdManager_DumpDaVinci",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DumpDaVinci" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_DumpDaVinci" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_DumpDaVinci" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_DumpDaVinci" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_DumpDaVinci" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    if ( PyFile_Check(obj5) ){
      arg6 = PyFile_AsFile(obj5);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)DdManager_DumpDaVinci(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DumpDDcal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  FILE *arg6 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DdManager_DumpDDcal",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DumpDDcal" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_DumpDDcal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_DumpDDcal" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_DumpDDcal" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_DumpDDcal" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    if ( PyFile_Check(obj5) ){
      arg6 = PyFile_AsFile(obj5);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)DdManager_DumpDDcal(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DumpFactoredForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  FILE *arg6 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DdManager_DumpFactoredForm",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DumpFactoredForm" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_DumpFactoredForm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_DumpFactoredForm" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_DumpFactoredForm" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_DumpFactoredForm" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  {
    if ( PyFile_Check(obj5) ){
      arg6 = PyFile_AsFile(obj5);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)DdManager_DumpFactoredForm(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ArrayLoad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int arg4 ;
  char **arg5 = (char **) 0 ;
  IntArray *arg6 = (IntArray *) 0 ;
  IntArray *arg7 = (IntArray *) 0 ;
  int arg8 ;
  char *arg9 = (char *) 0 ;
  FILE *arg10 = (FILE *) 0 ;
  DdArray *arg11 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:DdManager_ArrayLoad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ArrayLoad" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ArrayLoad" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ArrayLoad" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_ArrayLoad" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_ArrayLoad" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DdManager_ArrayLoad" "', argument " "6"" of type '" "IntArray *""'"); 
  }
  arg6 = reinterpret_cast< IntArray * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "DdManager_ArrayLoad" "', argument " "7"" of type '" "IntArray *""'"); 
  }
  arg7 = reinterpret_cast< IntArray * >(argp7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "DdManager_ArrayLoad" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_AsCharPtrAndSize(obj8, &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "DdManager_ArrayLoad" "', argument " "9"" of type '" "char *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  {
    if ( PyFile_Check(obj9) ){
      arg10 = PyFile_AsFile(obj9);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "DdManager_ArrayLoad" "', argument " "11"" of type '" "DdArray *""'"); 
  }
  arg11 = reinterpret_cast< DdArray * >(argp11);
  result = (int)DdManager_ArrayLoad(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ArrayStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  char *arg2 = (char *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  IntArray *arg6 = (IntArray *) 0 ;
  int arg7 ;
  int arg8 ;
  char *arg9 = (char *) 0 ;
  FILE *arg10 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:DdManager_ArrayStore",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ArrayStore" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_ArrayStore" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ArrayStore" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ArrayStore" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_ArrayStore" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = reinterpret_cast< char ** >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DdManager_ArrayStore" "', argument " "6"" of type '" "IntArray *""'"); 
  }
  arg6 = reinterpret_cast< IntArray * >(argp6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "DdManager_ArrayStore" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "DdManager_ArrayStore" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_AsCharPtrAndSize(obj8, &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "DdManager_ArrayStore" "', argument " "9"" of type '" "char *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  {
    if ( PyFile_Check(obj9) ){
      arg10 = PyFile_AsFile(obj9);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)DdManager_ArrayStore(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_BddLoad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  IntArray *arg4 = (IntArray *) 0 ;
  IntArray *arg5 = (IntArray *) 0 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  FILE *arg8 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:DdManager_BddLoad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_BddLoad" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_BddLoad" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_BddLoad" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_BddLoad" "', argument " "4"" of type '" "IntArray *""'"); 
  }
  arg4 = reinterpret_cast< IntArray * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_BddLoad" "', argument " "5"" of type '" "IntArray *""'"); 
  }
  arg5 = reinterpret_cast< IntArray * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DdManager_BddLoad" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_AsCharPtrAndSize(obj6, &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "DdManager_BddLoad" "', argument " "7"" of type '" "char *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    if ( PyFile_Check(obj7) ){
      arg8 = PyFile_AsFile(obj7);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (DdNode *)DdManager_BddLoad(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return resultobj;
fail:
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_BddStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  char *arg2 = (char *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  char **arg4 = (char **) 0 ;
  IntArray *arg5 = (IntArray *) 0 ;
  int arg6 ;
  int arg7 ;
  char *arg8 = (char *) 0 ;
  FILE *arg9 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:DdManager_BddStore",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_BddStore" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_BddStore" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_BddStore" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_BddStore" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_BddStore" "', argument " "5"" of type '" "IntArray *""'"); 
  }
  arg5 = reinterpret_cast< IntArray * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DdManager_BddStore" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "DdManager_BddStore" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_AsCharPtrAndSize(obj7, &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "DdManager_BddStore" "', argument " "8"" of type '" "char *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    if ( PyFile_Check(obj8) ){
      arg9 = PyFile_AsFile(obj8);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)DdManager_BddStore(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Bin2Text(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_Bin2Text",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Bin2Text" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_Bin2Text" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_Bin2Text" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (int)DdManager_Bin2Text(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_DisplayBinary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_DisplayBinary",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_DisplayBinary" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_DisplayBinary" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_DisplayBinary" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (int)DdManager_DisplayBinary(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Text2Bin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_Text2Bin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Text2Bin" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_Text2Bin" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_Text2Bin" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (int)DdManager_Text2Bin(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_VectorSupportSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_VectorSupportSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_VectorSupportSize" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_VectorSupportSize" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_VectorSupportSize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdManager_VectorSupportSize(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ClassifySupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  DdArray *arg4 = (DdArray *) 0 ;
  DdArray *arg5 = (DdArray *) 0 ;
  DdArray *arg6 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DdManager_ClassifySupport",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ClassifySupport" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_ClassifySupport" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ClassifySupport" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ClassifySupport" "', argument " "4"" of type '" "DdArray *""'"); 
  }
  arg4 = reinterpret_cast< DdArray * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_ClassifySupport" "', argument " "5"" of type '" "DdArray *""'"); 
  }
  arg5 = reinterpret_cast< DdArray * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DdManager_ClassifySupport" "', argument " "6"" of type '" "DdArray *""'"); 
  }
  arg6 = reinterpret_cast< DdArray * >(argp6);
  result = (int)DdManager_ClassifySupport(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Xgty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  DdArray *arg4 = (DdArray *) 0 ;
  DdArray *arg5 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_Xgty",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Xgty" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_Xgty" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_Xgty" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_Xgty" "', argument " "4"" of type '" "DdArray *""'"); 
  }
  arg4 = reinterpret_cast< DdArray * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_Xgty" "', argument " "5"" of type '" "DdArray *""'"); 
  }
  arg5 = reinterpret_cast< DdArray * >(argp5);
  result = (DdNode *)DdManager_Xgty(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Xeqy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  DdArray *arg4 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_Xeqy",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Xeqy" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_Xeqy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_Xeqy" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_Xeqy" "', argument " "4"" of type '" "DdArray *""'"); 
  }
  arg4 = reinterpret_cast< DdArray * >(argp4);
  result = (DdNode *)DdManager_Xeqy(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Dxygtdxz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  DdArray *arg4 = (DdArray *) 0 ;
  DdArray *arg5 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_Dxygtdxz",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Dxygtdxz" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_Dxygtdxz" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_Dxygtdxz" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_Dxygtdxz" "', argument " "4"" of type '" "DdArray *""'"); 
  }
  arg4 = reinterpret_cast< DdArray * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_Dxygtdxz" "', argument " "5"" of type '" "DdArray *""'"); 
  }
  arg5 = reinterpret_cast< DdArray * >(argp5);
  result = (DdNode *)DdManager_Dxygtdxz(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Dxygtdyz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  DdArray *arg4 = (DdArray *) 0 ;
  DdArray *arg5 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_Dxygtdyz",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Dxygtdyz" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_Dxygtdyz" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_Dxygtdyz" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_Dxygtdyz" "', argument " "4"" of type '" "DdArray *""'"); 
  }
  arg4 = reinterpret_cast< DdArray * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_Dxygtdyz" "', argument " "5"" of type '" "DdArray *""'"); 
  }
  arg5 = reinterpret_cast< DdArray * >(argp5);
  result = (DdNode *)DdManager_Dxygtdyz(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SharingSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_SharingSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SharingSize" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_SharingSize" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_SharingSize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdManager_SharingSize(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ReadIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ReadIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ReadIndex" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ReadIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_ReadIndex(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addPlus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addPlus" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addPlus" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addPlus" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addPlus(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addTimes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addTimes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addTimes" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addTimes" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addTimes" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addTimes(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addThreshold",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addThreshold" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addThreshold" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addThreshold" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addThreshold(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addSetNZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addSetNZ",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addSetNZ" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addSetNZ" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addSetNZ" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addSetNZ(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addDivide(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addDivide",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addDivide" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addDivide" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addDivide" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addDivide(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addMinus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addMinus" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addMinus" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addMinus" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addMinus(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addMinimum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addMinimum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addMinimum" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addMinimum" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addMinimum" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addMinimum(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addMaximum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addMaximum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addMaximum" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addMaximum" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addMaximum" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addMaximum(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addOneZeroMaximum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addOneZeroMaximum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addOneZeroMaximum" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addOneZeroMaximum" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addOneZeroMaximum" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addOneZeroMaximum(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addDiff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addDiff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addDiff" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addDiff" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addDiff" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addDiff(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addAgreement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addAgreement",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addAgreement" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addAgreement" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addAgreement" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addAgreement(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addOr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addOr",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addOr" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addOr" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addOr" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addOr(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addNand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addNand",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addNand" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addNand" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addNand" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addNand(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addNor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addNor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addNor" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addNor" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addNor" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addNor(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addXor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addXor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addXor" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addXor" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addXor" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addXor(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addXnor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_addXnor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addXnor" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addXnor" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addXnor" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdManager_addXnor(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addWalsh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_addWalsh",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addWalsh" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addWalsh" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addWalsh" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_addWalsh" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdManager_addWalsh(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addHamming(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_addHamming",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addHamming" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addHamming" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addHamming" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_addHamming" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdManager_addHamming(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addComputeCube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  IntArray *arg3 = (IntArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_addComputeCube",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addComputeCube" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_addComputeCube" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addComputeCube" "', argument " "3"" of type '" "IntArray *""'"); 
  }
  arg3 = reinterpret_cast< IntArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_addComputeCube" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdManager_addComputeCube(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addResidue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_addResidue",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addResidue" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_addResidue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_addResidue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_addResidue" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DdManager_addResidue" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (DdNode *)DdManager_addResidue(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_addXeqy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdArray *arg3 = (DdArray *) 0 ;
  DdArray *arg4 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_addXeqy",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_addXeqy" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_addXeqy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_addXeqy" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_addXeqy" "', argument " "4"" of type '" "DdArray *""'"); 
  }
  arg4 = reinterpret_cast< DdArray * >(argp4);
  result = (DdNode *)DdManager_addXeqy(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaNumberOfDigits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_ApaNumberOfDigits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaNumberOfDigits" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaNumberOfDigits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdManager_ApaNumberOfDigits(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_NewApaNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdApaNumber result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdManager_NewApaNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_NewApaNumber" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_NewApaNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = DdManager_NewApaNumber(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new DdApaNumber(static_cast< const DdApaNumber& >(result))), SWIGTYPE_p_DdApaNumber, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdApaNumber arg3 ;
  DdApaNumber arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_ApaCopy",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaCopy" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaCopy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ApaCopy" "', argument " "3"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaCopy" "', argument " "3"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ApaCopy" "', argument " "4"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaCopy" "', argument " "4"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  DdManager_ApaCopy(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaAdd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdApaNumber arg3 ;
  DdApaNumber arg4 ;
  DdApaNumber arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdApaDigit result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_ApaAdd",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaAdd" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaAdd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ApaAdd" "', argument " "3"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaAdd" "', argument " "3"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ApaAdd" "', argument " "4"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaAdd" "', argument " "4"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_ApaAdd" "', argument " "5"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaAdd" "', argument " "5"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = DdManager_ApaAdd(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new DdApaDigit(static_cast< const DdApaDigit& >(result))), SWIGTYPE_p_DdApaDigit, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaSubtract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdApaNumber arg3 ;
  DdApaNumber arg4 ;
  DdApaNumber arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdApaDigit result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_ApaSubtract",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaSubtract" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaSubtract" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ApaSubtract" "', argument " "3"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaSubtract" "', argument " "3"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ApaSubtract" "', argument " "4"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaSubtract" "', argument " "4"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_ApaSubtract" "', argument " "5"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaSubtract" "', argument " "5"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = DdManager_ApaSubtract(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new DdApaDigit(static_cast< const DdApaDigit& >(result))), SWIGTYPE_p_DdApaDigit, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaShortDivision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdApaNumber arg3 ;
  DdApaDigit arg4 ;
  DdApaNumber arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdApaDigit result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_ApaShortDivision",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaShortDivision" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaShortDivision" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ApaShortDivision" "', argument " "3"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaShortDivision" "', argument " "3"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DdApaDigit,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ApaShortDivision" "', argument " "4"" of type '" "DdApaDigit""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaShortDivision" "', argument " "4"" of type '" "DdApaDigit""'");
    } else {
      DdApaDigit * temp = reinterpret_cast< DdApaDigit * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_ApaShortDivision" "', argument " "5"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaShortDivision" "', argument " "5"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = DdManager_ApaShortDivision(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new DdApaDigit(static_cast< const DdApaDigit& >(result))), SWIGTYPE_p_DdApaDigit, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaIntDivision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdApaNumber arg3 ;
  unsigned int arg4 ;
  DdApaNumber arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_ApaIntDivision",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaIntDivision" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaIntDivision" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ApaIntDivision" "', argument " "3"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaIntDivision" "', argument " "3"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_ApaIntDivision" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_ApaIntDivision" "', argument " "5"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaIntDivision" "', argument " "5"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (unsigned int)DdManager_ApaIntDivision(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaShiftRight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdApaDigit arg3 ;
  DdApaNumber arg4 ;
  DdApaNumber arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_ApaShiftRight",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaShiftRight" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaShiftRight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DdApaDigit,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ApaShiftRight" "', argument " "3"" of type '" "DdApaDigit""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaShiftRight" "', argument " "3"" of type '" "DdApaDigit""'");
    } else {
      DdApaDigit * temp = reinterpret_cast< DdApaDigit * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ApaShiftRight" "', argument " "4"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaShiftRight" "', argument " "4"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_ApaShiftRight" "', argument " "5"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaShiftRight" "', argument " "5"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  DdManager_ApaShiftRight(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaSetToLiteral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdApaNumber arg3 ;
  DdApaDigit arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_ApaSetToLiteral",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaSetToLiteral" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaSetToLiteral" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ApaSetToLiteral" "', argument " "3"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaSetToLiteral" "', argument " "3"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DdApaDigit,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ApaSetToLiteral" "', argument " "4"" of type '" "DdApaDigit""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaSetToLiteral" "', argument " "4"" of type '" "DdApaDigit""'");
    } else {
      DdApaDigit * temp = reinterpret_cast< DdApaDigit * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  DdManager_ApaSetToLiteral(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaPowerOfTwo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdApaNumber arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_ApaPowerOfTwo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaPowerOfTwo" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaPowerOfTwo" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ApaPowerOfTwo" "', argument " "3"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaPowerOfTwo" "', argument " "3"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_ApaPowerOfTwo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  DdManager_ApaPowerOfTwo(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaCompare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdApaNumber arg3 ;
  int arg4 ;
  DdApaNumber arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_ApaCompare",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaCompare" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaCompare" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ApaCompare" "', argument " "3"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaCompare" "', argument " "3"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_ApaCompare" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DdManager_ApaCompare" "', argument " "5"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaCompare" "', argument " "5"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (int)DdManager_ApaCompare(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaCompareRatios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  int arg2 ;
  DdApaNumber arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  DdApaNumber arg6 ;
  unsigned int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:DdManager_ApaCompareRatios",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaCompareRatios" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdManager_ApaCompareRatios" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_ApaCompareRatios" "', argument " "3"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaCompareRatios" "', argument " "3"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_ApaCompareRatios" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DdManager_ApaCompareRatios" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DdManager_ApaCompareRatios" "', argument " "6"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaCompareRatios" "', argument " "6"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_unsigned_SS_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "DdManager_ApaCompareRatios" "', argument " "7"" of type '" "unsigned int""'");
  } 
  arg7 = static_cast< unsigned int >(val7);
  result = (int)DdManager_ApaCompareRatios(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaPrintHex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  DdApaNumber arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_ApaPrintHex",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaPrintHex" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  {
    if ( PyFile_Check(obj1) ){
      arg2 = PyFile_AsFile(obj1);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_ApaPrintHex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ApaPrintHex" "', argument " "4"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaPrintHex" "', argument " "4"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (int)DdManager_ApaPrintHex(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaPrintDecimal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  DdApaNumber arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdManager_ApaPrintDecimal",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaPrintDecimal" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  {
    if ( PyFile_Check(obj1) ){
      arg2 = PyFile_AsFile(obj1);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_ApaPrintDecimal" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ApaPrintDecimal" "', argument " "4"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaPrintDecimal" "', argument " "4"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  result = (int)DdManager_ApaPrintDecimal(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_ApaPrintExponential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  DdApaNumber arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_ApaPrintExponential",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_ApaPrintExponential" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  {
    if ( PyFile_Check(obj1) ){
      arg2 = PyFile_AsFile(obj1);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_ApaPrintExponential" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DdApaNumber,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdManager_ApaPrintExponential" "', argument " "4"" of type '" "DdApaNumber""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdManager_ApaPrintExponential" "', argument " "4"" of type '" "DdApaNumber""'");
    } else {
      DdApaNumber * temp = reinterpret_cast< DdApaNumber * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DdManager_ApaPrintExponential" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (int)DdManager_ApaPrintExponential(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_One(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_One",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_One" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (DdNode *)DdManager_One(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_Zero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Zero" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (DdNode *)DdManager_Zero(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_Sort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdManager_Sort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_Sort" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_Sort" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdManager_Sort" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (int)DdManager_Sort(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_PrintStdOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_PrintStdOut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_PrintStdOut" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  result = (int)DdManager_PrintStdOut(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_StateCube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdManager_StateCube",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_StateCube" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdManager_StateCube" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdManager_StateCube" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdManager_StateCube" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DdManager_StateCube" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (DdNode *)DdManager_StateCube(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdManager_SetDefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdManager *arg1 = (DdManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdManager_SetDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdManager_SetDefault" "', argument " "1"" of type '" "DdManager *""'"); 
  }
  arg1 = reinterpret_cast< DdManager * >(argp1);
  DdManager_SetDefault(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DdManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DdManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DdGen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdGen *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DdGen",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DdGen" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DdGen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DdGen" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (DdGen *)new_DdGen__SWIG_0(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdGen, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DdGen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdGen *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DdGen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DdGen" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DdGen" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdGen *)new_DdGen__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdGen, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DdGen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DdNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DdGen__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DdNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_DdNode, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_DdGen__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DdGen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DdGen::DdGen(DdNode *,int,DdNode *)\n"
    "    DdGen::DdGen(DdNode *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DdGen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdGen *arg1 = (DdGen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DdGen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdGen, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DdGen" "', argument " "1"" of type '" "DdGen *""'"); 
  }
  arg1 = reinterpret_cast< DdGen * >(argp1);
  delete_DdGen(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DdGen_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DdGen, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DdNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DdNode")) SWIG_fail;
  result = (DdNode *)new_DdNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DdNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DdNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DdNode" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  delete_DdNode(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_FirstCube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdGen *arg2 = (DdGen *) 0 ;
  int **arg3 = (int **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  {
    arg3 = cube_iter;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_FirstCube",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_FirstCube" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdGen, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_FirstCube" "', argument " "2"" of type '" "DdGen *""'"); 
  }
  arg2 = reinterpret_cast< DdGen * >(argp2);
  result = (int)DdNode_FirstCube(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int sz = Cudd_ReadSize(mgr);
    resultobj = array_to_tuple(resultobj, arg3, sz);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_NextCube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdGen *arg2 = (DdGen *) 0 ;
  int **arg3 = (int **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  {
    arg3 = cube_iter;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_NextCube",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_NextCube" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdGen, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_NextCube" "', argument " "2"" of type '" "DdGen *""'"); 
  }
  arg2 = reinterpret_cast< DdGen * >(argp2);
  result = (int)DdNode_NextCube(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int sz = Cudd_ReadSize(mgr);
    resultobj = array_to_tuple(resultobj, arg3, sz);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_FirstNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdGen *arg2 = (DdGen *) 0 ;
  DdNode **arg3 = (DdNode **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  {
    arg3 = node_iter;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_FirstNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_FirstNode" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdGen, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_FirstNode" "', argument " "2"" of type '" "DdGen *""'"); 
  }
  arg2 = reinterpret_cast< DdGen * >(argp2);
  result = (int)DdNode_FirstNode(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    PyObject *o, *o2;
    
    
    
    
    
    Cudd_Ref(*arg3);
    o = SWIG_NewPointerObj(*arg3,SWIGTYPE_p_DdNode,0);
    o2 = resultobj;
    resultobj = PyTuple_New(2);
    PyTuple_SetItem(resultobj,0,o2);
    PyTuple_SetItem(resultobj,1,o);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_NextNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdGen *arg2 = (DdGen *) 0 ;
  DdNode **arg3 = (DdNode **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  {
    arg3 = node_iter;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_NextNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_NextNode" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdGen, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_NextNode" "', argument " "2"" of type '" "DdGen *""'"); 
  }
  arg2 = reinterpret_cast< DdGen * >(argp2);
  result = (int)DdNode_NextNode(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    PyObject *o, *o2;
    
    
    
    
    
    Cudd_Ref(*arg3);
    o = SWIG_NewPointerObj(*arg3,SWIGTYPE_p_DdNode,0);
    o2 = resultobj;
    resultobj = PyTuple_New(2);
    PyTuple_SetItem(resultobj,0,o2);
    PyTuple_SetItem(resultobj,1,o);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_AndAbstractLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_AndAbstractLimit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_AndAbstractLimit" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_AndAbstractLimit" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_AndAbstractLimit" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_AndAbstractLimit" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (DdNode *)DdNode_AndAbstractLimit(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_AndLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_AndLimit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_AndLimit" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_AndLimit" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_AndLimit" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (DdNode *)DdNode_AndLimit(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_NPAnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_NPAnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_NPAnd" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_NPAnd" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_NPAnd(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_FindTwoLiteralClauses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdTlcInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_FindTwoLiteralClauses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_FindTwoLiteralClauses" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdTlcInfo *)DdNode_FindTwoLiteralClauses(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdTlcInfo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_EpdCountMinterm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  EpDouble *arg3 = (EpDouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_EpdCountMinterm",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_EpdCountMinterm" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_EpdCountMinterm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_EpDouble, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_EpdCountMinterm" "', argument " "3"" of type '" "EpDouble *""'"); 
  }
  arg3 = reinterpret_cast< EpDouble * >(argp3);
  result = (int)DdNode_EpdCountMinterm(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ApproxConjDecomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode ***arg2 = (DdNode ***) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  {
    arg2 = glob_conj;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_ApproxConjDecomp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ApproxConjDecomp" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_ApproxConjDecomp(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int num_nds;
    PyObject *o, *o2;
    
    
    
    
    
    num_nds = (int) PyInt_AsLong(resultobj);
    if (num_nds == 1) {
      o = SWIG_NewPointerObj(**arg2,SWIGTYPE_p_DdNode,0);
      o2 = resultobj;
      resultobj = PyTuple_New(2);
      PyTuple_SetItem(resultobj,0,o2);
      PyTuple_SetItem(resultobj,1,o);
    }
    if (num_nds == 2) {
      o2 = resultobj;
      resultobj = PyTuple_New(3);
      PyTuple_SetItem(resultobj,0,o2);
      o = SWIG_NewPointerObj((*arg2)[0],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,1,o);
      o = SWIG_NewPointerObj((*arg2)[1],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,2,o);
    }
    // The storage for the con/dis juncts is NOT freed by CUDD -- we have to do it
    FREE(*arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ApproxDisjDecomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode ***arg2 = (DdNode ***) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  {
    arg2 = glob_conj;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_ApproxDisjDecomp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ApproxDisjDecomp" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_ApproxDisjDecomp(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int num_nds;
    PyObject *o, *o2;
    
    
    
    
    
    num_nds = (int) PyInt_AsLong(resultobj);
    if (num_nds == 1) {
      o = SWIG_NewPointerObj(**arg2,SWIGTYPE_p_DdNode,0);
      o2 = resultobj;
      resultobj = PyTuple_New(2);
      PyTuple_SetItem(resultobj,0,o2);
      PyTuple_SetItem(resultobj,1,o);
    }
    if (num_nds == 2) {
      o2 = resultobj;
      resultobj = PyTuple_New(3);
      PyTuple_SetItem(resultobj,0,o2);
      o = SWIG_NewPointerObj((*arg2)[0],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,1,o);
      o = SWIG_NewPointerObj((*arg2)[1],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,2,o);
    }
    // The storage for the con/dis juncts is NOT freed by CUDD -- we have to do it
    FREE(*arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_IterConjDecomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode ***arg2 = (DdNode ***) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  {
    arg2 = glob_conj;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_IterConjDecomp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_IterConjDecomp" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_IterConjDecomp(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int num_nds;
    PyObject *o, *o2;
    
    
    
    
    
    num_nds = (int) PyInt_AsLong(resultobj);
    if (num_nds == 1) {
      o = SWIG_NewPointerObj(**arg2,SWIGTYPE_p_DdNode,0);
      o2 = resultobj;
      resultobj = PyTuple_New(2);
      PyTuple_SetItem(resultobj,0,o2);
      PyTuple_SetItem(resultobj,1,o);
    }
    if (num_nds == 2) {
      o2 = resultobj;
      resultobj = PyTuple_New(3);
      PyTuple_SetItem(resultobj,0,o2);
      o = SWIG_NewPointerObj((*arg2)[0],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,1,o);
      o = SWIG_NewPointerObj((*arg2)[1],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,2,o);
    }
    // The storage for the con/dis juncts is NOT freed by CUDD -- we have to do it
    FREE(*arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_IterDisjDecomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode ***arg2 = (DdNode ***) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  {
    arg2 = glob_conj;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_IterDisjDecomp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_IterDisjDecomp" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_IterDisjDecomp(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int num_nds;
    PyObject *o, *o2;
    
    
    
    
    
    num_nds = (int) PyInt_AsLong(resultobj);
    if (num_nds == 1) {
      o = SWIG_NewPointerObj(**arg2,SWIGTYPE_p_DdNode,0);
      o2 = resultobj;
      resultobj = PyTuple_New(2);
      PyTuple_SetItem(resultobj,0,o2);
      PyTuple_SetItem(resultobj,1,o);
    }
    if (num_nds == 2) {
      o2 = resultobj;
      resultobj = PyTuple_New(3);
      PyTuple_SetItem(resultobj,0,o2);
      o = SWIG_NewPointerObj((*arg2)[0],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,1,o);
      o = SWIG_NewPointerObj((*arg2)[1],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,2,o);
    }
    // The storage for the con/dis juncts is NOT freed by CUDD -- we have to do it
    FREE(*arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_GenConjDecomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode ***arg2 = (DdNode ***) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  {
    arg2 = glob_conj;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_GenConjDecomp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_GenConjDecomp" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_GenConjDecomp(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int num_nds;
    PyObject *o, *o2;
    
    
    
    
    
    num_nds = (int) PyInt_AsLong(resultobj);
    if (num_nds == 1) {
      o = SWIG_NewPointerObj(**arg2,SWIGTYPE_p_DdNode,0);
      o2 = resultobj;
      resultobj = PyTuple_New(2);
      PyTuple_SetItem(resultobj,0,o2);
      PyTuple_SetItem(resultobj,1,o);
    }
    if (num_nds == 2) {
      o2 = resultobj;
      resultobj = PyTuple_New(3);
      PyTuple_SetItem(resultobj,0,o2);
      o = SWIG_NewPointerObj((*arg2)[0],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,1,o);
      o = SWIG_NewPointerObj((*arg2)[1],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,2,o);
    }
    // The storage for the con/dis juncts is NOT freed by CUDD -- we have to do it
    FREE(*arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_GenDisjDecomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode ***arg2 = (DdNode ***) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  {
    arg2 = glob_conj;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_GenDisjDecomp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_GenDisjDecomp" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_GenDisjDecomp(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int num_nds;
    PyObject *o, *o2;
    
    
    
    
    
    num_nds = (int) PyInt_AsLong(resultobj);
    if (num_nds == 1) {
      o = SWIG_NewPointerObj(**arg2,SWIGTYPE_p_DdNode,0);
      o2 = resultobj;
      resultobj = PyTuple_New(2);
      PyTuple_SetItem(resultobj,0,o2);
      PyTuple_SetItem(resultobj,1,o);
    }
    if (num_nds == 2) {
      o2 = resultobj;
      resultobj = PyTuple_New(3);
      PyTuple_SetItem(resultobj,0,o2);
      o = SWIG_NewPointerObj((*arg2)[0],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,1,o);
      o = SWIG_NewPointerObj((*arg2)[1],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,2,o);
    }
    // The storage for the con/dis juncts is NOT freed by CUDD -- we have to do it
    FREE(*arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_VarConjDecomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode ***arg2 = (DdNode ***) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  {
    arg2 = glob_conj;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_VarConjDecomp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_VarConjDecomp" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_VarConjDecomp(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int num_nds;
    PyObject *o, *o2;
    
    
    
    
    
    num_nds = (int) PyInt_AsLong(resultobj);
    if (num_nds == 1) {
      o = SWIG_NewPointerObj(**arg2,SWIGTYPE_p_DdNode,0);
      o2 = resultobj;
      resultobj = PyTuple_New(2);
      PyTuple_SetItem(resultobj,0,o2);
      PyTuple_SetItem(resultobj,1,o);
    }
    if (num_nds == 2) {
      o2 = resultobj;
      resultobj = PyTuple_New(3);
      PyTuple_SetItem(resultobj,0,o2);
      o = SWIG_NewPointerObj((*arg2)[0],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,1,o);
      o = SWIG_NewPointerObj((*arg2)[1],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,2,o);
    }
    // The storage for the con/dis juncts is NOT freed by CUDD -- we have to do it
    FREE(*arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_VarDisjDecomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode ***arg2 = (DdNode ***) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  {
    arg2 = glob_conj;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_VarDisjDecomp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_VarDisjDecomp" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_VarDisjDecomp(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int num_nds;
    PyObject *o, *o2;
    
    
    
    
    
    num_nds = (int) PyInt_AsLong(resultobj);
    if (num_nds == 1) {
      o = SWIG_NewPointerObj(**arg2,SWIGTYPE_p_DdNode,0);
      o2 = resultobj;
      resultobj = PyTuple_New(2);
      PyTuple_SetItem(resultobj,0,o2);
      PyTuple_SetItem(resultobj,1,o);
    }
    if (num_nds == 2) {
      o2 = resultobj;
      resultobj = PyTuple_New(3);
      PyTuple_SetItem(resultobj,0,o2);
      o = SWIG_NewPointerObj((*arg2)[0],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,1,o);
      o = SWIG_NewPointerObj((*arg2)[1],SWIGTYPE_p_DdNode,0);
      PyTuple_SetItem(resultobj,2,o);
    }
    // The storage for the con/dis juncts is NOT freed by CUDD -- we have to do it
    FREE(*arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ClosestCube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_ClosestCube",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ClosestCube" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_ClosestCube" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_ClosestCube(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_LeqUnless(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_LeqUnless",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_LeqUnless" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_LeqUnless" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_LeqUnless" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (int)DdNode_LeqUnless(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_MakePrime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_MakePrime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_MakePrime" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_MakePrime" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_MakePrime(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_CountPathsToNonZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_CountPathsToNonZero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_CountPathsToNonZero" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (double)DdNode_CountPathsToNonZero(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SupportIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int **arg2 = (int **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  {
    arg2 = cube_iter;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_SupportIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SupportIndex" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_SupportIndex(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int sz = Cudd_ReadSize(mgr);
    int chk = (int) PyInt_AsLong(resultobj);
    resultobj = array_to_tuple(resultobj, arg2, sz);
    if (chk) FREE(*arg2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ExistAbstract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_ExistAbstract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ExistAbstract" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_ExistAbstract" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_ExistAbstract(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_XorExistAbstract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_XorExistAbstract",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_XorExistAbstract" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_XorExistAbstract" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_XorExistAbstract" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (DdNode *)DdNode_XorExistAbstract(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_UnivAbstract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_UnivAbstract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_UnivAbstract" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_UnivAbstract" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_UnivAbstract(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_BooleanDiff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_BooleanDiff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_BooleanDiff" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_BooleanDiff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdNode_BooleanDiff(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_AndAbstract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_AndAbstract",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_AndAbstract" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_AndAbstract" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_AndAbstract" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (DdNode *)DdNode_AndAbstract(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_VarIsDependent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_VarIsDependent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_VarIsDependent" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_VarIsDependent" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (int)DdNode_VarIsDependent(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Correlation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Correlation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Correlation" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Correlation" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (double)DdNode_Correlation(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_CorrelationWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DoubleArray *arg3 = (DoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_CorrelationWeights",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_CorrelationWeights" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_CorrelationWeights" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_CorrelationWeights" "', argument " "3"" of type '" "DoubleArray *""'"); 
  }
  arg3 = reinterpret_cast< DoubleArray * >(argp3);
  result = (double)DdNode_CorrelationWeights(arg1,arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Ite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_Ite",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Ite" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Ite" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_Ite" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (DdNode *)DdNode_Ite(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_IteConstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_IteConstant",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_IteConstant" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_IteConstant" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_IteConstant" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (DdNode *)DdNode_IteConstant(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Intersect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Intersect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Intersect" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Intersect" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Intersect(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_FIntersect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_FIntersect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_FIntersect" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_FIntersect" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (int)DdNode_FIntersect(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_And(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_And",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_And" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_And" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_And(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Or(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Or",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Or" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Or" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Or(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Nand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Nand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Nand" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Nand" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Nand(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Nor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Nor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Nor" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Nor" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Nor(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Xor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Xor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Xor" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Xor" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Xor(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Xnor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Xnor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Xnor" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Xnor" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Xnor(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ClippingAnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_ClippingAnd",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ClippingAnd" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_ClippingAnd" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_ClippingAnd" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_ClippingAnd" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdNode_ClippingAnd(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ClippingAndAbstract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdNode_ClippingAndAbstract",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ClippingAndAbstract" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_ClippingAndAbstract" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_ClippingAndAbstract" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_ClippingAndAbstract" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DdNode_ClippingAndAbstract" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (DdNode *)DdNode_ClippingAndAbstract(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_LICompaction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_LICompaction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_LICompaction" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_LICompaction" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_LICompaction(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Squeeze(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Squeeze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Squeeze" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Squeeze" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Squeeze(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Minimize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Minimize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Minimize" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Minimize" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Minimize(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Constrain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Constrain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Constrain" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Constrain" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Constrain(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Restrict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Restrict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Restrict" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Restrict" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Restrict(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_PickOneCube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_PickOneCube",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_PickOneCube" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_PickOneCube" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)DdNode_PickOneCube(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_PickOneMinterm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_PickOneMinterm",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_PickOneMinterm" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_PickOneMinterm" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_PickOneMinterm" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)DdNode_PickOneMinterm(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_PickArbitraryMinterms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_PickArbitraryMinterms",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_PickArbitraryMinterms" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_PickArbitraryMinterms" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_PickArbitraryMinterms" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_PickArbitraryMinterms" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdArray *)DdNode_PickArbitraryMinterms(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Compose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_Compose",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Compose" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Compose" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_Compose" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)DdNode_Compose(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Permute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Permute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Permute" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Permute" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  result = (DdNode *)DdNode_Permute(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_VarMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_VarMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_VarMap" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_VarMap(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_LiteralSetIntersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_LiteralSetIntersection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_LiteralSetIntersection" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_LiteralSetIntersection" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_LiteralSetIntersection(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_IsVarEssential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_IsVarEssential",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_IsVarEssential" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_IsVarEssential" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_IsVarEssential" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdNode_IsVarEssential(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Leq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Leq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Leq" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Leq" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (bool)DdNode_Leq(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_CharToVect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_CharToVect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_CharToVect" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdArray *)DdNode_CharToVect(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ConstrainDecomp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_ConstrainDecomp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ConstrainDecomp" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdArray *)DdNode_ConstrainDecomp(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Isop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Isop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Isop" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Isop" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Isop(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SwapVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_SwapVariables",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SwapVariables" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_SwapVariables" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_SwapVariables" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_SwapVariables" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdNode_SwapVariables(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_AdjPermuteX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_AdjPermuteX",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_AdjPermuteX" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_AdjPermuteX" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_AdjPermuteX" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)DdNode_AdjPermuteX(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_VectorCompose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_VectorCompose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_VectorCompose" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_VectorCompose" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  result = (DdNode *)DdNode_VectorCompose(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SetBackground(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_SetBackground",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SetBackground" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  DdNode_SetBackground(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_UnderApprox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdNode_UnderApprox",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_UnderApprox" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_UnderApprox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_UnderApprox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_UnderApprox" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DdNode_UnderApprox" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (DdNode *)DdNode_UnderApprox(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_OverApprox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DdNode_OverApprox",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_OverApprox" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_OverApprox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_OverApprox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_OverApprox" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DdNode_OverApprox" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (DdNode *)DdNode_OverApprox(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_RemapUnderApprox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_RemapUnderApprox",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_RemapUnderApprox" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_RemapUnderApprox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_RemapUnderApprox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_RemapUnderApprox" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (DdNode *)DdNode_RemapUnderApprox(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_RemapOverApprox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_RemapOverApprox",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_RemapOverApprox" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_RemapOverApprox" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_RemapOverApprox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_RemapOverApprox" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (DdNode *)DdNode_RemapOverApprox(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_BiasedUnderApprox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DdNode_BiasedUnderApprox",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_BiasedUnderApprox" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_BiasedUnderApprox" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_BiasedUnderApprox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_BiasedUnderApprox" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DdNode_BiasedUnderApprox" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DdNode_BiasedUnderApprox" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  result = (DdNode *)DdNode_BiasedUnderApprox(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_BiasedOverApprox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DdNode_BiasedOverApprox",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_BiasedOverApprox" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_BiasedOverApprox" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_BiasedOverApprox" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_BiasedOverApprox" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DdNode_BiasedOverApprox" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DdNode_BiasedOverApprox" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  result = (DdNode *)DdNode_BiasedOverApprox(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Cofactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Cofactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Cofactor" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Cofactor" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_Cofactor(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_FindEssential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_FindEssential",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_FindEssential" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_FindEssential(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SubsetCompress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_SubsetCompress",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SubsetCompress" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_SubsetCompress" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_SubsetCompress" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)DdNode_SubsetCompress(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SupersetCompress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_SupersetCompress",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SupersetCompress" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_SupersetCompress" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_SupersetCompress" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)DdNode_SupersetCompress(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_CProjection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_CProjection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_CProjection" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_CProjection" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_CProjection(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_MinHammingDist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_MinHammingDist",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_MinHammingDist" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_MinHammingDist" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_MinHammingDist" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdNode_MinHammingDist(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Eval" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Eval" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  result = (DdNode *)DdNode_Eval(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ShortestPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  IntArray *arg3 = (IntArray *) 0 ;
  IntArray *arg4 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_ShortestPath",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ShortestPath" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_ShortestPath" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_ShortestPath" "', argument " "3"" of type '" "IntArray *""'"); 
  }
  arg3 = reinterpret_cast< IntArray * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdNode_ShortestPath" "', argument " "4"" of type '" "IntArray *""'"); 
  }
  arg4 = reinterpret_cast< IntArray * >(argp4);
  result = (DdNode *)DdNode_ShortestPath(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_LargestCube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_LargestCube",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_LargestCube" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_LargestCube" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  result = (DdNode *)DdNode_LargestCube(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ShortestLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_ShortestLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ShortestLength" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_ShortestLength" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  result = (int)DdNode_ShortestLength(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Decreasing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Decreasing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Decreasing" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_Decreasing" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdNode_Decreasing(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Increasing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Increasing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Increasing" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_Increasing" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdNode_Increasing(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_EquivDC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_EquivDC",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_EquivDC" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_EquivDC" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_EquivDC" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (int)DdNode_EquivDC(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_EqualSupNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  CUDD_VALUE_TYPE arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_EqualSupNorm",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_EqualSupNorm" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_EqualSupNorm" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CUDD_VALUE_TYPE,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_EqualSupNorm" "', argument " "3"" of type '" "CUDD_VALUE_TYPE""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DdNode_EqualSupNorm" "', argument " "3"" of type '" "CUDD_VALUE_TYPE""'");
    } else {
      CUDD_VALUE_TYPE * temp = reinterpret_cast< CUDD_VALUE_TYPE * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_EqualSupNorm" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (int)DdNode_EqualSupNorm(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_CofMinterm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DoubleArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_CofMinterm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_CofMinterm" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DoubleArray *)DdNode_CofMinterm(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DoubleArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_VerifySol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  IntArray *arg3 = (IntArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_VerifySol",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_VerifySol" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_VerifySol" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_VerifySol" "', argument " "3"" of type '" "IntArray *""'"); 
  }
  arg3 = reinterpret_cast< IntArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_VerifySol" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdNode_VerifySol(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SplitSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_SplitSet",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SplitSet" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_SplitSet" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_SplitSet" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_SplitSet" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (DdNode *)DdNode_SplitSet(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SubsetHeavyBranch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_SubsetHeavyBranch",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SubsetHeavyBranch" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_SubsetHeavyBranch" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_SubsetHeavyBranch" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)DdNode_SubsetHeavyBranch(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SupersetHeavyBranch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_SupersetHeavyBranch",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SupersetHeavyBranch" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_SupersetHeavyBranch" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_SupersetHeavyBranch" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)DdNode_SupersetHeavyBranch(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SubsetShortPaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_SubsetShortPaths",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SubsetShortPaths" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_SubsetShortPaths" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_SubsetShortPaths" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_SubsetShortPaths" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdNode_SubsetShortPaths(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SupersetShortPaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_SupersetShortPaths",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SupersetShortPaths" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_SupersetShortPaths" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_SupersetShortPaths" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_SupersetShortPaths" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdNode_SupersetShortPaths(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_BddToCubeArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_BddToCubeArray",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_BddToCubeArray" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_BddToCubeArray" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  result = (int)DdNode_BddToCubeArray(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_PrintMinterm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_PrintMinterm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_PrintMinterm" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_PrintMinterm(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_PrintDebug(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_PrintDebug",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_PrintDebug" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_PrintDebug" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_PrintDebug" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdNode_PrintDebug(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_EstimateCofactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_EstimateCofactor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_EstimateCofactor" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_EstimateCofactor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_EstimateCofactor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdNode_EstimateCofactor(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_CountMinterm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_CountMinterm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_CountMinterm" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_CountMinterm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)DdNode_CountMinterm(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Support(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_Support",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Support" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_Support(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SupportSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_SupportSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SupportSize" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_SupportSize(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Density(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_Density",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Density" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_Density" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)DdNode_Density(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_NodeReadIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_NodeReadIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_NodeReadIndex" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_NodeReadIndex(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_IsNonConstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_IsNonConstant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_IsNonConstant" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_IsNonConstant(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_DagSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_DagSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_DagSize" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_DagSize(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_EstimateCofactorSimple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_EstimateCofactorSimple",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_EstimateCofactorSimple" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_EstimateCofactorSimple" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdNode_EstimateCofactorSimple(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_CountPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_CountPath",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_CountPath" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (double)DdNode_CountPath(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_CountLeaves(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_CountLeaves",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_CountLeaves" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_CountLeaves(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_BddStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  IntArray *arg4 = (IntArray *) 0 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  FILE *arg8 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:DdNode_BddStore",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_BddStore" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_BddStore" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_BddStore" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DdNode_BddStore" "', argument " "4"" of type '" "IntArray *""'"); 
  }
  arg4 = reinterpret_cast< IntArray * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DdNode_BddStore" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DdNode_BddStore" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_AsCharPtrAndSize(obj6, &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "DdNode_BddStore" "', argument " "7"" of type '" "char *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    if ( PyFile_Check(obj7) ){
      arg8 = PyFile_AsFile(obj7);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  result = (int)DdNode_BddStore(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_IsConstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_IsConstant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_IsConstant" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_IsConstant(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Not(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_Not",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Not" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_Not(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_NotCond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_NotCond",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_NotCond" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_NotCond" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdNode_NotCond(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Regular(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_Regular",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Regular" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_Regular(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Complement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_Complement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Complement" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_Complement(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_IsComplement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_IsComplement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_IsComplement" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_IsComplement(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_T(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_T",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_T" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_T(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_E(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_E",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_E" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_E(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_V(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_V",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_V" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (double)DdNode_V(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ReadIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_ReadIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ReadIndex" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_ReadIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)DdNode_ReadIndex(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addExistAbstract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addExistAbstract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addExistAbstract" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addExistAbstract" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_addExistAbstract(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addUnivAbstract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addUnivAbstract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addUnivAbstract" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addUnivAbstract" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_addUnivAbstract(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addOrAbstract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addOrAbstract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addOrAbstract" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addOrAbstract" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_addOrAbstract(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addFindMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_addFindMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addFindMax" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_addFindMax(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addFindMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_addFindMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addFindMin" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_addFindMin(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addIthBit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addIthBit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addIthBit" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_addIthBit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdNode_addIthBit(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addScalarInverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addScalarInverse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addScalarInverse" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addScalarInverse" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_addScalarInverse(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addIte(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_addIte",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addIte" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addIte" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_addIte" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (DdNode *)DdNode_addIte(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addIteConstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_addIteConstant",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addIteConstant" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addIteConstant" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_addIteConstant" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (DdNode *)DdNode_addIteConstant(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addEvalConst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addEvalConst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addEvalConst" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addEvalConst" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_addEvalConst(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addLeq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addLeq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addLeq" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addLeq" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (int)DdNode_addLeq(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addCmpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_addCmpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addCmpl" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_addCmpl(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addNegate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_addNegate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addNegate" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_addNegate(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addRoundOff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addRoundOff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addRoundOff" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_addRoundOff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdNode_addRoundOff(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addCompose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_addCompose",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addCompose" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addCompose" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_addCompose" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (DdNode *)DdNode_addCompose(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addPermute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  IntArray *arg2 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addPermute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addPermute" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addPermute" "', argument " "2"" of type '" "IntArray *""'"); 
  }
  arg2 = reinterpret_cast< IntArray * >(argp2);
  result = (DdNode *)DdNode_addPermute(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addConstrain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addConstrain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addConstrain" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addConstrain" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_addConstrain(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addRestrict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addRestrict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addRestrict" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addRestrict" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_addRestrict(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addMatrixMultiply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_addMatrixMultiply",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addMatrixMultiply" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addMatrixMultiply" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_addMatrixMultiply" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_addMatrixMultiply" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdNode_addMatrixMultiply(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addTimesPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_addTimesPlus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addTimesPlus" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addTimesPlus" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_addTimesPlus" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_addTimesPlus" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdNode_addTimesPlus(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addTriangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_addTriangle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addTriangle" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addTriangle" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_addTriangle" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_addTriangle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdNode_addTriangle(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addVectorCompose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addVectorCompose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addVectorCompose" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addVectorCompose" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  result = (DdNode *)DdNode_addVectorCompose(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addNonSimCompose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_addNonSimCompose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addNonSimCompose" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addNonSimCompose" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  result = (DdNode *)DdNode_addNonSimCompose(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_addSwapVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdArray *arg2 = (DdArray *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_addSwapVariables",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_addSwapVariables" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_addSwapVariables" "', argument " "2"" of type '" "DdArray *""'"); 
  }
  arg2 = reinterpret_cast< DdArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_addSwapVariables" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_addSwapVariables" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (DdNode *)DdNode_addSwapVariables(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddProduct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddProduct" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddProduct" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_zddProduct(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddUnateProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddUnateProduct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddUnateProduct" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddUnateProduct" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_zddUnateProduct(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddWeakDiv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddWeakDiv",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddWeakDiv" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddWeakDiv" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_zddWeakDiv(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddDivide(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddDivide",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddDivide" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddDivide" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_zddDivide(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddWeakDivF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddWeakDivF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddWeakDivF" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddWeakDivF" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_zddWeakDivF(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddDivideF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddDivideF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddDivideF" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddDivideF" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_zddDivideF(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddComplement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_zddComplement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddComplement" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode_zddComplement(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddIte(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdNode *arg3 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_zddIte",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddIte" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddIte" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_zddIte" "', argument " "3"" of type '" "DdNode *""'"); 
  }
  arg3 = reinterpret_cast< DdNode * >(argp3);
  result = (DdNode *)DdNode_zddIte(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddUnion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddUnion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddUnion" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddUnion" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_zddUnion(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddIntersect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddIntersect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddIntersect" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddIntersect" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_zddIntersect(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddDiff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddDiff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddDiff" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddDiff" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_zddDiff(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddDiffConst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddDiffConst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddDiffConst" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddDiffConst" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode_zddDiffConst(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddSubset1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddSubset1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddSubset1" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_zddSubset1" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdNode_zddSubset1(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddSubset0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddSubset0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddSubset0" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_zddSubset0" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdNode_zddSubset0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddChange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddChange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddChange" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_zddChange" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (DdNode *)DdNode_zddChange(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_zddCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddCount" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_zddCount(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddCountDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_zddCountDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddCountDouble" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (double)DdNode_zddCountDouble(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddPrintMinterm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_zddPrintMinterm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddPrintMinterm" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_zddPrintMinterm(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddPrintCover(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_zddPrintCover",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddPrintCover" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_zddPrintCover(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddPrintDebug(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_zddPrintDebug",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddPrintDebug" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_zddPrintDebug" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_zddPrintDebug" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdNode_zddPrintDebug(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddCountMinterm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddCountMinterm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddCountMinterm" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_zddCountMinterm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)DdNode_zddCountMinterm(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddIsop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  DdArray *arg3 = (DdArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_zddIsop",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddIsop" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddIsop" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_DdArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_zddIsop" "', argument " "3"" of type '" "DdArray *""'"); 
  }
  arg3 = reinterpret_cast< DdArray * >(argp3);
  result = (DdNode *)DdNode_zddIsop(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_zddDagSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode_zddDagSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_zddDagSize" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_zddDagSize" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (int)DdNode_zddDagSize(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ApaPrintMinterm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_ApaPrintMinterm",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ApaPrintMinterm" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  {
    if ( PyFile_Check(obj1) ){
      arg2 = PyFile_AsFile(obj1);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_ApaPrintMinterm" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdNode_ApaPrintMinterm(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ApaPrintMintermExp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_ApaPrintMintermExp",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ApaPrintMintermExp" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  {
    if ( PyFile_Check(obj1) ){
      arg2 = PyFile_AsFile(obj1);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_ApaPrintMintermExp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_ApaPrintMintermExp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (int)DdNode_ApaPrintMintermExp(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ApaPrintDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_ApaPrintDensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ApaPrintDensity" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  {
    if ( PyFile_Check(obj1) ){
      arg2 = PyFile_AsFile(obj1);
    } else {
      PyErr_SetString(PyExc_TypeError, "fp must be a file type.");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_ApaPrintDensity" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)DdNode_ApaPrintDensity(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_ApaCountMinterm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  int arg2 ;
  IntArray *arg3 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DdApaNumber result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DdNode_ApaCountMinterm",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_ApaCountMinterm" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DdNode_ApaCountMinterm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DdNode_ApaCountMinterm" "', argument " "3"" of type '" "IntArray *""'"); 
  }
  arg3 = reinterpret_cast< IntArray * >(argp3);
  result = DdNode_ApaCountMinterm(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new DdApaNumber(static_cast< const DdApaNumber& >(result))), SWIGTYPE_p_DdApaNumber, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode___hash__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___hash__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode___hash__(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___int__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode___int__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___int__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode___int__(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___and__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___and__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___and__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___and__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode___and__(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___or__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___or__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___or__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___or__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode___or__(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___xor__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___xor__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___xor__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___xor__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode___xor__(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___invert__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode___invert__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___invert__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdNode *)DdNode___invert__(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___rshift__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___rshift__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___rshift__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode___rshift__(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___cmp__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___cmp__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___cmp__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (bool)DdNode___cmp__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___sub__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___sub__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode___sub__(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___add__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___add__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (DdNode *)DdNode___add__(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___lt__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___lt__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (bool)DdNode___lt__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___le__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___le__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (bool)DdNode___le__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___eq__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___eq__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (bool)DdNode___eq__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___ne__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___ne__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (bool)DdNode___ne__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___gt__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___gt__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (bool)DdNode___gt__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DdNode___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___ge__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode___ge__" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (bool)DdNode___ge__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___nonzero__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (bool)DdNode___nonzero__(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode___len__" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode___len__(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_SizeOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_SizeOf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_SizeOf" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_SizeOf(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DdNode_Show",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Show" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DdNode_Show" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DdNode_Show" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DdNode_Show" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  DdNode_Show(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_Empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Empty" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (bool)DdNode_Empty(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_DumpDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_DumpDot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_DumpDot" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_DumpDot(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_DumpBlif(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_DumpBlif",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_DumpBlif" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (int)DdNode_DumpBlif(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DdNode_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DdNode_Vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DdNode_Vector" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  result = (DdArray *)DdNode_Vector(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DdNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DdNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NodePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DdNode *arg1 = (DdNode *) 0 ;
  DdNode *arg2 = (DdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NodePair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NodePair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodePair" "', argument " "1"" of type '" "DdNode *""'"); 
  }
  arg1 = reinterpret_cast< DdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NodePair" "', argument " "2"" of type '" "DdNode *""'"); 
  }
  arg2 = reinterpret_cast< DdNode * >(argp2);
  result = (NodePair *)new_NodePair(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NodePair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NodePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NodePair *arg1 = (NodePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NodePair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NodePair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NodePair" "', argument " "1"" of type '" "NodePair *""'"); 
  }
  arg1 = reinterpret_cast< NodePair * >(argp1);
  delete_NodePair(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePair_LOWER(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NodePair *arg1 = (NodePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePair_LOWER",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NodePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePair_LOWER" "', argument " "1"" of type '" "NodePair *""'"); 
  }
  arg1 = reinterpret_cast< NodePair * >(argp1);
  result = (DdNode *)NodePair_LOWER(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePair_UPPER(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NodePair *arg1 = (NodePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePair_UPPER",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NodePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePair_UPPER" "', argument " "1"" of type '" "NodePair *""'"); 
  }
  arg1 = reinterpret_cast< NodePair * >(argp1);
  result = (DdNode *)NodePair_UPPER(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DdNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePair_FirstPrime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NodePair *arg1 = (NodePair *) 0 ;
  DdGen *arg2 = (DdGen *) 0 ;
  int **arg3 = (int **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  {
    arg3 = cube_iter;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePair_FirstPrime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NodePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePair_FirstPrime" "', argument " "1"" of type '" "NodePair *""'"); 
  }
  arg1 = reinterpret_cast< NodePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdGen, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodePair_FirstPrime" "', argument " "2"" of type '" "DdGen *""'"); 
  }
  arg2 = reinterpret_cast< DdGen * >(argp2);
  result = (int)NodePair_FirstPrime(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int sz = Cudd_ReadSize(mgr);
    resultobj = array_to_tuple(resultobj, arg3, sz);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePair_NextPrime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NodePair *arg1 = (NodePair *) 0 ;
  DdGen *arg2 = (DdGen *) 0 ;
  int **arg3 = (int **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  {
    arg3 = cube_iter;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePair_NextPrime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NodePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePair_NextPrime" "', argument " "1"" of type '" "NodePair *""'"); 
  }
  arg1 = reinterpret_cast< NodePair * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DdGen, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodePair_NextPrime" "', argument " "2"" of type '" "DdGen *""'"); 
  }
  arg2 = reinterpret_cast< DdGen * >(argp2);
  result = (int)NodePair_NextPrime(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    int sz = Cudd_ReadSize(mgr);
    resultobj = array_to_tuple(resultobj, arg3, sz);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NodePair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NodePair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"new_RangeError", _wrap_new_RangeError, METH_VARARGS, (char *)"new_RangeError() -> RangeError"},
	 { (char *)"delete_RangeError", _wrap_delete_RangeError, METH_VARARGS, (char *)"delete_RangeError(RangeError self)"},
	 { (char *)"RangeError_swigregister", RangeError_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntArray_vec_set", _wrap_IntArray_vec_set, METH_VARARGS, (char *)"IntArray_vec_set(IntArray self, int * vec)"},
	 { (char *)"IntArray_vec_get", _wrap_IntArray_vec_get, METH_VARARGS, (char *)"IntArray_vec_get(IntArray self) -> int *"},
	 { (char *)"new_IntArray", _wrap_new_IntArray, METH_VARARGS, (char *)"new_IntArray(int size) -> IntArray"},
	 { (char *)"delete_IntArray", _wrap_delete_IntArray, METH_VARARGS, (char *)"delete_IntArray(IntArray self)"},
	 { (char *)"IntArray_AssignVect", _wrap_IntArray_AssignVect, METH_VARARGS, (char *)"IntArray_AssignVect(IntArray self, int * str, int size)"},
	 { (char *)"IntArray_AssignComplVect", _wrap_IntArray_AssignComplVect, METH_VARARGS, (char *)"IntArray_AssignComplVect(IntArray self, int * str, int size, int univ)"},
	 { (char *)"IntArray_ArrayAddress", _wrap_IntArray_ArrayAddress, METH_VARARGS, (char *)"IntArray_ArrayAddress(IntArray self) -> int **"},
	 { (char *)"IntArray___getitem__", _wrap_IntArray___getitem__, METH_VARARGS, (char *)"IntArray___getitem__(IntArray self, int j) -> int"},
	 { (char *)"IntArray___setitem__", _wrap_IntArray___setitem__, METH_VARARGS, (char *)"IntArray___setitem__(IntArray self, int j, int val)"},
	 { (char *)"IntArray___len__", _wrap_IntArray___len__, METH_VARARGS, (char *)"IntArray___len__(IntArray self) -> int"},
	 { (char *)"IntArray_Assign", _wrap_IntArray_Assign, METH_VARARGS, (char *)"IntArray_Assign(IntArray self, int * list, int k)"},
	 { (char *)"IntArray_Swap", _wrap_IntArray_Swap, METH_VARARGS, (char *)"IntArray_Swap(IntArray self, int i, int j)"},
	 { (char *)"IntArray_swigregister", IntArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"StringArray_vec_set", _wrap_StringArray_vec_set, METH_VARARGS, (char *)"StringArray_vec_set(StringArray self, char ** vec)"},
	 { (char *)"StringArray_vec_get", _wrap_StringArray_vec_get, METH_VARARGS, (char *)"StringArray_vec_get(StringArray self) -> char **"},
	 { (char *)"new_StringArray", _wrap_new_StringArray, METH_VARARGS, (char *)"new_StringArray(int size) -> StringArray"},
	 { (char *)"delete_StringArray", _wrap_delete_StringArray, METH_VARARGS, (char *)"delete_StringArray(StringArray self)"},
	 { (char *)"StringArray_ArrayAddress", _wrap_StringArray_ArrayAddress, METH_VARARGS, (char *)"StringArray_ArrayAddress(StringArray self) -> char ***"},
	 { (char *)"StringArray___getitem__", _wrap_StringArray___getitem__, METH_VARARGS, (char *)"StringArray___getitem__(StringArray self, int j) -> char *"},
	 { (char *)"StringArray___setitem__", _wrap_StringArray___setitem__, METH_VARARGS, (char *)"StringArray___setitem__(StringArray self, int j, char * val)"},
	 { (char *)"StringArray___len__", _wrap_StringArray___len__, METH_VARARGS, (char *)"StringArray___len__(StringArray self) -> int"},
	 { (char *)"StringArray_Assign", _wrap_StringArray_Assign, METH_VARARGS, (char *)"StringArray_Assign(StringArray self, char ** list, int k)"},
	 { (char *)"StringArray_Swap", _wrap_StringArray_Swap, METH_VARARGS, (char *)"StringArray_Swap(StringArray self, int i, int j)"},
	 { (char *)"StringArray_swigregister", StringArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"DoubleArray_vec_set", _wrap_DoubleArray_vec_set, METH_VARARGS, (char *)"DoubleArray_vec_set(DoubleArray self, double * vec)"},
	 { (char *)"DoubleArray_vec_get", _wrap_DoubleArray_vec_get, METH_VARARGS, (char *)"DoubleArray_vec_get(DoubleArray self) -> double *"},
	 { (char *)"new_DoubleArray", _wrap_new_DoubleArray, METH_VARARGS, (char *)"new_DoubleArray(int size) -> DoubleArray"},
	 { (char *)"delete_DoubleArray", _wrap_delete_DoubleArray, METH_VARARGS, (char *)"delete_DoubleArray(DoubleArray self)"},
	 { (char *)"DoubleArray___getitem__", _wrap_DoubleArray___getitem__, METH_VARARGS, (char *)"DoubleArray___getitem__(DoubleArray self, int j) -> double"},
	 { (char *)"DoubleArray___setitem__", _wrap_DoubleArray___setitem__, METH_VARARGS, (char *)"DoubleArray___setitem__(DoubleArray self, int j, double val)"},
	 { (char *)"DoubleArray_Assign", _wrap_DoubleArray_Assign, METH_VARARGS, (char *)"DoubleArray_Assign(DoubleArray self, double * list, int k)"},
	 { (char *)"DoubleArray_Swap", _wrap_DoubleArray_Swap, METH_VARARGS, (char *)"DoubleArray_Swap(DoubleArray self, int i, int j)"},
	 { (char *)"DoubleArray_swigregister", DoubleArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"DdArray_sz_set", _wrap_DdArray_sz_set, METH_VARARGS, (char *)"DdArray_sz_set(DdArray self, int sz)"},
	 { (char *)"DdArray_sz_get", _wrap_DdArray_sz_get, METH_VARARGS, (char *)"DdArray_sz_get(DdArray self) -> int"},
	 { (char *)"DdArray_vec_set", _wrap_DdArray_vec_set, METH_VARARGS, (char *)"DdArray_vec_set(DdArray self, DdNode ** vec)"},
	 { (char *)"DdArray_vec_get", _wrap_DdArray_vec_get, METH_VARARGS, (char *)"DdArray_vec_get(DdArray self) -> DdNode **"},
	 { (char *)"new_DdArray", _wrap_new_DdArray, METH_VARARGS, (char *)"new_DdArray(int size) -> DdArray"},
	 { (char *)"delete_DdArray", _wrap_delete_DdArray, METH_VARARGS, (char *)"delete_DdArray(DdArray self)"},
	 { (char *)"DdArray___getitem__", _wrap_DdArray___getitem__, METH_VARARGS, (char *)"DdArray___getitem__(DdArray self, int j) -> DdNode"},
	 { (char *)"DdArray___setitem__", _wrap_DdArray___setitem__, METH_VARARGS, (char *)"DdArray___setitem__(DdArray self, int j, DdNode val)"},
	 { (char *)"DdArray___len__", _wrap_DdArray___len__, METH_VARARGS, (char *)"DdArray___len__(DdArray self) -> int"},
	 { (char *)"DdArray_Swap", _wrap_DdArray_Swap, METH_VARARGS, (char *)"DdArray_Swap(DdArray self, int i, int j)"},
	 { (char *)"DdArray_Pop", _wrap_DdArray_Pop, METH_VARARGS, (char *)"DdArray_Pop(DdArray self) -> DdNode"},
	 { (char *)"DdArray_And", _wrap_DdArray_And, METH_VARARGS, (char *)"DdArray_And(DdArray self) -> DdNode"},
	 { (char *)"DdArray_Or", _wrap_DdArray_Or, METH_VARARGS, (char *)"DdArray_Or(DdArray self) -> DdNode"},
	 { (char *)"DdArray_AtLeastN", _wrap_DdArray_AtLeastN, METH_VARARGS, (char *)"DdArray_AtLeastN(DdArray self, int n) -> DdNode"},
	 { (char *)"DdArray_ExactlyN", _wrap_DdArray_ExactlyN, METH_VARARGS, (char *)"DdArray_ExactlyN(DdArray self, int n) -> DdNode"},
	 { (char *)"DdArray_UpToN", _wrap_DdArray_UpToN, METH_VARARGS, (char *)"DdArray_UpToN(DdArray self, int n) -> DdNode"},
	 { (char *)"DdArray_Constraint", _wrap_DdArray_Constraint, METH_VARARGS, (char *)"DdArray_Constraint(DdArray self, int low, int high) -> DdNode"},
	 { (char *)"DdArray_Compose", _wrap_DdArray_Compose, METH_VARARGS, (char *)"DdArray_Compose(DdArray self, DdNode term) -> DdNode"},
	 { (char *)"DdArray_Assign", _wrap_DdArray_Assign, METH_VARARGS, (char *)"DdArray_Assign(DdArray self, DdNode ** list, int k)"},
	 { (char *)"DdArray_Push", _wrap_DdArray_Push, METH_VARARGS, (char *)"DdArray_Push(DdArray self, DdNode val)"},
	 { (char *)"DdArray_SwapNodes", _wrap_DdArray_SwapNodes, METH_VARARGS, (char *)"DdArray_SwapNodes(DdArray self, int i, int j)"},
	 { (char *)"DdArray_Fill", _wrap_DdArray_Fill, METH_VARARGS, (char *)"DdArray_Fill(DdArray self, int offset, int mod)"},
	 { (char *)"DdArray_FillWithIntArray", _wrap_DdArray_FillWithIntArray, METH_VARARGS, (char *)"DdArray_FillWithIntArray(DdArray self, IntArray t)"},
	 { (char *)"DdArray_OrderVector", _wrap_DdArray_OrderVector, METH_VARARGS, (char *)"DdArray_OrderVector(DdArray self, int left, int right)"},
	 { (char *)"DdArray_SupportVector", _wrap_DdArray_SupportVector, METH_VARARGS, (char *)"DdArray_SupportVector(DdArray self, DdNode term)"},
	 { (char *)"DdArray_SetVarMap", _wrap_DdArray_SetVarMap, METH_VARARGS, (char *)"DdArray_SetVarMap(DdArray self, DdArray other) -> int"},
	 { (char *)"DdArray_VectorSupport", _wrap_DdArray_VectorSupport, METH_VARARGS, (char *)"DdArray_VectorSupport(DdArray self) -> DdNode"},
	 { (char *)"DdArray_VectorSupportIndex", _wrap_DdArray_VectorSupportIndex, METH_VARARGS, (char *)"DdArray_VectorSupportIndex(DdArray self) -> int"},
	 { (char *)"DdArray_PickOneMinterm", _wrap_DdArray_PickOneMinterm, METH_VARARGS, (char *)"DdArray_PickOneMinterm(DdArray self, DdNode term) -> DdNode"},
	 { (char *)"DdArray_HoldTR", _wrap_DdArray_HoldTR, METH_VARARGS, (char *)"DdArray_HoldTR(DdArray self, DdArray other) -> DdNode"},
	 { (char *)"DdArray_Find", _wrap_DdArray_Find, METH_VARARGS, (char *)"DdArray_Find(DdArray self, DdNode term) -> int"},
	 { (char *)"DdArray_Save", _wrap_DdArray_Save, METH_VARARGS, (char *)"DdArray_Save(DdArray self, char * filename) -> int"},
	 { (char *)"DdArray_SaveText", _wrap_DdArray_SaveText, METH_VARARGS, (char *)"DdArray_SaveText(DdArray self, char * filename) -> int"},
	 { (char *)"DdArray_Load", _wrap_DdArray_Load, METH_VARARGS, (char *)"DdArray_Load(DdArray self, char * filename) -> int"},
	 { (char *)"DdArray_LoadText", _wrap_DdArray_LoadText, METH_VARARGS, (char *)"DdArray_LoadText(DdArray self, char * filename) -> int"},
	 { (char *)"DdArray_ArrayLoad", _wrap_DdArray_ArrayLoad, METH_VARARGS, (char *)"\n"
		"ArrayLoad(int rootmatchmode, StringArray rootmatchnames, int varmatchmode, StringArray varmatchnames, \n"
		"    IntArray varmatchauxids, IntArray varcomposeids, int mode, char * filename, \n"
		"    FILE * fp=None) -> int\n"
		"DdArray_ArrayLoad(DdArray self, int rootmatchmode, StringArray rootmatchnames, int varmatchmode, StringArray varmatchnames, \n"
		"    IntArray varmatchauxids, IntArray varcomposeids, int mode, \n"
		"    char * filename) -> int\n"
		""},
	 { (char *)"DdArray_ArrayStore", _wrap_DdArray_ArrayStore, METH_VARARGS, (char *)"\n"
		"ArrayStore(char * ddname, StringArray rootnames, StringArray varnames, IntArray auxids, int mode, \n"
		"    int varinfo, char * filename, FILE * fp=None) -> int\n"
		"DdArray_ArrayStore(DdArray self, char * ddname, StringArray rootnames, StringArray varnames, IntArray auxids, \n"
		"    int mode, int varinfo, char * filename) -> int\n"
		""},
	 { (char *)"DdArray_swigregister", DdArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MtrNode", _wrap_new_MtrNode, METH_VARARGS, (char *)"new_MtrNode() -> MtrNode"},
	 { (char *)"delete_MtrNode", _wrap_delete_MtrNode, METH_VARARGS, (char *)"delete_MtrNode(MtrNode self)"},
	 { (char *)"MtrNode_swigregister", MtrNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DdTlcInfo", _wrap_new_DdTlcInfo, METH_VARARGS, (char *)"new_DdTlcInfo() -> DdTlcInfo"},
	 { (char *)"delete_DdTlcInfo", _wrap_delete_DdTlcInfo, METH_VARARGS, (char *)"delete_DdTlcInfo(DdTlcInfo self)"},
	 { (char *)"DdTlcInfo_ReadIthClause", _wrap_DdTlcInfo_ReadIthClause, METH_VARARGS, (char *)"DdTlcInfo_ReadIthClause(DdTlcInfo self, int i) -> int"},
	 { (char *)"DdTlcInfo_swigregister", DdTlcInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EpDouble", _wrap_new_EpDouble, METH_VARARGS, (char *)"\n"
		"EpDouble()\n"
		"EpDouble(double value)\n"
		"new_EpDouble(EpDouble value) -> EpDouble\n"
		""},
	 { (char *)"delete_EpDouble", _wrap_delete_EpDouble, METH_VARARGS, (char *)"delete_EpDouble(EpDouble self)"},
	 { (char *)"EpDouble_EpdConvert", _wrap_EpDouble_EpdConvert, METH_VARARGS, (char *)"EpDouble_EpdConvert(EpDouble self, double value)"},
	 { (char *)"EpDouble_EpdNormalize", _wrap_EpDouble_EpdNormalize, METH_VARARGS, (char *)"EpDouble_EpdNormalize(EpDouble self)"},
	 { (char *)"EpDouble_EpdNormalizeDecimal", _wrap_EpDouble_EpdNormalizeDecimal, METH_VARARGS, (char *)"EpDouble_EpdNormalizeDecimal(EpDouble self)"},
	 { (char *)"EpDouble_EpdMakeInf", _wrap_EpDouble_EpdMakeInf, METH_VARARGS, (char *)"EpDouble_EpdMakeInf(EpDouble self, int sign)"},
	 { (char *)"EpDouble_EpdMakeZero", _wrap_EpDouble_EpdMakeZero, METH_VARARGS, (char *)"EpDouble_EpdMakeZero(EpDouble self, int sign)"},
	 { (char *)"EpDouble_EpdMakeNan", _wrap_EpDouble_EpdMakeNan, METH_VARARGS, (char *)"EpDouble_EpdMakeNan(EpDouble self)"},
	 { (char *)"EpDouble_EpdCopy", _wrap_EpDouble_EpdCopy, METH_VARARGS, (char *)"EpDouble_EpdCopy(EpDouble self, EpDouble to)"},
	 { (char *)"EpDouble_EpdGetValueAndDecimalExponent", _wrap_EpDouble_EpdGetValueAndDecimalExponent, METH_VARARGS, (char *)"EpDouble_EpdGetValueAndDecimalExponent(EpDouble self)"},
	 { (char *)"EpDouble_EpdMultiply", _wrap_EpDouble_EpdMultiply, METH_VARARGS, (char *)"EpDouble_EpdMultiply(EpDouble self, double value)"},
	 { (char *)"EpDouble_EpdMultiply2", _wrap_EpDouble_EpdMultiply2, METH_VARARGS, (char *)"EpDouble_EpdMultiply2(EpDouble self, EpDouble epd2)"},
	 { (char *)"EpDouble_EpdMultiply2Decimal", _wrap_EpDouble_EpdMultiply2Decimal, METH_VARARGS, (char *)"EpDouble_EpdMultiply2Decimal(EpDouble self, EpDouble epd2)"},
	 { (char *)"EpDouble_EpdMultiply3", _wrap_EpDouble_EpdMultiply3, METH_VARARGS, (char *)"EpDouble_EpdMultiply3(EpDouble self, EpDouble epd2, EpDouble epd3)"},
	 { (char *)"EpDouble_EpdMultiply3Decimal", _wrap_EpDouble_EpdMultiply3Decimal, METH_VARARGS, (char *)"EpDouble_EpdMultiply3Decimal(EpDouble self, EpDouble epd2, EpDouble epd3)"},
	 { (char *)"EpDouble_EpdDivide", _wrap_EpDouble_EpdDivide, METH_VARARGS, (char *)"EpDouble_EpdDivide(EpDouble self, double value)"},
	 { (char *)"EpDouble_EpdDivide2", _wrap_EpDouble_EpdDivide2, METH_VARARGS, (char *)"EpDouble_EpdDivide2(EpDouble self, EpDouble epd2)"},
	 { (char *)"EpDouble_EpdDivide3", _wrap_EpDouble_EpdDivide3, METH_VARARGS, (char *)"EpDouble_EpdDivide3(EpDouble self, EpDouble epd2, EpDouble epd3)"},
	 { (char *)"EpDouble_EpdAdd", _wrap_EpDouble_EpdAdd, METH_VARARGS, (char *)"EpDouble_EpdAdd(EpDouble self, double value)"},
	 { (char *)"EpDouble_EpdAdd2", _wrap_EpDouble_EpdAdd2, METH_VARARGS, (char *)"EpDouble_EpdAdd2(EpDouble self, EpDouble epd2)"},
	 { (char *)"EpDouble_EpdAdd3", _wrap_EpDouble_EpdAdd3, METH_VARARGS, (char *)"EpDouble_EpdAdd3(EpDouble self, EpDouble epd2, EpDouble epd3)"},
	 { (char *)"EpDouble_EpdSubtract", _wrap_EpDouble_EpdSubtract, METH_VARARGS, (char *)"EpDouble_EpdSubtract(EpDouble self, double value)"},
	 { (char *)"EpDouble_EpdSubtract2", _wrap_EpDouble_EpdSubtract2, METH_VARARGS, (char *)"EpDouble_EpdSubtract2(EpDouble self, EpDouble epd2)"},
	 { (char *)"EpDouble_EpdSubtract3", _wrap_EpDouble_EpdSubtract3, METH_VARARGS, (char *)"EpDouble_EpdSubtract3(EpDouble self, EpDouble epd2, EpDouble epd3)"},
	 { (char *)"EpDouble_EpdPow2", _wrap_EpDouble_EpdPow2, METH_VARARGS, (char *)"EpDouble_EpdPow2(EpDouble self, int n)"},
	 { (char *)"EpDouble_EpdPow2Decimal", _wrap_EpDouble_EpdPow2Decimal, METH_VARARGS, (char *)"EpDouble_EpdPow2Decimal(EpDouble self, int n)"},
	 { (char *)"EpDouble___add__", _wrap_EpDouble___add__, METH_VARARGS, (char *)"\n"
		"__add__(EpDouble other) -> EpDouble\n"
		"EpDouble___add__(EpDouble self, double other) -> EpDouble\n"
		""},
	 { (char *)"EpDouble___sub__", _wrap_EpDouble___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(EpDouble other) -> EpDouble\n"
		"EpDouble___sub__(EpDouble self, double other) -> EpDouble\n"
		""},
	 { (char *)"EpDouble___mul__", _wrap_EpDouble___mul__, METH_VARARGS, (char *)"\n"
		"__mul__(EpDouble other) -> EpDouble\n"
		"EpDouble___mul__(EpDouble self, double other) -> EpDouble\n"
		""},
	 { (char *)"EpDouble___div__", _wrap_EpDouble___div__, METH_VARARGS, (char *)"\n"
		"__div__(EpDouble other) -> EpDouble\n"
		"EpDouble___div__(EpDouble self, double other) -> EpDouble\n"
		""},
	 { (char *)"EpDouble_EpdCmp", _wrap_EpDouble_EpdCmp, METH_VARARGS, (char *)"EpDouble_EpdCmp(EpDouble self, EpDouble other) -> bool"},
	 { (char *)"EpDouble_EpdIsInf", _wrap_EpDouble_EpdIsInf, METH_VARARGS, (char *)"EpDouble_EpdIsInf(EpDouble self) -> bool"},
	 { (char *)"EpDouble_EpdIsZero", _wrap_EpDouble_EpdIsZero, METH_VARARGS, (char *)"EpDouble_EpdIsZero(EpDouble self) -> bool"},
	 { (char *)"EpDouble_EpdIsNan", _wrap_EpDouble_EpdIsNan, METH_VARARGS, (char *)"EpDouble_EpdIsNan(EpDouble self) -> bool"},
	 { (char *)"EpDouble_EpdIsNanOrInf", _wrap_EpDouble_EpdIsNanOrInf, METH_VARARGS, (char *)"EpDouble_EpdIsNanOrInf(EpDouble self) -> bool"},
	 { (char *)"EpDouble___nonzero__", _wrap_EpDouble___nonzero__, METH_VARARGS, (char *)"EpDouble___nonzero__(EpDouble self) -> bool"},
	 { (char *)"EpDouble___eq__", _wrap_EpDouble___eq__, METH_VARARGS, (char *)"EpDouble___eq__(EpDouble self, EpDouble other) -> bool"},
	 { (char *)"EpDouble___ne__", _wrap_EpDouble___ne__, METH_VARARGS, (char *)"EpDouble___ne__(EpDouble self, EpDouble other) -> bool"},
	 { (char *)"EpDouble_swigregister", EpDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"EpdGetExponent", _wrap_EpdGetExponent, METH_VARARGS, (char *)"EpdGetExponent(double value) -> int"},
	 { (char *)"EpdGetExponentDecimal", _wrap_EpdGetExponentDecimal, METH_VARARGS, (char *)"EpdGetExponentDecimal(double value) -> int"},
	 { (char *)"IsInfDouble", _wrap_IsInfDouble, METH_VARARGS, (char *)"IsInfDouble(double value) -> bool"},
	 { (char *)"IsNanDouble", _wrap_IsNanDouble, METH_VARARGS, (char *)"IsNanDouble(double value) -> bool"},
	 { (char *)"IsNanOrInfDouble", _wrap_IsNanOrInfDouble, METH_VARARGS, (char *)"IsNanOrInfDouble(double value) -> bool"},
	 { (char *)"new_DdManager", _wrap_new_DdManager, METH_VARARGS, (char *)"\n"
		"DdManager(unsigned int numVars=0, unsigned int numVarsZ=0, unsigned int numSlots=CUDD_UNIQUE_SLOTS, \n"
		"    unsigned int cacheSize=CUDD_CACHE_SLOTS, unsigned long maxMemory=0)\n"
		"DdManager(unsigned int numVars=0, unsigned int numVarsZ=0, unsigned int numSlots=CUDD_UNIQUE_SLOTS, \n"
		"    unsigned int cacheSize=CUDD_CACHE_SLOTS)\n"
		"DdManager(unsigned int numVars=0, unsigned int numVarsZ=0, unsigned int numSlots=CUDD_UNIQUE_SLOTS)\n"
		"DdManager(unsigned int numVars=0, unsigned int numVarsZ=0)\n"
		"DdManager(unsigned int numVars=0)\n"
		"new_DdManager() -> DdManager\n"
		""},
	 { (char *)"delete_DdManager", _wrap_delete_DdManager, METH_VARARGS, (char *)"delete_DdManager(DdManager self)"},
	 { (char *)"DdManager_KillNode", _wrap_DdManager_KillNode, METH_VARARGS, (char *)"DdManager_KillNode(DdManager self, long num)"},
	 { (char *)"DdManager_IsPsVar", _wrap_DdManager_IsPsVar, METH_VARARGS, (char *)"DdManager_IsPsVar(DdManager self, int index) -> int"},
	 { (char *)"DdManager_IsNsVar", _wrap_DdManager_IsNsVar, METH_VARARGS, (char *)"DdManager_IsNsVar(DdManager self, int index) -> int"},
	 { (char *)"DdManager_SetPsVar", _wrap_DdManager_SetPsVar, METH_VARARGS, (char *)"DdManager_SetPsVar(DdManager self, int index) -> int"},
	 { (char *)"DdManager_SetNsVar", _wrap_DdManager_SetNsVar, METH_VARARGS, (char *)"DdManager_SetNsVar(DdManager self, int index) -> int"},
	 { (char *)"DdManager_SetPairIndex", _wrap_DdManager_SetPairIndex, METH_VARARGS, (char *)"DdManager_SetPairIndex(DdManager self, int index, int pairIndex) -> int"},
	 { (char *)"DdManager_ReadPairIndex", _wrap_DdManager_ReadPairIndex, METH_VARARGS, (char *)"DdManager_ReadPairIndex(DdManager self, int index) -> int"},
	 { (char *)"DdManager_SetVarToBeGrouped", _wrap_DdManager_SetVarToBeGrouped, METH_VARARGS, (char *)"DdManager_SetVarToBeGrouped(DdManager self, int index) -> int"},
	 { (char *)"DdManager_SetVarHardGroup", _wrap_DdManager_SetVarHardGroup, METH_VARARGS, (char *)"DdManager_SetVarHardGroup(DdManager self, int index) -> int"},
	 { (char *)"DdManager_ResetVarToBeGrouped", _wrap_DdManager_ResetVarToBeGrouped, METH_VARARGS, (char *)"DdManager_ResetVarToBeGrouped(DdManager self, int index) -> int"},
	 { (char *)"DdManager_IsVarToBeGrouped", _wrap_DdManager_IsVarToBeGrouped, METH_VARARGS, (char *)"DdManager_IsVarToBeGrouped(DdManager self, int index) -> int"},
	 { (char *)"DdManager_IsVarHardGroup", _wrap_DdManager_IsVarHardGroup, METH_VARARGS, (char *)"DdManager_IsVarHardGroup(DdManager self, int index) -> int"},
	 { (char *)"DdManager_SetVarToBeUngrouped", _wrap_DdManager_SetVarToBeUngrouped, METH_VARARGS, (char *)"DdManager_SetVarToBeUngrouped(DdManager self, int index) -> int"},
	 { (char *)"DdManager_IsVarToBeUngrouped", _wrap_DdManager_IsVarToBeUngrouped, METH_VARARGS, (char *)"DdManager_IsVarToBeUngrouped(DdManager self, int index) -> int"},
	 { (char *)"DdManager_SetPiVar", _wrap_DdManager_SetPiVar, METH_VARARGS, (char *)"DdManager_SetPiVar(DdManager self, int index) -> int"},
	 { (char *)"DdManager_IsPiVar", _wrap_DdManager_IsPiVar, METH_VARARGS, (char *)"DdManager_IsPiVar(DdManager self, int index) -> int"},
	 { (char *)"DdManager_BindVar", _wrap_DdManager_BindVar, METH_VARARGS, (char *)"DdManager_BindVar(DdManager self, int index) -> int"},
	 { (char *)"DdManager_UnbindVar", _wrap_DdManager_UnbindVar, METH_VARARGS, (char *)"DdManager_UnbindVar(DdManager self, int index) -> int"},
	 { (char *)"DdManager_VarIsBound", _wrap_DdManager_VarIsBound, METH_VARARGS, (char *)"DdManager_VarIsBound(DdManager self, int index) -> int"},
	 { (char *)"DdManager_ReadMaxGrowthAlternate", _wrap_DdManager_ReadMaxGrowthAlternate, METH_VARARGS, (char *)"DdManager_ReadMaxGrowthAlternate(DdManager self) -> double"},
	 { (char *)"DdManager_SetMaxGrowthAlternate", _wrap_DdManager_SetMaxGrowthAlternate, METH_VARARGS, (char *)"DdManager_SetMaxGrowthAlternate(DdManager self, double mg)"},
	 { (char *)"DdManager_ReadReorderingCycle", _wrap_DdManager_ReadReorderingCycle, METH_VARARGS, (char *)"DdManager_ReadReorderingCycle(DdManager self) -> int"},
	 { (char *)"DdManager_SetReorderingCycle", _wrap_DdManager_SetReorderingCycle, METH_VARARGS, (char *)"DdManager_SetReorderingCycle(DdManager self, int cycle)"},
	 { (char *)"DdManager_PrintCover", _wrap_DdManager_PrintCover, METH_VARARGS, (char *)"DdManager_PrintCover(DdManager self, DdNode l, DdNode u) -> int"},
	 { (char *)"DdManager_Prime", _wrap_DdManager_Prime, METH_VARARGS, (char *)"DdManager_Prime(DdManager self, unsigned int p) -> unsigned int"},
	 { (char *)"DdManager___len__", _wrap_DdManager___len__, METH_VARARGS, (char *)"DdManager___len__(DdManager self) -> int"},
	 { (char *)"DdManager___getitem__", _wrap_DdManager___getitem__, METH_VARARGS, (char *)"DdManager___getitem__(DdManager self, int i) -> DdNode"},
	 { (char *)"DdManager_addNewVar", _wrap_DdManager_addNewVar, METH_VARARGS, (char *)"DdManager_addNewVar(DdManager self) -> DdNode"},
	 { (char *)"DdManager_addNewVarAtLevel", _wrap_DdManager_addNewVarAtLevel, METH_VARARGS, (char *)"DdManager_addNewVarAtLevel(DdManager self, int level) -> DdNode"},
	 { (char *)"DdManager_NewVar", _wrap_DdManager_NewVar, METH_VARARGS, (char *)"DdManager_NewVar(DdManager self) -> DdNode"},
	 { (char *)"DdManager_NewVarAtLevel", _wrap_DdManager_NewVarAtLevel, METH_VARARGS, (char *)"DdManager_NewVarAtLevel(DdManager self, int level) -> DdNode"},
	 { (char *)"DdManager_addIthVar", _wrap_DdManager_addIthVar, METH_VARARGS, (char *)"DdManager_addIthVar(DdManager self, int i) -> DdNode"},
	 { (char *)"DdManager_IthVar", _wrap_DdManager_IthVar, METH_VARARGS, (char *)"DdManager_IthVar(DdManager self, int i) -> DdNode"},
	 { (char *)"DdManager_zddIthVar", _wrap_DdManager_zddIthVar, METH_VARARGS, (char *)"DdManager_zddIthVar(DdManager self, int i) -> DdNode"},
	 { (char *)"DdManager_zddVarsFromBddVars", _wrap_DdManager_zddVarsFromBddVars, METH_VARARGS, (char *)"DdManager_zddVarsFromBddVars(DdManager self, int multiplicity) -> int"},
	 { (char *)"DdManager_addConst", _wrap_DdManager_addConst, METH_VARARGS, (char *)"DdManager_addConst(DdManager self, CUDD_VALUE_TYPE c) -> DdNode"},
	 { (char *)"DdManager_AutodynEnable", _wrap_DdManager_AutodynEnable, METH_VARARGS, (char *)"DdManager_AutodynEnable(DdManager self, int method)"},
	 { (char *)"DdManager_AutodynDisable", _wrap_DdManager_AutodynDisable, METH_VARARGS, (char *)"DdManager_AutodynDisable(DdManager self)"},
	 { (char *)"DdManager_ReorderingStatus", _wrap_DdManager_ReorderingStatus, METH_VARARGS, (char *)"DdManager_ReorderingStatus(DdManager self) -> int"},
	 { (char *)"DdManager_AutodynEnableZdd", _wrap_DdManager_AutodynEnableZdd, METH_VARARGS, (char *)"DdManager_AutodynEnableZdd(DdManager self, int method)"},
	 { (char *)"DdManager_AutodynDisableZdd", _wrap_DdManager_AutodynDisableZdd, METH_VARARGS, (char *)"DdManager_AutodynDisableZdd(DdManager self)"},
	 { (char *)"DdManager_ReorderingStatusZdd", _wrap_DdManager_ReorderingStatusZdd, METH_VARARGS, (char *)"DdManager_ReorderingStatusZdd(DdManager self) -> int"},
	 { (char *)"DdManager_zddRealignmentEnabled", _wrap_DdManager_zddRealignmentEnabled, METH_VARARGS, (char *)"DdManager_zddRealignmentEnabled(DdManager self) -> int"},
	 { (char *)"DdManager_zddRealignEnable", _wrap_DdManager_zddRealignEnable, METH_VARARGS, (char *)"DdManager_zddRealignEnable(DdManager self)"},
	 { (char *)"DdManager_zddRealignDisable", _wrap_DdManager_zddRealignDisable, METH_VARARGS, (char *)"DdManager_zddRealignDisable(DdManager self)"},
	 { (char *)"DdManager_RealignmentEnabled", _wrap_DdManager_RealignmentEnabled, METH_VARARGS, (char *)"DdManager_RealignmentEnabled(DdManager self) -> int"},
	 { (char *)"DdManager_RealignEnable", _wrap_DdManager_RealignEnable, METH_VARARGS, (char *)"DdManager_RealignEnable(DdManager self)"},
	 { (char *)"DdManager_RealignDisable", _wrap_DdManager_RealignDisable, METH_VARARGS, (char *)"DdManager_RealignDisable(DdManager self)"},
	 { (char *)"DdManager_ReadOne", _wrap_DdManager_ReadOne, METH_VARARGS, (char *)"DdManager_ReadOne(DdManager self) -> DdNode"},
	 { (char *)"DdManager_ReadZddOne", _wrap_DdManager_ReadZddOne, METH_VARARGS, (char *)"DdManager_ReadZddOne(DdManager self, int i) -> DdNode"},
	 { (char *)"DdManager_ReadZero", _wrap_DdManager_ReadZero, METH_VARARGS, (char *)"DdManager_ReadZero(DdManager self) -> DdNode"},
	 { (char *)"DdManager_ReadLogicZero", _wrap_DdManager_ReadLogicZero, METH_VARARGS, (char *)"DdManager_ReadLogicZero(DdManager self) -> DdNode"},
	 { (char *)"DdManager_ReadPlusInfinity", _wrap_DdManager_ReadPlusInfinity, METH_VARARGS, (char *)"DdManager_ReadPlusInfinity(DdManager self) -> DdNode"},
	 { (char *)"DdManager_ReadMinusInfinity", _wrap_DdManager_ReadMinusInfinity, METH_VARARGS, (char *)"DdManager_ReadMinusInfinity(DdManager self) -> DdNode"},
	 { (char *)"DdManager_ReadBackground", _wrap_DdManager_ReadBackground, METH_VARARGS, (char *)"DdManager_ReadBackground(DdManager self) -> DdNode"},
	 { (char *)"DdManager_ReadCacheSlots", _wrap_DdManager_ReadCacheSlots, METH_VARARGS, (char *)"DdManager_ReadCacheSlots(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_ReadCacheUsedSlots", _wrap_DdManager_ReadCacheUsedSlots, METH_VARARGS, (char *)"DdManager_ReadCacheUsedSlots(DdManager self) -> double"},
	 { (char *)"DdManager_ReadCacheLookUps", _wrap_DdManager_ReadCacheLookUps, METH_VARARGS, (char *)"DdManager_ReadCacheLookUps(DdManager self) -> double"},
	 { (char *)"DdManager_ReadCacheHits", _wrap_DdManager_ReadCacheHits, METH_VARARGS, (char *)"DdManager_ReadCacheHits(DdManager self) -> double"},
	 { (char *)"DdManager_ReadRecursiveCalls", _wrap_DdManager_ReadRecursiveCalls, METH_VARARGS, (char *)"DdManager_ReadRecursiveCalls(DdManager self) -> double"},
	 { (char *)"DdManager_ReadMinHit", _wrap_DdManager_ReadMinHit, METH_VARARGS, (char *)"DdManager_ReadMinHit(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_SetMinHit", _wrap_DdManager_SetMinHit, METH_VARARGS, (char *)"DdManager_SetMinHit(DdManager self, unsigned int hr)"},
	 { (char *)"DdManager_ReadLooseUpTo", _wrap_DdManager_ReadLooseUpTo, METH_VARARGS, (char *)"DdManager_ReadLooseUpTo(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_SetLooseUpTo", _wrap_DdManager_SetLooseUpTo, METH_VARARGS, (char *)"DdManager_SetLooseUpTo(DdManager self, unsigned int lut)"},
	 { (char *)"DdManager_ReadMaxCache", _wrap_DdManager_ReadMaxCache, METH_VARARGS, (char *)"DdManager_ReadMaxCache(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_ReadMaxCacheHard", _wrap_DdManager_ReadMaxCacheHard, METH_VARARGS, (char *)"DdManager_ReadMaxCacheHard(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_SetMaxCacheHard", _wrap_DdManager_SetMaxCacheHard, METH_VARARGS, (char *)"DdManager_SetMaxCacheHard(DdManager self, unsigned int mc)"},
	 { (char *)"DdManager_ReadSize", _wrap_DdManager_ReadSize, METH_VARARGS, (char *)"DdManager_ReadSize(DdManager self) -> int"},
	 { (char *)"DdManager_ReadZddSize", _wrap_DdManager_ReadZddSize, METH_VARARGS, (char *)"DdManager_ReadZddSize(DdManager self) -> int"},
	 { (char *)"DdManager_ReadSlots", _wrap_DdManager_ReadSlots, METH_VARARGS, (char *)"DdManager_ReadSlots(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_ReadUsedSlots", _wrap_DdManager_ReadUsedSlots, METH_VARARGS, (char *)"DdManager_ReadUsedSlots(DdManager self) -> double"},
	 { (char *)"DdManager_ExpectedUsedSlots", _wrap_DdManager_ExpectedUsedSlots, METH_VARARGS, (char *)"DdManager_ExpectedUsedSlots(DdManager self) -> double"},
	 { (char *)"DdManager_ReadKeys", _wrap_DdManager_ReadKeys, METH_VARARGS, (char *)"DdManager_ReadKeys(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_ReadDead", _wrap_DdManager_ReadDead, METH_VARARGS, (char *)"DdManager_ReadDead(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_ReadMinDead", _wrap_DdManager_ReadMinDead, METH_VARARGS, (char *)"DdManager_ReadMinDead(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_ReadReorderings", _wrap_DdManager_ReadReorderings, METH_VARARGS, (char *)"DdManager_ReadReorderings(DdManager self) -> int"},
	 { (char *)"DdManager_ReadReorderingTime", _wrap_DdManager_ReadReorderingTime, METH_VARARGS, (char *)"DdManager_ReadReorderingTime(DdManager self) -> long"},
	 { (char *)"DdManager_ReadGarbageCollections", _wrap_DdManager_ReadGarbageCollections, METH_VARARGS, (char *)"DdManager_ReadGarbageCollections(DdManager self) -> int"},
	 { (char *)"DdManager_ReadGarbageCollectionTime", _wrap_DdManager_ReadGarbageCollectionTime, METH_VARARGS, (char *)"DdManager_ReadGarbageCollectionTime(DdManager self) -> long"},
	 { (char *)"DdManager_GarbageCollect", _wrap_DdManager_GarbageCollect, METH_VARARGS, (char *)"DdManager_GarbageCollect(DdManager self, int clearCache) -> int"},
	 { (char *)"DdManager_ReadNodesFreed", _wrap_DdManager_ReadNodesFreed, METH_VARARGS, (char *)"DdManager_ReadNodesFreed(DdManager self) -> double"},
	 { (char *)"DdManager_ReadNodesDropped", _wrap_DdManager_ReadNodesDropped, METH_VARARGS, (char *)"DdManager_ReadNodesDropped(DdManager self) -> double"},
	 { (char *)"DdManager_ReadUniqueLookUps", _wrap_DdManager_ReadUniqueLookUps, METH_VARARGS, (char *)"DdManager_ReadUniqueLookUps(DdManager self) -> double"},
	 { (char *)"DdManager_ReadUniqueLinks", _wrap_DdManager_ReadUniqueLinks, METH_VARARGS, (char *)"DdManager_ReadUniqueLinks(DdManager self) -> double"},
	 { (char *)"DdManager_ReadSiftMaxVar", _wrap_DdManager_ReadSiftMaxVar, METH_VARARGS, (char *)"DdManager_ReadSiftMaxVar(DdManager self) -> int"},
	 { (char *)"DdManager_SetSiftMaxVar", _wrap_DdManager_SetSiftMaxVar, METH_VARARGS, (char *)"DdManager_SetSiftMaxVar(DdManager self, int smv)"},
	 { (char *)"DdManager_ReadSiftMaxSwap", _wrap_DdManager_ReadSiftMaxSwap, METH_VARARGS, (char *)"DdManager_ReadSiftMaxSwap(DdManager self) -> int"},
	 { (char *)"DdManager_SetSiftMaxSwap", _wrap_DdManager_SetSiftMaxSwap, METH_VARARGS, (char *)"DdManager_SetSiftMaxSwap(DdManager self, int sms)"},
	 { (char *)"DdManager_ReadMaxGrowth", _wrap_DdManager_ReadMaxGrowth, METH_VARARGS, (char *)"DdManager_ReadMaxGrowth(DdManager self) -> double"},
	 { (char *)"DdManager_SetMaxGrowth", _wrap_DdManager_SetMaxGrowth, METH_VARARGS, (char *)"DdManager_SetMaxGrowth(DdManager self, double mg)"},
	 { (char *)"DdManager_ReadTree", _wrap_DdManager_ReadTree, METH_VARARGS, (char *)"DdManager_ReadTree(DdManager self) -> MtrNode"},
	 { (char *)"DdManager_SetTree", _wrap_DdManager_SetTree, METH_VARARGS, (char *)"DdManager_SetTree(DdManager self, MtrNode tree)"},
	 { (char *)"DdManager_FreeTree", _wrap_DdManager_FreeTree, METH_VARARGS, (char *)"DdManager_FreeTree(DdManager self)"},
	 { (char *)"DdManager_ReadZddTree", _wrap_DdManager_ReadZddTree, METH_VARARGS, (char *)"DdManager_ReadZddTree(DdManager self) -> MtrNode"},
	 { (char *)"DdManager_SetZddTree", _wrap_DdManager_SetZddTree, METH_VARARGS, (char *)"DdManager_SetZddTree(DdManager self, MtrNode tree)"},
	 { (char *)"DdManager_FreeZddTree", _wrap_DdManager_FreeZddTree, METH_VARARGS, (char *)"DdManager_FreeZddTree(DdManager self)"},
	 { (char *)"DdManager_ReadPerm", _wrap_DdManager_ReadPerm, METH_VARARGS, (char *)"DdManager_ReadPerm(DdManager self, int i) -> int"},
	 { (char *)"DdManager_ReadPermZdd", _wrap_DdManager_ReadPermZdd, METH_VARARGS, (char *)"DdManager_ReadPermZdd(DdManager self, int i) -> int"},
	 { (char *)"DdManager_ReadInvPerm", _wrap_DdManager_ReadInvPerm, METH_VARARGS, (char *)"DdManager_ReadInvPerm(DdManager self, int i) -> int"},
	 { (char *)"DdManager_ReadInvPermZdd", _wrap_DdManager_ReadInvPermZdd, METH_VARARGS, (char *)"DdManager_ReadInvPermZdd(DdManager self, int i) -> int"},
	 { (char *)"DdManager_ReadVars", _wrap_DdManager_ReadVars, METH_VARARGS, (char *)"DdManager_ReadVars(DdManager self, int i) -> DdNode"},
	 { (char *)"DdManager_ReadEpsilon", _wrap_DdManager_ReadEpsilon, METH_VARARGS, (char *)"DdManager_ReadEpsilon(DdManager self) -> CUDD_VALUE_TYPE"},
	 { (char *)"DdManager_SetEpsilon", _wrap_DdManager_SetEpsilon, METH_VARARGS, (char *)"DdManager_SetEpsilon(DdManager self, CUDD_VALUE_TYPE ep)"},
	 { (char *)"DdManager_ReadGroupcheck", _wrap_DdManager_ReadGroupcheck, METH_VARARGS, (char *)"DdManager_ReadGroupcheck(DdManager self) -> Cudd_AggregationType"},
	 { (char *)"DdManager_SetGroupcheck", _wrap_DdManager_SetGroupcheck, METH_VARARGS, (char *)"DdManager_SetGroupcheck(DdManager self, Cudd_AggregationType gc)"},
	 { (char *)"DdManager_GarbageCollectionEnabled", _wrap_DdManager_GarbageCollectionEnabled, METH_VARARGS, (char *)"DdManager_GarbageCollectionEnabled(DdManager self) -> int"},
	 { (char *)"DdManager_EnableGarbageCollection", _wrap_DdManager_EnableGarbageCollection, METH_VARARGS, (char *)"DdManager_EnableGarbageCollection(DdManager self)"},
	 { (char *)"DdManager_DisableGarbageCollection", _wrap_DdManager_DisableGarbageCollection, METH_VARARGS, (char *)"DdManager_DisableGarbageCollection(DdManager self)"},
	 { (char *)"DdManager_DeadAreCounted", _wrap_DdManager_DeadAreCounted, METH_VARARGS, (char *)"DdManager_DeadAreCounted(DdManager self) -> int"},
	 { (char *)"DdManager_TurnOnCountDead", _wrap_DdManager_TurnOnCountDead, METH_VARARGS, (char *)"DdManager_TurnOnCountDead(DdManager self)"},
	 { (char *)"DdManager_TurnOffCountDead", _wrap_DdManager_TurnOffCountDead, METH_VARARGS, (char *)"DdManager_TurnOffCountDead(DdManager self)"},
	 { (char *)"DdManager_ReadRecomb", _wrap_DdManager_ReadRecomb, METH_VARARGS, (char *)"DdManager_ReadRecomb(DdManager self) -> int"},
	 { (char *)"DdManager_SetRecomb", _wrap_DdManager_SetRecomb, METH_VARARGS, (char *)"DdManager_SetRecomb(DdManager self, int recomb)"},
	 { (char *)"DdManager_ReadSymmviolation", _wrap_DdManager_ReadSymmviolation, METH_VARARGS, (char *)"DdManager_ReadSymmviolation(DdManager self) -> int"},
	 { (char *)"DdManager_SetSymmviolation", _wrap_DdManager_SetSymmviolation, METH_VARARGS, (char *)"DdManager_SetSymmviolation(DdManager self, int symmviolation)"},
	 { (char *)"DdManager_ReadArcviolation", _wrap_DdManager_ReadArcviolation, METH_VARARGS, (char *)"DdManager_ReadArcviolation(DdManager self) -> int"},
	 { (char *)"DdManager_SetArcviolation", _wrap_DdManager_SetArcviolation, METH_VARARGS, (char *)"DdManager_SetArcviolation(DdManager self, int arcviolation)"},
	 { (char *)"DdManager_ReadPopulationSize", _wrap_DdManager_ReadPopulationSize, METH_VARARGS, (char *)"DdManager_ReadPopulationSize(DdManager self) -> int"},
	 { (char *)"DdManager_SetPopulationSize", _wrap_DdManager_SetPopulationSize, METH_VARARGS, (char *)"DdManager_SetPopulationSize(DdManager self, int populationSize)"},
	 { (char *)"DdManager_ReadNumberXovers", _wrap_DdManager_ReadNumberXovers, METH_VARARGS, (char *)"DdManager_ReadNumberXovers(DdManager self) -> int"},
	 { (char *)"DdManager_SetNumberXovers", _wrap_DdManager_SetNumberXovers, METH_VARARGS, (char *)"DdManager_SetNumberXovers(DdManager self, int numberXovers)"},
	 { (char *)"DdManager_ReadMemoryInUse", _wrap_DdManager_ReadMemoryInUse, METH_VARARGS, (char *)"DdManager_ReadMemoryInUse(DdManager self) -> long"},
	 { (char *)"DdManager_PrintInfo", _wrap_DdManager_PrintInfo, METH_VARARGS, (char *)"DdManager_PrintInfo(DdManager self, FILE * fp) -> int"},
	 { (char *)"DdManager_ReadPeakNodeCount", _wrap_DdManager_ReadPeakNodeCount, METH_VARARGS, (char *)"DdManager_ReadPeakNodeCount(DdManager self) -> long"},
	 { (char *)"DdManager_ReadPeakLiveNodeCount", _wrap_DdManager_ReadPeakLiveNodeCount, METH_VARARGS, (char *)"DdManager_ReadPeakLiveNodeCount(DdManager self) -> int"},
	 { (char *)"DdManager_ReadNodeCount", _wrap_DdManager_ReadNodeCount, METH_VARARGS, (char *)"DdManager_ReadNodeCount(DdManager self) -> long"},
	 { (char *)"DdManager_zddReadNodeCount", _wrap_DdManager_zddReadNodeCount, METH_VARARGS, (char *)"DdManager_zddReadNodeCount(DdManager self) -> long"},
	 { (char *)"DdManager_EnableReorderingReporting", _wrap_DdManager_EnableReorderingReporting, METH_VARARGS, (char *)"DdManager_EnableReorderingReporting(DdManager self) -> int"},
	 { (char *)"DdManager_DisableReorderingReporting", _wrap_DdManager_DisableReorderingReporting, METH_VARARGS, (char *)"DdManager_DisableReorderingReporting(DdManager self) -> int"},
	 { (char *)"DdManager_ReorderingReporting", _wrap_DdManager_ReorderingReporting, METH_VARARGS, (char *)"DdManager_ReorderingReporting(DdManager self) -> int"},
	 { (char *)"DdManager_ReadErrorCode", _wrap_DdManager_ReadErrorCode, METH_VARARGS, (char *)"DdManager_ReadErrorCode(DdManager self) -> Cudd_ErrorType"},
	 { (char *)"DdManager_ClearErrorCode", _wrap_DdManager_ClearErrorCode, METH_VARARGS, (char *)"DdManager_ClearErrorCode(DdManager self)"},
	 { (char *)"DdManager_ReadStdout", _wrap_DdManager_ReadStdout, METH_VARARGS, (char *)"DdManager_ReadStdout(DdManager self) -> FILE *"},
	 { (char *)"DdManager_SetStdout", _wrap_DdManager_SetStdout, METH_VARARGS, (char *)"DdManager_SetStdout(DdManager self, FILE * fp)"},
	 { (char *)"DdManager_ReadStderr", _wrap_DdManager_ReadStderr, METH_VARARGS, (char *)"DdManager_ReadStderr(DdManager self) -> FILE *"},
	 { (char *)"DdManager_SetStderr", _wrap_DdManager_SetStderr, METH_VARARGS, (char *)"DdManager_SetStderr(DdManager self, FILE * fp)"},
	 { (char *)"DdManager_ReadNextReordering", _wrap_DdManager_ReadNextReordering, METH_VARARGS, (char *)"DdManager_ReadNextReordering(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_ReadSwapSteps", _wrap_DdManager_ReadSwapSteps, METH_VARARGS, (char *)"DdManager_ReadSwapSteps(DdManager self) -> double"},
	 { (char *)"DdManager_ReadMaxLive", _wrap_DdManager_ReadMaxLive, METH_VARARGS, (char *)"DdManager_ReadMaxLive(DdManager self) -> unsigned int"},
	 { (char *)"DdManager_SetMaxLive", _wrap_DdManager_SetMaxLive, METH_VARARGS, (char *)"DdManager_SetMaxLive(DdManager self, unsigned int maxLive)"},
	 { (char *)"DdManager_ReadMaxMemory", _wrap_DdManager_ReadMaxMemory, METH_VARARGS, (char *)"DdManager_ReadMaxMemory(DdManager self) -> long"},
	 { (char *)"DdManager_SetMaxMemory", _wrap_DdManager_SetMaxMemory, METH_VARARGS, (char *)"DdManager_SetMaxMemory(DdManager self, long maxMemory)"},
	 { (char *)"DdManager_SetNextReordering", _wrap_DdManager_SetNextReordering, METH_VARARGS, (char *)"DdManager_SetNextReordering(DdManager self, unsigned int next)"},
	 { (char *)"DdManager_DebugCheck", _wrap_DdManager_DebugCheck, METH_VARARGS, (char *)"DdManager_DebugCheck(DdManager self) -> int"},
	 { (char *)"DdManager_CheckKeys", _wrap_DdManager_CheckKeys, METH_VARARGS, (char *)"DdManager_CheckKeys(DdManager self) -> int"},
	 { (char *)"DdManager_MakeTreeNode", _wrap_DdManager_MakeTreeNode, METH_VARARGS, (char *)"DdManager_MakeTreeNode(DdManager self, unsigned int low, unsigned int size, unsigned int type) -> MtrNode"},
	 { (char *)"DdManager_PrintLinear", _wrap_DdManager_PrintLinear, METH_VARARGS, (char *)"DdManager_PrintLinear(DdManager self) -> int"},
	 { (char *)"DdManager_ReadLinear", _wrap_DdManager_ReadLinear, METH_VARARGS, (char *)"DdManager_ReadLinear(DdManager self, int x, int y) -> int"},
	 { (char *)"DdManager_CheckZeroRef", _wrap_DdManager_CheckZeroRef, METH_VARARGS, (char *)"DdManager_CheckZeroRef(DdManager self) -> int"},
	 { (char *)"DdManager_ReduceHeap", _wrap_DdManager_ReduceHeap, METH_VARARGS, (char *)"DdManager_ReduceHeap(DdManager self, int heuristic, int minsize) -> int"},
	 { (char *)"DdManager_ShuffleHeap", _wrap_DdManager_ShuffleHeap, METH_VARARGS, (char *)"DdManager_ShuffleHeap(DdManager self, IntArray permutation) -> int"},
	 { (char *)"DdManager_SymmProfile", _wrap_DdManager_SymmProfile, METH_VARARGS, (char *)"DdManager_SymmProfile(DdManager self, int lower, int upper)"},
	 { (char *)"DdManager_IndicesToCube", _wrap_DdManager_IndicesToCube, METH_VARARGS, (char *)"DdManager_IndicesToCube(DdManager self, IntArray array, int n) -> DdNode"},
	 { (char *)"DdManager_AverageDistance", _wrap_DdManager_AverageDistance, METH_VARARGS, (char *)"DdManager_AverageDistance(DdManager self) -> double"},
	 { (char *)"DdManager_MakeZddTreeNode", _wrap_DdManager_MakeZddTreeNode, METH_VARARGS, (char *)"DdManager_MakeZddTreeNode(DdManager self, unsigned int low, unsigned int size, unsigned int type) -> MtrNode"},
	 { (char *)"DdManager_zddPrintSubtable", _wrap_DdManager_zddPrintSubtable, METH_VARARGS, (char *)"DdManager_zddPrintSubtable(DdManager self)"},
	 { (char *)"DdManager_zddReduceHeap", _wrap_DdManager_zddReduceHeap, METH_VARARGS, (char *)"DdManager_zddReduceHeap(DdManager self, int heuristic, int minsize) -> int"},
	 { (char *)"DdManager_zddShuffleHeap", _wrap_DdManager_zddShuffleHeap, METH_VARARGS, (char *)"DdManager_zddShuffleHeap(DdManager self, IntArray permutation) -> int"},
	 { (char *)"DdManager_zddSymmProfile", _wrap_DdManager_zddSymmProfile, METH_VARARGS, (char *)"DdManager_zddSymmProfile(DdManager self, int lower, int upper)"},
	 { (char *)"DdManager_BddToAdd", _wrap_DdManager_BddToAdd, METH_VARARGS, (char *)"DdManager_BddToAdd(DdManager self, DdNode B) -> DdNode"},
	 { (char *)"DdManager_addBddPattern", _wrap_DdManager_addBddPattern, METH_VARARGS, (char *)"DdManager_addBddPattern(DdManager self, DdNode f) -> DdNode"},
	 { (char *)"DdManager_addBddThreshold", _wrap_DdManager_addBddThreshold, METH_VARARGS, (char *)"DdManager_addBddThreshold(DdManager self, DdNode f, CUDD_VALUE_TYPE value) -> DdNode"},
	 { (char *)"DdManager_addBddStrictThreshold", _wrap_DdManager_addBddStrictThreshold, METH_VARARGS, (char *)"DdManager_addBddStrictThreshold(DdManager self, DdNode f, CUDD_VALUE_TYPE value) -> DdNode"},
	 { (char *)"DdManager_addBddInterval", _wrap_DdManager_addBddInterval, METH_VARARGS, (char *)"DdManager_addBddInterval(DdManager self, DdNode f, CUDD_VALUE_TYPE lower, CUDD_VALUE_TYPE upper) -> DdNode"},
	 { (char *)"DdManager_addBddIthBit", _wrap_DdManager_addBddIthBit, METH_VARARGS, (char *)"DdManager_addBddIthBit(DdManager self, DdNode f, int bit) -> DdNode"},
	 { (char *)"DdManager_zddPortFromBdd", _wrap_DdManager_zddPortFromBdd, METH_VARARGS, (char *)"DdManager_zddPortFromBdd(DdManager self, DdNode B) -> DdNode"},
	 { (char *)"DdManager_zddPortToBdd", _wrap_DdManager_zddPortToBdd, METH_VARARGS, (char *)"DdManager_zddPortToBdd(DdManager self, DdNode f) -> DdNode"},
	 { (char *)"DdManager_MakeBddFromZddCover", _wrap_DdManager_MakeBddFromZddCover, METH_VARARGS, (char *)"DdManager_MakeBddFromZddCover(DdManager self, DdNode node) -> DdNode"},
	 { (char *)"DdManager_PrintVersion", _wrap_DdManager_PrintVersion, METH_VARARGS, (char *)"DdManager_PrintVersion(DdManager self, FILE * fp)"},
	 { (char *)"DdManager_Random", _wrap_DdManager_Random, METH_VARARGS, (char *)"DdManager_Random(DdManager self) -> long"},
	 { (char *)"DdManager_Srandom", _wrap_DdManager_Srandom, METH_VARARGS, (char *)"DdManager_Srandom(DdManager self, long seed)"},
	 { (char *)"DdManager_OutOfMem", _wrap_DdManager_OutOfMem, METH_VARARGS, (char *)"DdManager_OutOfMem(DdManager self, long size)"},
	 { (char *)"DdManager_Transfer", _wrap_DdManager_Transfer, METH_VARARGS, (char *)"DdManager_Transfer(DdManager self, DdManager ddDestination, DdNode f) -> DdNode"},
	 { (char *)"DdManager_CubeArrayToBdd", _wrap_DdManager_CubeArrayToBdd, METH_VARARGS, (char *)"DdManager_CubeArrayToBdd(DdManager self, IntArray y) -> DdNode"},
	 { (char *)"DdManager_SetVarMap", _wrap_DdManager_SetVarMap, METH_VARARGS, (char *)"DdManager_SetVarMap(DdManager self, DdArray x, DdArray y, int n) -> int"},
	 { (char *)"DdManager_ComputeCube", _wrap_DdManager_ComputeCube, METH_VARARGS, (char *)"DdManager_ComputeCube(DdManager self, DdArray vars, IntArray phase, int n) -> DdNode"},
	 { (char *)"DdManager_zddDumpDot", _wrap_DdManager_zddDumpDot, METH_VARARGS, (char *)"DdManager_zddDumpDot(DdManager self, int n, DdArray f, char ** inames, char ** onames, FILE * fp) -> int"},
	 { (char *)"DdManager_DumpBlif", _wrap_DdManager_DumpBlif, METH_VARARGS, (char *)"\n"
		"DdManager_DumpBlif(DdManager self, int n, DdArray f, char ** inames, char ** onames, char * mname, FILE * fp, \n"
		"    int mv) -> int\n"
		""},
	 { (char *)"DdManager_DumpBlifBody", _wrap_DdManager_DumpBlifBody, METH_VARARGS, (char *)"DdManager_DumpBlifBody(DdManager self, int n, DdArray f, char ** inames, char ** onames, FILE * fp, int mv) -> int"},
	 { (char *)"DdManager_DumpDot", _wrap_DdManager_DumpDot, METH_VARARGS, (char *)"DdManager_DumpDot(DdManager self, int n, DdArray f, char ** inames, char ** onames, FILE * fp) -> int"},
	 { (char *)"DdManager_DumpDaVinci", _wrap_DdManager_DumpDaVinci, METH_VARARGS, (char *)"DdManager_DumpDaVinci(DdManager self, int n, DdArray f, char ** inames, char ** onames, FILE * fp) -> int"},
	 { (char *)"DdManager_DumpDDcal", _wrap_DdManager_DumpDDcal, METH_VARARGS, (char *)"DdManager_DumpDDcal(DdManager self, int n, DdArray f, char ** inames, char ** onames, FILE * fp) -> int"},
	 { (char *)"DdManager_DumpFactoredForm", _wrap_DdManager_DumpFactoredForm, METH_VARARGS, (char *)"DdManager_DumpFactoredForm(DdManager self, int n, DdArray f, char ** inames, char ** onames, FILE * fp) -> int"},
	 { (char *)"DdManager_ArrayLoad", _wrap_DdManager_ArrayLoad, METH_VARARGS, (char *)"\n"
		"DdManager_ArrayLoad(DdManager self, int rootmatchmode, char ** rootmatchnames, int varmatchmode, char ** varmatchnames, \n"
		"    IntArray varmatchauxids, IntArray varcomposeids, int mode, \n"
		"    char * filename, FILE * fp, DdArray pproots) -> int\n"
		""},
	 { (char *)"DdManager_ArrayStore", _wrap_DdManager_ArrayStore, METH_VARARGS, (char *)"\n"
		"DdManager_ArrayStore(DdManager self, char * ddname, DdArray roots, char ** rootnames, char ** varnames, \n"
		"    IntArray auxids, int mode, int varinfo, char * filename, FILE * fp) -> int\n"
		""},
	 { (char *)"DdManager_BddLoad", _wrap_DdManager_BddLoad, METH_VARARGS, (char *)"\n"
		"DdManager_BddLoad(DdManager self, int varmatchmode, char ** varmatchnames, IntArray varmatchauxids, \n"
		"    IntArray varcomposeids, int mode, char * filename, FILE * fp) -> DdNode\n"
		""},
	 { (char *)"DdManager_BddStore", _wrap_DdManager_BddStore, METH_VARARGS, (char *)"\n"
		"DdManager_BddStore(DdManager self, char * ddname, DdNode f, char ** varnames, IntArray auxids, int mode, \n"
		"    int varinfo, char * fname, FILE * fp) -> int\n"
		""},
	 { (char *)"DdManager_Bin2Text", _wrap_DdManager_Bin2Text, METH_VARARGS, (char *)"DdManager_Bin2Text(DdManager self, char * filein, char * fileout) -> int"},
	 { (char *)"DdManager_DisplayBinary", _wrap_DdManager_DisplayBinary, METH_VARARGS, (char *)"DdManager_DisplayBinary(DdManager self, char * filein, char * fileout) -> int"},
	 { (char *)"DdManager_Text2Bin", _wrap_DdManager_Text2Bin, METH_VARARGS, (char *)"DdManager_Text2Bin(DdManager self, char * filein, char * fileout) -> int"},
	 { (char *)"DdManager_VectorSupportSize", _wrap_DdManager_VectorSupportSize, METH_VARARGS, (char *)"DdManager_VectorSupportSize(DdManager self, DdArray F, int n) -> int"},
	 { (char *)"DdManager_ClassifySupport", _wrap_DdManager_ClassifySupport, METH_VARARGS, (char *)"DdManager_ClassifySupport(DdManager self, DdNode f, DdNode g, DdArray common, DdArray onlyF, DdArray onlyG) -> int"},
	 { (char *)"DdManager_Xgty", _wrap_DdManager_Xgty, METH_VARARGS, (char *)"DdManager_Xgty(DdManager self, int N, DdArray z, DdArray x, DdArray y) -> DdNode"},
	 { (char *)"DdManager_Xeqy", _wrap_DdManager_Xeqy, METH_VARARGS, (char *)"DdManager_Xeqy(DdManager self, int N, DdArray x, DdArray y) -> DdNode"},
	 { (char *)"DdManager_Dxygtdxz", _wrap_DdManager_Dxygtdxz, METH_VARARGS, (char *)"DdManager_Dxygtdxz(DdManager self, int N, DdArray x, DdArray y, DdArray z) -> DdNode"},
	 { (char *)"DdManager_Dxygtdyz", _wrap_DdManager_Dxygtdyz, METH_VARARGS, (char *)"DdManager_Dxygtdyz(DdManager self, int N, DdArray x, DdArray y, DdArray z) -> DdNode"},
	 { (char *)"DdManager_SharingSize", _wrap_DdManager_SharingSize, METH_VARARGS, (char *)"DdManager_SharingSize(DdManager self, DdArray nodeArray, int n) -> int"},
	 { (char *)"DdManager_ReadIndex", _wrap_DdManager_ReadIndex, METH_VARARGS, (char *)"DdManager_ReadIndex(DdManager self, int i) -> int"},
	 { (char *)"DdManager_addPlus", _wrap_DdManager_addPlus, METH_VARARGS, (char *)"DdManager_addPlus(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addTimes", _wrap_DdManager_addTimes, METH_VARARGS, (char *)"DdManager_addTimes(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addThreshold", _wrap_DdManager_addThreshold, METH_VARARGS, (char *)"DdManager_addThreshold(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addSetNZ", _wrap_DdManager_addSetNZ, METH_VARARGS, (char *)"DdManager_addSetNZ(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addDivide", _wrap_DdManager_addDivide, METH_VARARGS, (char *)"DdManager_addDivide(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addMinus", _wrap_DdManager_addMinus, METH_VARARGS, (char *)"DdManager_addMinus(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addMinimum", _wrap_DdManager_addMinimum, METH_VARARGS, (char *)"DdManager_addMinimum(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addMaximum", _wrap_DdManager_addMaximum, METH_VARARGS, (char *)"DdManager_addMaximum(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addOneZeroMaximum", _wrap_DdManager_addOneZeroMaximum, METH_VARARGS, (char *)"DdManager_addOneZeroMaximum(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addDiff", _wrap_DdManager_addDiff, METH_VARARGS, (char *)"DdManager_addDiff(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addAgreement", _wrap_DdManager_addAgreement, METH_VARARGS, (char *)"DdManager_addAgreement(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addOr", _wrap_DdManager_addOr, METH_VARARGS, (char *)"DdManager_addOr(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addNand", _wrap_DdManager_addNand, METH_VARARGS, (char *)"DdManager_addNand(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addNor", _wrap_DdManager_addNor, METH_VARARGS, (char *)"DdManager_addNor(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addXor", _wrap_DdManager_addXor, METH_VARARGS, (char *)"DdManager_addXor(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addXnor", _wrap_DdManager_addXnor, METH_VARARGS, (char *)"DdManager_addXnor(DdManager self, DdArray f, DdArray g) -> DdNode"},
	 { (char *)"DdManager_addWalsh", _wrap_DdManager_addWalsh, METH_VARARGS, (char *)"DdManager_addWalsh(DdManager self, DdArray x, DdArray y, int n) -> DdNode"},
	 { (char *)"DdManager_addHamming", _wrap_DdManager_addHamming, METH_VARARGS, (char *)"DdManager_addHamming(DdManager self, DdArray xVars, DdArray yVars, int nVars) -> DdNode"},
	 { (char *)"DdManager_addComputeCube", _wrap_DdManager_addComputeCube, METH_VARARGS, (char *)"DdManager_addComputeCube(DdManager self, DdArray vars, IntArray phase, int n) -> DdNode"},
	 { (char *)"DdManager_addResidue", _wrap_DdManager_addResidue, METH_VARARGS, (char *)"DdManager_addResidue(DdManager self, int n, int m, int options, int top) -> DdNode"},
	 { (char *)"DdManager_addXeqy", _wrap_DdManager_addXeqy, METH_VARARGS, (char *)"DdManager_addXeqy(DdManager self, int N, DdArray x, DdArray y) -> DdNode"},
	 { (char *)"DdManager_ApaNumberOfDigits", _wrap_DdManager_ApaNumberOfDigits, METH_VARARGS, (char *)"DdManager_ApaNumberOfDigits(DdManager self, int binaryDigits) -> int"},
	 { (char *)"DdManager_NewApaNumber", _wrap_DdManager_NewApaNumber, METH_VARARGS, (char *)"DdManager_NewApaNumber(DdManager self, int digits) -> DdApaNumber"},
	 { (char *)"DdManager_ApaCopy", _wrap_DdManager_ApaCopy, METH_VARARGS, (char *)"DdManager_ApaCopy(DdManager self, int digits, DdApaNumber source, DdApaNumber dest)"},
	 { (char *)"DdManager_ApaAdd", _wrap_DdManager_ApaAdd, METH_VARARGS, (char *)"DdManager_ApaAdd(DdManager self, int digits, DdApaNumber a, DdApaNumber b, DdApaNumber sum) -> DdApaDigit"},
	 { (char *)"DdManager_ApaSubtract", _wrap_DdManager_ApaSubtract, METH_VARARGS, (char *)"DdManager_ApaSubtract(DdManager self, int digits, DdApaNumber a, DdApaNumber b, DdApaNumber diff) -> DdApaDigit"},
	 { (char *)"DdManager_ApaShortDivision", _wrap_DdManager_ApaShortDivision, METH_VARARGS, (char *)"DdManager_ApaShortDivision(DdManager self, int digits, DdApaNumber dividend, DdApaDigit divisor, DdApaNumber quotient) -> DdApaDigit"},
	 { (char *)"DdManager_ApaIntDivision", _wrap_DdManager_ApaIntDivision, METH_VARARGS, (char *)"DdManager_ApaIntDivision(DdManager self, int digits, DdApaNumber dividend, unsigned int divisor, DdApaNumber quotient) -> unsigned int"},
	 { (char *)"DdManager_ApaShiftRight", _wrap_DdManager_ApaShiftRight, METH_VARARGS, (char *)"DdManager_ApaShiftRight(DdManager self, int digits, DdApaDigit _in, DdApaNumber a, DdApaNumber b)"},
	 { (char *)"DdManager_ApaSetToLiteral", _wrap_DdManager_ApaSetToLiteral, METH_VARARGS, (char *)"DdManager_ApaSetToLiteral(DdManager self, int digits, DdApaNumber number, DdApaDigit literal)"},
	 { (char *)"DdManager_ApaPowerOfTwo", _wrap_DdManager_ApaPowerOfTwo, METH_VARARGS, (char *)"DdManager_ApaPowerOfTwo(DdManager self, int digits, DdApaNumber number, int power)"},
	 { (char *)"DdManager_ApaCompare", _wrap_DdManager_ApaCompare, METH_VARARGS, (char *)"DdManager_ApaCompare(DdManager self, int digitsFirst, DdApaNumber first, int digitsSecond, DdApaNumber second) -> int"},
	 { (char *)"DdManager_ApaCompareRatios", _wrap_DdManager_ApaCompareRatios, METH_VARARGS, (char *)"\n"
		"DdManager_ApaCompareRatios(DdManager self, int digitsFirst, DdApaNumber firstNum, unsigned int firstDen, int digitsSecond, \n"
		"    DdApaNumber secondNum, unsigned int secondDen) -> int\n"
		""},
	 { (char *)"DdManager_ApaPrintHex", _wrap_DdManager_ApaPrintHex, METH_VARARGS, (char *)"DdManager_ApaPrintHex(DdManager self, FILE * fp, int digits, DdApaNumber number) -> int"},
	 { (char *)"DdManager_ApaPrintDecimal", _wrap_DdManager_ApaPrintDecimal, METH_VARARGS, (char *)"DdManager_ApaPrintDecimal(DdManager self, FILE * fp, int digits, DdApaNumber number) -> int"},
	 { (char *)"DdManager_ApaPrintExponential", _wrap_DdManager_ApaPrintExponential, METH_VARARGS, (char *)"DdManager_ApaPrintExponential(DdManager self, FILE * fp, int digits, DdApaNumber number, int precision) -> int"},
	 { (char *)"DdManager_One", _wrap_DdManager_One, METH_VARARGS, (char *)"DdManager_One(DdManager self) -> DdNode"},
	 { (char *)"DdManager_Zero", _wrap_DdManager_Zero, METH_VARARGS, (char *)"DdManager_Zero(DdManager self) -> DdNode"},
	 { (char *)"DdManager_Sort", _wrap_DdManager_Sort, METH_VARARGS, (char *)"DdManager_Sort(DdManager self, DdNode leftnd, DdNode rightnd) -> int"},
	 { (char *)"DdManager_PrintStdOut", _wrap_DdManager_PrintStdOut, METH_VARARGS, (char *)"DdManager_PrintStdOut(DdManager self) -> int"},
	 { (char *)"DdManager_StateCube", _wrap_DdManager_StateCube, METH_VARARGS, (char *)"DdManager_StateCube(DdManager self, char * cube, int base, int offset, int scale) -> DdNode"},
	 { (char *)"DdManager_SetDefault", _wrap_DdManager_SetDefault, METH_VARARGS, (char *)"DdManager_SetDefault(DdManager self)"},
	 { (char *)"DdManager_swigregister", DdManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DdGen", _wrap_new_DdGen, METH_VARARGS, (char *)"\n"
		"DdGen(DdNode node1, int method, DdNode node2=None)\n"
		"new_DdGen(DdNode node1, int method) -> DdGen\n"
		""},
	 { (char *)"delete_DdGen", _wrap_delete_DdGen, METH_VARARGS, (char *)"delete_DdGen(DdGen self)"},
	 { (char *)"DdGen_swigregister", DdGen_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DdNode", _wrap_new_DdNode, METH_VARARGS, (char *)"new_DdNode() -> DdNode"},
	 { (char *)"delete_DdNode", _wrap_delete_DdNode, METH_VARARGS, (char *)"delete_DdNode(DdNode self)"},
	 { (char *)"DdNode_FirstCube", _wrap_DdNode_FirstCube, METH_VARARGS, (char *)"DdNode_FirstCube(DdNode self, DdGen gen) -> int"},
	 { (char *)"DdNode_NextCube", _wrap_DdNode_NextCube, METH_VARARGS, (char *)"DdNode_NextCube(DdNode self, DdGen gen) -> int"},
	 { (char *)"DdNode_FirstNode", _wrap_DdNode_FirstNode, METH_VARARGS, (char *)"DdNode_FirstNode(DdNode self, DdGen gen) -> int"},
	 { (char *)"DdNode_NextNode", _wrap_DdNode_NextNode, METH_VARARGS, (char *)"DdNode_NextNode(DdNode self, DdGen gen) -> int"},
	 { (char *)"DdNode_AndAbstractLimit", _wrap_DdNode_AndAbstractLimit, METH_VARARGS, (char *)"DdNode_AndAbstractLimit(DdNode self, DdNode g, DdNode cube, unsigned int limit) -> DdNode"},
	 { (char *)"DdNode_AndLimit", _wrap_DdNode_AndLimit, METH_VARARGS, (char *)"DdNode_AndLimit(DdNode self, DdNode g, unsigned int limit) -> DdNode"},
	 { (char *)"DdNode_NPAnd", _wrap_DdNode_NPAnd, METH_VARARGS, (char *)"DdNode_NPAnd(DdNode self, DdNode c) -> DdNode"},
	 { (char *)"DdNode_FindTwoLiteralClauses", _wrap_DdNode_FindTwoLiteralClauses, METH_VARARGS, (char *)"DdNode_FindTwoLiteralClauses(DdNode self) -> DdTlcInfo"},
	 { (char *)"DdNode_EpdCountMinterm", _wrap_DdNode_EpdCountMinterm, METH_VARARGS, (char *)"DdNode_EpdCountMinterm(DdNode self, int nvars, EpDouble epd) -> int"},
	 { (char *)"DdNode_ApproxConjDecomp", _wrap_DdNode_ApproxConjDecomp, METH_VARARGS, (char *)"DdNode_ApproxConjDecomp(DdNode self) -> int"},
	 { (char *)"DdNode_ApproxDisjDecomp", _wrap_DdNode_ApproxDisjDecomp, METH_VARARGS, (char *)"DdNode_ApproxDisjDecomp(DdNode self) -> int"},
	 { (char *)"DdNode_IterConjDecomp", _wrap_DdNode_IterConjDecomp, METH_VARARGS, (char *)"DdNode_IterConjDecomp(DdNode self) -> int"},
	 { (char *)"DdNode_IterDisjDecomp", _wrap_DdNode_IterDisjDecomp, METH_VARARGS, (char *)"DdNode_IterDisjDecomp(DdNode self) -> int"},
	 { (char *)"DdNode_GenConjDecomp", _wrap_DdNode_GenConjDecomp, METH_VARARGS, (char *)"DdNode_GenConjDecomp(DdNode self) -> int"},
	 { (char *)"DdNode_GenDisjDecomp", _wrap_DdNode_GenDisjDecomp, METH_VARARGS, (char *)"DdNode_GenDisjDecomp(DdNode self) -> int"},
	 { (char *)"DdNode_VarConjDecomp", _wrap_DdNode_VarConjDecomp, METH_VARARGS, (char *)"DdNode_VarConjDecomp(DdNode self) -> int"},
	 { (char *)"DdNode_VarDisjDecomp", _wrap_DdNode_VarDisjDecomp, METH_VARARGS, (char *)"DdNode_VarDisjDecomp(DdNode self) -> int"},
	 { (char *)"DdNode_ClosestCube", _wrap_DdNode_ClosestCube, METH_VARARGS, (char *)"DdNode_ClosestCube(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_LeqUnless", _wrap_DdNode_LeqUnless, METH_VARARGS, (char *)"DdNode_LeqUnless(DdNode self, DdNode g, DdNode D) -> int"},
	 { (char *)"DdNode_MakePrime", _wrap_DdNode_MakePrime, METH_VARARGS, (char *)"DdNode_MakePrime(DdNode self, DdNode f) -> DdNode"},
	 { (char *)"DdNode_CountPathsToNonZero", _wrap_DdNode_CountPathsToNonZero, METH_VARARGS, (char *)"DdNode_CountPathsToNonZero(DdNode self) -> double"},
	 { (char *)"DdNode_SupportIndex", _wrap_DdNode_SupportIndex, METH_VARARGS, (char *)"DdNode_SupportIndex(DdNode self) -> int"},
	 { (char *)"DdNode_ExistAbstract", _wrap_DdNode_ExistAbstract, METH_VARARGS, (char *)"DdNode_ExistAbstract(DdNode self, DdNode cube) -> DdNode"},
	 { (char *)"DdNode_XorExistAbstract", _wrap_DdNode_XorExistAbstract, METH_VARARGS, (char *)"DdNode_XorExistAbstract(DdNode self, DdNode g, DdNode cube) -> DdNode"},
	 { (char *)"DdNode_UnivAbstract", _wrap_DdNode_UnivAbstract, METH_VARARGS, (char *)"DdNode_UnivAbstract(DdNode self, DdNode cube) -> DdNode"},
	 { (char *)"DdNode_BooleanDiff", _wrap_DdNode_BooleanDiff, METH_VARARGS, (char *)"DdNode_BooleanDiff(DdNode self, int x) -> DdNode"},
	 { (char *)"DdNode_AndAbstract", _wrap_DdNode_AndAbstract, METH_VARARGS, (char *)"DdNode_AndAbstract(DdNode self, DdNode g, DdNode cube) -> DdNode"},
	 { (char *)"DdNode_VarIsDependent", _wrap_DdNode_VarIsDependent, METH_VARARGS, (char *)"DdNode_VarIsDependent(DdNode self, DdNode var) -> int"},
	 { (char *)"DdNode_Correlation", _wrap_DdNode_Correlation, METH_VARARGS, (char *)"DdNode_Correlation(DdNode self, DdNode g) -> double"},
	 { (char *)"DdNode_CorrelationWeights", _wrap_DdNode_CorrelationWeights, METH_VARARGS, (char *)"DdNode_CorrelationWeights(DdNode self, DdNode g, DoubleArray prob) -> double"},
	 { (char *)"DdNode_Ite", _wrap_DdNode_Ite, METH_VARARGS, (char *)"DdNode_Ite(DdNode self, DdNode g, DdNode h) -> DdNode"},
	 { (char *)"DdNode_IteConstant", _wrap_DdNode_IteConstant, METH_VARARGS, (char *)"DdNode_IteConstant(DdNode self, DdNode g, DdNode h) -> DdNode"},
	 { (char *)"DdNode_Intersect", _wrap_DdNode_Intersect, METH_VARARGS, (char *)"DdNode_Intersect(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_FIntersect", _wrap_DdNode_FIntersect, METH_VARARGS, (char *)"DdNode_FIntersect(DdNode self, DdNode g) -> int"},
	 { (char *)"DdNode_And", _wrap_DdNode_And, METH_VARARGS, (char *)"DdNode_And(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_Or", _wrap_DdNode_Or, METH_VARARGS, (char *)"DdNode_Or(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_Nand", _wrap_DdNode_Nand, METH_VARARGS, (char *)"DdNode_Nand(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_Nor", _wrap_DdNode_Nor, METH_VARARGS, (char *)"DdNode_Nor(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_Xor", _wrap_DdNode_Xor, METH_VARARGS, (char *)"DdNode_Xor(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_Xnor", _wrap_DdNode_Xnor, METH_VARARGS, (char *)"DdNode_Xnor(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_ClippingAnd", _wrap_DdNode_ClippingAnd, METH_VARARGS, (char *)"DdNode_ClippingAnd(DdNode self, DdNode g, int maxDepth, int direction) -> DdNode"},
	 { (char *)"DdNode_ClippingAndAbstract", _wrap_DdNode_ClippingAndAbstract, METH_VARARGS, (char *)"DdNode_ClippingAndAbstract(DdNode self, DdNode g, DdNode cube, int maxDepth, int direction) -> DdNode"},
	 { (char *)"DdNode_LICompaction", _wrap_DdNode_LICompaction, METH_VARARGS, (char *)"DdNode_LICompaction(DdNode self, DdNode c) -> DdNode"},
	 { (char *)"DdNode_Squeeze", _wrap_DdNode_Squeeze, METH_VARARGS, (char *)"DdNode_Squeeze(DdNode self, DdNode u) -> DdNode"},
	 { (char *)"DdNode_Minimize", _wrap_DdNode_Minimize, METH_VARARGS, (char *)"DdNode_Minimize(DdNode self, DdNode c) -> DdNode"},
	 { (char *)"DdNode_Constrain", _wrap_DdNode_Constrain, METH_VARARGS, (char *)"DdNode_Constrain(DdNode self, DdNode c) -> DdNode"},
	 { (char *)"DdNode_Restrict", _wrap_DdNode_Restrict, METH_VARARGS, (char *)"DdNode_Restrict(DdNode self, DdNode c) -> DdNode"},
	 { (char *)"DdNode_PickOneCube", _wrap_DdNode_PickOneCube, METH_VARARGS, (char *)"DdNode_PickOneCube(DdNode self, char * string) -> int"},
	 { (char *)"DdNode_PickOneMinterm", _wrap_DdNode_PickOneMinterm, METH_VARARGS, (char *)"DdNode_PickOneMinterm(DdNode self, DdArray vars, int n) -> DdNode"},
	 { (char *)"DdNode_PickArbitraryMinterms", _wrap_DdNode_PickArbitraryMinterms, METH_VARARGS, (char *)"DdNode_PickArbitraryMinterms(DdNode self, DdArray vars, int n, int k) -> DdArray"},
	 { (char *)"DdNode_Compose", _wrap_DdNode_Compose, METH_VARARGS, (char *)"DdNode_Compose(DdNode self, DdNode g, int v) -> DdNode"},
	 { (char *)"DdNode_Permute", _wrap_DdNode_Permute, METH_VARARGS, (char *)"DdNode_Permute(DdNode self, IntArray permut) -> DdNode"},
	 { (char *)"DdNode_VarMap", _wrap_DdNode_VarMap, METH_VARARGS, (char *)"DdNode_VarMap(DdNode self) -> DdNode"},
	 { (char *)"DdNode_LiteralSetIntersection", _wrap_DdNode_LiteralSetIntersection, METH_VARARGS, (char *)"DdNode_LiteralSetIntersection(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_IsVarEssential", _wrap_DdNode_IsVarEssential, METH_VARARGS, (char *)"DdNode_IsVarEssential(DdNode self, int id, int phase) -> int"},
	 { (char *)"DdNode_Leq", _wrap_DdNode_Leq, METH_VARARGS, (char *)"DdNode_Leq(DdNode self, DdNode g) -> bool"},
	 { (char *)"DdNode_CharToVect", _wrap_DdNode_CharToVect, METH_VARARGS, (char *)"DdNode_CharToVect(DdNode self) -> DdArray"},
	 { (char *)"DdNode_ConstrainDecomp", _wrap_DdNode_ConstrainDecomp, METH_VARARGS, (char *)"DdNode_ConstrainDecomp(DdNode self) -> DdArray"},
	 { (char *)"DdNode_Isop", _wrap_DdNode_Isop, METH_VARARGS, (char *)"DdNode_Isop(DdNode self, DdNode U) -> DdNode"},
	 { (char *)"DdNode_SwapVariables", _wrap_DdNode_SwapVariables, METH_VARARGS, (char *)"DdNode_SwapVariables(DdNode self, DdArray x, DdArray y, int n) -> DdNode"},
	 { (char *)"DdNode_AdjPermuteX", _wrap_DdNode_AdjPermuteX, METH_VARARGS, (char *)"DdNode_AdjPermuteX(DdNode self, DdArray x, int n) -> DdNode"},
	 { (char *)"DdNode_VectorCompose", _wrap_DdNode_VectorCompose, METH_VARARGS, (char *)"DdNode_VectorCompose(DdNode self, DdArray vector) -> DdNode"},
	 { (char *)"DdNode_SetBackground", _wrap_DdNode_SetBackground, METH_VARARGS, (char *)"DdNode_SetBackground(DdNode self)"},
	 { (char *)"DdNode_UnderApprox", _wrap_DdNode_UnderApprox, METH_VARARGS, (char *)"DdNode_UnderApprox(DdNode self, int numVars, int threshold, int safe, double quality) -> DdNode"},
	 { (char *)"DdNode_OverApprox", _wrap_DdNode_OverApprox, METH_VARARGS, (char *)"DdNode_OverApprox(DdNode self, int numVars, int threshold, int safe, double quality) -> DdNode"},
	 { (char *)"DdNode_RemapUnderApprox", _wrap_DdNode_RemapUnderApprox, METH_VARARGS, (char *)"DdNode_RemapUnderApprox(DdNode self, int numVars, int threshold, double quality) -> DdNode"},
	 { (char *)"DdNode_RemapOverApprox", _wrap_DdNode_RemapOverApprox, METH_VARARGS, (char *)"DdNode_RemapOverApprox(DdNode self, int numVars, int threshold, double quality) -> DdNode"},
	 { (char *)"DdNode_BiasedUnderApprox", _wrap_DdNode_BiasedUnderApprox, METH_VARARGS, (char *)"DdNode_BiasedUnderApprox(DdNode self, DdNode b, int numVars, int threshold, double quality1, double quality0) -> DdNode"},
	 { (char *)"DdNode_BiasedOverApprox", _wrap_DdNode_BiasedOverApprox, METH_VARARGS, (char *)"DdNode_BiasedOverApprox(DdNode self, DdNode b, int numVars, int threshold, double quality1, double quality0) -> DdNode"},
	 { (char *)"DdNode_Cofactor", _wrap_DdNode_Cofactor, METH_VARARGS, (char *)"DdNode_Cofactor(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_FindEssential", _wrap_DdNode_FindEssential, METH_VARARGS, (char *)"DdNode_FindEssential(DdNode self) -> DdNode"},
	 { (char *)"DdNode_SubsetCompress", _wrap_DdNode_SubsetCompress, METH_VARARGS, (char *)"DdNode_SubsetCompress(DdNode self, int nvars, int threshold) -> DdNode"},
	 { (char *)"DdNode_SupersetCompress", _wrap_DdNode_SupersetCompress, METH_VARARGS, (char *)"DdNode_SupersetCompress(DdNode self, int nvars, int threshold) -> DdNode"},
	 { (char *)"DdNode_CProjection", _wrap_DdNode_CProjection, METH_VARARGS, (char *)"DdNode_CProjection(DdNode self, DdNode Y) -> DdNode"},
	 { (char *)"DdNode_MinHammingDist", _wrap_DdNode_MinHammingDist, METH_VARARGS, (char *)"DdNode_MinHammingDist(DdNode self, IntArray minterm, int upperBound) -> int"},
	 { (char *)"DdNode_Eval", _wrap_DdNode_Eval, METH_VARARGS, (char *)"DdNode_Eval(DdNode self, IntArray inputs) -> DdNode"},
	 { (char *)"DdNode_ShortestPath", _wrap_DdNode_ShortestPath, METH_VARARGS, (char *)"DdNode_ShortestPath(DdNode self, IntArray weight, IntArray support, IntArray length) -> DdNode"},
	 { (char *)"DdNode_LargestCube", _wrap_DdNode_LargestCube, METH_VARARGS, (char *)"DdNode_LargestCube(DdNode self, IntArray length) -> DdNode"},
	 { (char *)"DdNode_ShortestLength", _wrap_DdNode_ShortestLength, METH_VARARGS, (char *)"DdNode_ShortestLength(DdNode self, IntArray weight) -> int"},
	 { (char *)"DdNode_Decreasing", _wrap_DdNode_Decreasing, METH_VARARGS, (char *)"DdNode_Decreasing(DdNode self, int i) -> DdNode"},
	 { (char *)"DdNode_Increasing", _wrap_DdNode_Increasing, METH_VARARGS, (char *)"DdNode_Increasing(DdNode self, int i) -> DdNode"},
	 { (char *)"DdNode_EquivDC", _wrap_DdNode_EquivDC, METH_VARARGS, (char *)"DdNode_EquivDC(DdNode self, DdNode G, DdNode D) -> int"},
	 { (char *)"DdNode_EqualSupNorm", _wrap_DdNode_EqualSupNorm, METH_VARARGS, (char *)"DdNode_EqualSupNorm(DdNode self, DdNode g, CUDD_VALUE_TYPE tolerance, int pr) -> int"},
	 { (char *)"DdNode_CofMinterm", _wrap_DdNode_CofMinterm, METH_VARARGS, (char *)"DdNode_CofMinterm(DdNode self) -> DoubleArray"},
	 { (char *)"DdNode_VerifySol", _wrap_DdNode_VerifySol, METH_VARARGS, (char *)"DdNode_VerifySol(DdNode self, DdArray G, IntArray yIndex, int n) -> DdNode"},
	 { (char *)"DdNode_SplitSet", _wrap_DdNode_SplitSet, METH_VARARGS, (char *)"DdNode_SplitSet(DdNode self, DdArray xVars, int n, double m) -> DdNode"},
	 { (char *)"DdNode_SubsetHeavyBranch", _wrap_DdNode_SubsetHeavyBranch, METH_VARARGS, (char *)"DdNode_SubsetHeavyBranch(DdNode self, int numVars, int threshold) -> DdNode"},
	 { (char *)"DdNode_SupersetHeavyBranch", _wrap_DdNode_SupersetHeavyBranch, METH_VARARGS, (char *)"DdNode_SupersetHeavyBranch(DdNode self, int numVars, int threshold) -> DdNode"},
	 { (char *)"DdNode_SubsetShortPaths", _wrap_DdNode_SubsetShortPaths, METH_VARARGS, (char *)"DdNode_SubsetShortPaths(DdNode self, int numVars, int threshold, int hardlimit) -> DdNode"},
	 { (char *)"DdNode_SupersetShortPaths", _wrap_DdNode_SupersetShortPaths, METH_VARARGS, (char *)"DdNode_SupersetShortPaths(DdNode self, int numVars, int threshold, int hardlimit) -> DdNode"},
	 { (char *)"DdNode_BddToCubeArray", _wrap_DdNode_BddToCubeArray, METH_VARARGS, (char *)"DdNode_BddToCubeArray(DdNode self, IntArray y) -> int"},
	 { (char *)"DdNode_PrintMinterm", _wrap_DdNode_PrintMinterm, METH_VARARGS, (char *)"DdNode_PrintMinterm(DdNode self) -> int"},
	 { (char *)"DdNode_PrintDebug", _wrap_DdNode_PrintDebug, METH_VARARGS, (char *)"DdNode_PrintDebug(DdNode self, int n, int pr) -> int"},
	 { (char *)"DdNode_EstimateCofactor", _wrap_DdNode_EstimateCofactor, METH_VARARGS, (char *)"DdNode_EstimateCofactor(DdNode self, int i, int phase) -> int"},
	 { (char *)"DdNode_CountMinterm", _wrap_DdNode_CountMinterm, METH_VARARGS, (char *)"DdNode_CountMinterm(DdNode self, int nvars) -> double"},
	 { (char *)"DdNode_Support", _wrap_DdNode_Support, METH_VARARGS, (char *)"DdNode_Support(DdNode self) -> DdNode"},
	 { (char *)"DdNode_SupportSize", _wrap_DdNode_SupportSize, METH_VARARGS, (char *)"DdNode_SupportSize(DdNode self) -> int"},
	 { (char *)"DdNode_Density", _wrap_DdNode_Density, METH_VARARGS, (char *)"DdNode_Density(DdNode self, int nvars) -> double"},
	 { (char *)"DdNode_NodeReadIndex", _wrap_DdNode_NodeReadIndex, METH_VARARGS, (char *)"DdNode_NodeReadIndex(DdNode self) -> int"},
	 { (char *)"DdNode_IsNonConstant", _wrap_DdNode_IsNonConstant, METH_VARARGS, (char *)"DdNode_IsNonConstant(DdNode self) -> int"},
	 { (char *)"DdNode_DagSize", _wrap_DdNode_DagSize, METH_VARARGS, (char *)"DdNode_DagSize(DdNode self) -> int"},
	 { (char *)"DdNode_EstimateCofactorSimple", _wrap_DdNode_EstimateCofactorSimple, METH_VARARGS, (char *)"DdNode_EstimateCofactorSimple(DdNode self, int i) -> int"},
	 { (char *)"DdNode_CountPath", _wrap_DdNode_CountPath, METH_VARARGS, (char *)"DdNode_CountPath(DdNode self) -> double"},
	 { (char *)"DdNode_CountLeaves", _wrap_DdNode_CountLeaves, METH_VARARGS, (char *)"DdNode_CountLeaves(DdNode self) -> int"},
	 { (char *)"DdNode_BddStore", _wrap_DdNode_BddStore, METH_VARARGS, (char *)"\n"
		"DdNode_BddStore(DdNode self, char * ddname, char ** varnames, IntArray auxids, int mode, int varinfo, \n"
		"    char * fname, FILE * fp) -> int\n"
		""},
	 { (char *)"DdNode_IsConstant", _wrap_DdNode_IsConstant, METH_VARARGS, (char *)"DdNode_IsConstant(DdNode self) -> int"},
	 { (char *)"DdNode_Not", _wrap_DdNode_Not, METH_VARARGS, (char *)"DdNode_Not(DdNode self) -> DdNode"},
	 { (char *)"DdNode_NotCond", _wrap_DdNode_NotCond, METH_VARARGS, (char *)"DdNode_NotCond(DdNode self, int c) -> DdNode"},
	 { (char *)"DdNode_Regular", _wrap_DdNode_Regular, METH_VARARGS, (char *)"DdNode_Regular(DdNode self) -> DdNode"},
	 { (char *)"DdNode_Complement", _wrap_DdNode_Complement, METH_VARARGS, (char *)"DdNode_Complement(DdNode self) -> DdNode"},
	 { (char *)"DdNode_IsComplement", _wrap_DdNode_IsComplement, METH_VARARGS, (char *)"DdNode_IsComplement(DdNode self) -> int"},
	 { (char *)"DdNode_T", _wrap_DdNode_T, METH_VARARGS, (char *)"DdNode_T(DdNode self) -> DdNode"},
	 { (char *)"DdNode_E", _wrap_DdNode_E, METH_VARARGS, (char *)"DdNode_E(DdNode self) -> DdNode"},
	 { (char *)"DdNode_V", _wrap_DdNode_V, METH_VARARGS, (char *)"DdNode_V(DdNode self) -> double"},
	 { (char *)"DdNode_ReadIndex", _wrap_DdNode_ReadIndex, METH_VARARGS, (char *)"DdNode_ReadIndex(DdNode self, int index) -> int"},
	 { (char *)"DdNode_addExistAbstract", _wrap_DdNode_addExistAbstract, METH_VARARGS, (char *)"DdNode_addExistAbstract(DdNode self, DdNode cube) -> DdNode"},
	 { (char *)"DdNode_addUnivAbstract", _wrap_DdNode_addUnivAbstract, METH_VARARGS, (char *)"DdNode_addUnivAbstract(DdNode self, DdNode cube) -> DdNode"},
	 { (char *)"DdNode_addOrAbstract", _wrap_DdNode_addOrAbstract, METH_VARARGS, (char *)"DdNode_addOrAbstract(DdNode self, DdNode cube) -> DdNode"},
	 { (char *)"DdNode_addFindMax", _wrap_DdNode_addFindMax, METH_VARARGS, (char *)"DdNode_addFindMax(DdNode self) -> DdNode"},
	 { (char *)"DdNode_addFindMin", _wrap_DdNode_addFindMin, METH_VARARGS, (char *)"DdNode_addFindMin(DdNode self) -> DdNode"},
	 { (char *)"DdNode_addIthBit", _wrap_DdNode_addIthBit, METH_VARARGS, (char *)"DdNode_addIthBit(DdNode self, int bit) -> DdNode"},
	 { (char *)"DdNode_addScalarInverse", _wrap_DdNode_addScalarInverse, METH_VARARGS, (char *)"DdNode_addScalarInverse(DdNode self, DdNode epsilon) -> DdNode"},
	 { (char *)"DdNode_addIte", _wrap_DdNode_addIte, METH_VARARGS, (char *)"DdNode_addIte(DdNode self, DdNode g, DdNode h) -> DdNode"},
	 { (char *)"DdNode_addIteConstant", _wrap_DdNode_addIteConstant, METH_VARARGS, (char *)"DdNode_addIteConstant(DdNode self, DdNode g, DdNode h) -> DdNode"},
	 { (char *)"DdNode_addEvalConst", _wrap_DdNode_addEvalConst, METH_VARARGS, (char *)"DdNode_addEvalConst(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_addLeq", _wrap_DdNode_addLeq, METH_VARARGS, (char *)"DdNode_addLeq(DdNode self, DdNode g) -> int"},
	 { (char *)"DdNode_addCmpl", _wrap_DdNode_addCmpl, METH_VARARGS, (char *)"DdNode_addCmpl(DdNode self) -> DdNode"},
	 { (char *)"DdNode_addNegate", _wrap_DdNode_addNegate, METH_VARARGS, (char *)"DdNode_addNegate(DdNode self) -> DdNode"},
	 { (char *)"DdNode_addRoundOff", _wrap_DdNode_addRoundOff, METH_VARARGS, (char *)"DdNode_addRoundOff(DdNode self, int N) -> DdNode"},
	 { (char *)"DdNode_addCompose", _wrap_DdNode_addCompose, METH_VARARGS, (char *)"DdNode_addCompose(DdNode self, DdNode g, int v) -> DdNode"},
	 { (char *)"DdNode_addPermute", _wrap_DdNode_addPermute, METH_VARARGS, (char *)"DdNode_addPermute(DdNode self, IntArray permut) -> DdNode"},
	 { (char *)"DdNode_addConstrain", _wrap_DdNode_addConstrain, METH_VARARGS, (char *)"DdNode_addConstrain(DdNode self, DdNode c) -> DdNode"},
	 { (char *)"DdNode_addRestrict", _wrap_DdNode_addRestrict, METH_VARARGS, (char *)"DdNode_addRestrict(DdNode self, DdNode c) -> DdNode"},
	 { (char *)"DdNode_addMatrixMultiply", _wrap_DdNode_addMatrixMultiply, METH_VARARGS, (char *)"DdNode_addMatrixMultiply(DdNode self, DdNode B, DdArray z, int nz) -> DdNode"},
	 { (char *)"DdNode_addTimesPlus", _wrap_DdNode_addTimesPlus, METH_VARARGS, (char *)"DdNode_addTimesPlus(DdNode self, DdNode B, DdArray z, int nz) -> DdNode"},
	 { (char *)"DdNode_addTriangle", _wrap_DdNode_addTriangle, METH_VARARGS, (char *)"DdNode_addTriangle(DdNode self, DdNode g, DdArray z, int nz) -> DdNode"},
	 { (char *)"DdNode_addVectorCompose", _wrap_DdNode_addVectorCompose, METH_VARARGS, (char *)"DdNode_addVectorCompose(DdNode self, DdArray vector) -> DdNode"},
	 { (char *)"DdNode_addNonSimCompose", _wrap_DdNode_addNonSimCompose, METH_VARARGS, (char *)"DdNode_addNonSimCompose(DdNode self, DdArray vector) -> DdNode"},
	 { (char *)"DdNode_addSwapVariables", _wrap_DdNode_addSwapVariables, METH_VARARGS, (char *)"DdNode_addSwapVariables(DdNode self, DdArray x, DdArray y, int n) -> DdNode"},
	 { (char *)"DdNode_zddProduct", _wrap_DdNode_zddProduct, METH_VARARGS, (char *)"DdNode_zddProduct(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_zddUnateProduct", _wrap_DdNode_zddUnateProduct, METH_VARARGS, (char *)"DdNode_zddUnateProduct(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_zddWeakDiv", _wrap_DdNode_zddWeakDiv, METH_VARARGS, (char *)"DdNode_zddWeakDiv(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_zddDivide", _wrap_DdNode_zddDivide, METH_VARARGS, (char *)"DdNode_zddDivide(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_zddWeakDivF", _wrap_DdNode_zddWeakDivF, METH_VARARGS, (char *)"DdNode_zddWeakDivF(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_zddDivideF", _wrap_DdNode_zddDivideF, METH_VARARGS, (char *)"DdNode_zddDivideF(DdNode self, DdNode g) -> DdNode"},
	 { (char *)"DdNode_zddComplement", _wrap_DdNode_zddComplement, METH_VARARGS, (char *)"DdNode_zddComplement(DdNode self) -> DdNode"},
	 { (char *)"DdNode_zddIte", _wrap_DdNode_zddIte, METH_VARARGS, (char *)"DdNode_zddIte(DdNode self, DdNode g, DdNode h) -> DdNode"},
	 { (char *)"DdNode_zddUnion", _wrap_DdNode_zddUnion, METH_VARARGS, (char *)"DdNode_zddUnion(DdNode self, DdNode Q) -> DdNode"},
	 { (char *)"DdNode_zddIntersect", _wrap_DdNode_zddIntersect, METH_VARARGS, (char *)"DdNode_zddIntersect(DdNode self, DdNode Q) -> DdNode"},
	 { (char *)"DdNode_zddDiff", _wrap_DdNode_zddDiff, METH_VARARGS, (char *)"DdNode_zddDiff(DdNode self, DdNode Q) -> DdNode"},
	 { (char *)"DdNode_zddDiffConst", _wrap_DdNode_zddDiffConst, METH_VARARGS, (char *)"DdNode_zddDiffConst(DdNode self, DdNode Q) -> DdNode"},
	 { (char *)"DdNode_zddSubset1", _wrap_DdNode_zddSubset1, METH_VARARGS, (char *)"DdNode_zddSubset1(DdNode self, int var) -> DdNode"},
	 { (char *)"DdNode_zddSubset0", _wrap_DdNode_zddSubset0, METH_VARARGS, (char *)"DdNode_zddSubset0(DdNode self, int var) -> DdNode"},
	 { (char *)"DdNode_zddChange", _wrap_DdNode_zddChange, METH_VARARGS, (char *)"DdNode_zddChange(DdNode self, int var) -> DdNode"},
	 { (char *)"DdNode_zddCount", _wrap_DdNode_zddCount, METH_VARARGS, (char *)"DdNode_zddCount(DdNode self) -> int"},
	 { (char *)"DdNode_zddCountDouble", _wrap_DdNode_zddCountDouble, METH_VARARGS, (char *)"DdNode_zddCountDouble(DdNode self) -> double"},
	 { (char *)"DdNode_zddPrintMinterm", _wrap_DdNode_zddPrintMinterm, METH_VARARGS, (char *)"DdNode_zddPrintMinterm(DdNode self) -> int"},
	 { (char *)"DdNode_zddPrintCover", _wrap_DdNode_zddPrintCover, METH_VARARGS, (char *)"DdNode_zddPrintCover(DdNode self) -> int"},
	 { (char *)"DdNode_zddPrintDebug", _wrap_DdNode_zddPrintDebug, METH_VARARGS, (char *)"DdNode_zddPrintDebug(DdNode self, int n, int pr) -> int"},
	 { (char *)"DdNode_zddCountMinterm", _wrap_DdNode_zddCountMinterm, METH_VARARGS, (char *)"DdNode_zddCountMinterm(DdNode self, int path) -> double"},
	 { (char *)"DdNode_zddIsop", _wrap_DdNode_zddIsop, METH_VARARGS, (char *)"DdNode_zddIsop(DdNode self, DdNode U, DdArray zdd_I) -> DdNode"},
	 { (char *)"DdNode_zddDagSize", _wrap_DdNode_zddDagSize, METH_VARARGS, (char *)"DdNode_zddDagSize(DdNode self, DdNode p_node) -> int"},
	 { (char *)"DdNode_ApaPrintMinterm", _wrap_DdNode_ApaPrintMinterm, METH_VARARGS, (char *)"DdNode_ApaPrintMinterm(DdNode self, FILE * fp, int nvars) -> int"},
	 { (char *)"DdNode_ApaPrintMintermExp", _wrap_DdNode_ApaPrintMintermExp, METH_VARARGS, (char *)"DdNode_ApaPrintMintermExp(DdNode self, FILE * fp, int nvars, int precision) -> int"},
	 { (char *)"DdNode_ApaPrintDensity", _wrap_DdNode_ApaPrintDensity, METH_VARARGS, (char *)"DdNode_ApaPrintDensity(DdNode self, FILE * fp, int nvars) -> int"},
	 { (char *)"DdNode_ApaCountMinterm", _wrap_DdNode_ApaCountMinterm, METH_VARARGS, (char *)"DdNode_ApaCountMinterm(DdNode self, int nvars, IntArray digits) -> DdApaNumber"},
	 { (char *)"DdNode___hash__", _wrap_DdNode___hash__, METH_VARARGS, (char *)"DdNode___hash__(DdNode self) -> int"},
	 { (char *)"DdNode___int__", _wrap_DdNode___int__, METH_VARARGS, (char *)"DdNode___int__(DdNode self) -> int"},
	 { (char *)"DdNode___and__", _wrap_DdNode___and__, METH_VARARGS, (char *)"DdNode___and__(DdNode self, DdNode other) -> DdNode"},
	 { (char *)"DdNode___or__", _wrap_DdNode___or__, METH_VARARGS, (char *)"DdNode___or__(DdNode self, DdNode other) -> DdNode"},
	 { (char *)"DdNode___xor__", _wrap_DdNode___xor__, METH_VARARGS, (char *)"DdNode___xor__(DdNode self, DdNode other) -> DdNode"},
	 { (char *)"DdNode___invert__", _wrap_DdNode___invert__, METH_VARARGS, (char *)"DdNode___invert__(DdNode self) -> DdNode"},
	 { (char *)"DdNode___rshift__", _wrap_DdNode___rshift__, METH_VARARGS, (char *)"DdNode___rshift__(DdNode self, DdNode other) -> DdNode"},
	 { (char *)"DdNode___cmp__", _wrap_DdNode___cmp__, METH_VARARGS, (char *)"DdNode___cmp__(DdNode self, DdNode other) -> bool"},
	 { (char *)"DdNode___sub__", _wrap_DdNode___sub__, METH_VARARGS, (char *)"DdNode___sub__(DdNode self, DdNode other) -> DdNode"},
	 { (char *)"DdNode___add__", _wrap_DdNode___add__, METH_VARARGS, (char *)"DdNode___add__(DdNode self, DdNode other) -> DdNode"},
	 { (char *)"DdNode___lt__", _wrap_DdNode___lt__, METH_VARARGS, (char *)"DdNode___lt__(DdNode self, DdNode other) -> bool"},
	 { (char *)"DdNode___le__", _wrap_DdNode___le__, METH_VARARGS, (char *)"DdNode___le__(DdNode self, DdNode other) -> bool"},
	 { (char *)"DdNode___eq__", _wrap_DdNode___eq__, METH_VARARGS, (char *)"DdNode___eq__(DdNode self, DdNode other) -> bool"},
	 { (char *)"DdNode___ne__", _wrap_DdNode___ne__, METH_VARARGS, (char *)"DdNode___ne__(DdNode self, DdNode other) -> bool"},
	 { (char *)"DdNode___gt__", _wrap_DdNode___gt__, METH_VARARGS, (char *)"DdNode___gt__(DdNode self, DdNode other) -> bool"},
	 { (char *)"DdNode___ge__", _wrap_DdNode___ge__, METH_VARARGS, (char *)"DdNode___ge__(DdNode self, DdNode other) -> bool"},
	 { (char *)"DdNode___nonzero__", _wrap_DdNode___nonzero__, METH_VARARGS, (char *)"DdNode___nonzero__(DdNode self) -> bool"},
	 { (char *)"DdNode___len__", _wrap_DdNode___len__, METH_VARARGS, (char *)"DdNode___len__(DdNode self) -> int"},
	 { (char *)"DdNode_SizeOf", _wrap_DdNode_SizeOf, METH_VARARGS, (char *)"DdNode_SizeOf(DdNode self) -> int"},
	 { (char *)"DdNode_Show", _wrap_DdNode_Show, METH_VARARGS, (char *)"DdNode_Show(DdNode self, char * name, int op1, int op2)"},
	 { (char *)"DdNode_Empty", _wrap_DdNode_Empty, METH_VARARGS, (char *)"DdNode_Empty(DdNode self) -> bool"},
	 { (char *)"DdNode_DumpDot", _wrap_DdNode_DumpDot, METH_VARARGS, (char *)"DdNode_DumpDot(DdNode self) -> int"},
	 { (char *)"DdNode_DumpBlif", _wrap_DdNode_DumpBlif, METH_VARARGS, (char *)"DdNode_DumpBlif(DdNode self) -> int"},
	 { (char *)"DdNode_Vector", _wrap_DdNode_Vector, METH_VARARGS, (char *)"DdNode_Vector(DdNode self) -> DdArray"},
	 { (char *)"DdNode_swigregister", DdNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NodePair", _wrap_new_NodePair, METH_VARARGS, (char *)"new_NodePair(DdNode lwr, DdNode upr) -> NodePair"},
	 { (char *)"delete_NodePair", _wrap_delete_NodePair, METH_VARARGS, (char *)"delete_NodePair(NodePair self)"},
	 { (char *)"NodePair_LOWER", _wrap_NodePair_LOWER, METH_VARARGS, (char *)"NodePair_LOWER(NodePair self) -> DdNode"},
	 { (char *)"NodePair_UPPER", _wrap_NodePair_UPPER, METH_VARARGS, (char *)"NodePair_UPPER(NodePair self) -> DdNode"},
	 { (char *)"NodePair_FirstPrime", _wrap_NodePair_FirstPrime, METH_VARARGS, (char *)"NodePair_FirstPrime(NodePair self, DdGen gen) -> int"},
	 { (char *)"NodePair_NextPrime", _wrap_NodePair_NextPrime, METH_VARARGS, (char *)"NodePair_NextPrime(NodePair self, DdGen gen) -> int"},
	 { (char *)"NodePair_swigregister", NodePair_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_CUDD_VALUE_TYPE = {"_p_CUDD_VALUE_TYPE", "CUDD_VALUE_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cudd_AggregationType = {"_p_Cudd_AggregationType", "Cudd_AggregationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cudd_ErrorType = {"_p_Cudd_ErrorType", "Cudd_ErrorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DdApaDigit = {"_p_DdApaDigit", "DdApaDigit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DdApaNumber = {"_p_DdApaNumber", "DdApaNumber *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DdArray = {"_p_DdArray", "DdArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DdGen = {"_p_DdGen", "DdGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DdHalfWord = {"_p_DdHalfWord", "DdHalfWord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DdManager = {"_p_DdManager", "DdManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DdNode = {"_p_DdNode", "DdNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DdTlcInfo = {"_p_DdTlcInfo", "DdTlcInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DoubleArray = {"_p_DoubleArray", "DoubleArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EpDouble = {"_p_EpDouble", "EpDouble *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntArray = {"_p_IntArray", "IntArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MtrNode = {"_p_MtrNode", "MtrNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodePair = {"_p_NodePair", "NodePair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RangeError = {"_p_RangeError", "RangeError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StringArray = {"_p_StringArray", "StringArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_DdNode = {"_p_p_DdNode", "DdNode **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int = {"_p_p_int", "int **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_DdNode = {"_p_p_p_DdNode", "DdNode ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_char = {"_p_p_p_char", "char ***", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CUDD_VALUE_TYPE,
  &_swigt__p_Cudd_AggregationType,
  &_swigt__p_Cudd_ErrorType,
  &_swigt__p_DdApaDigit,
  &_swigt__p_DdApaNumber,
  &_swigt__p_DdArray,
  &_swigt__p_DdGen,
  &_swigt__p_DdHalfWord,
  &_swigt__p_DdManager,
  &_swigt__p_DdNode,
  &_swigt__p_DdTlcInfo,
  &_swigt__p_DoubleArray,
  &_swigt__p_EpDouble,
  &_swigt__p_FILE,
  &_swigt__p_IntArray,
  &_swigt__p_MtrNode,
  &_swigt__p_NodePair,
  &_swigt__p_RangeError,
  &_swigt__p_StringArray,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_p_DdNode,
  &_swigt__p_p_char,
  &_swigt__p_p_int,
  &_swigt__p_p_p_DdNode,
  &_swigt__p_p_p_char,
};

static swig_cast_info _swigc__p_CUDD_VALUE_TYPE[] = {  {&_swigt__p_CUDD_VALUE_TYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cudd_AggregationType[] = {  {&_swigt__p_Cudd_AggregationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cudd_ErrorType[] = {  {&_swigt__p_Cudd_ErrorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DdApaDigit[] = {  {&_swigt__p_DdApaDigit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DdApaNumber[] = {  {&_swigt__p_DdApaNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DdArray[] = {  {&_swigt__p_DdArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DdGen[] = {  {&_swigt__p_DdGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DdHalfWord[] = {  {&_swigt__p_DdHalfWord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DdManager[] = {  {&_swigt__p_DdManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DdNode[] = {  {&_swigt__p_DdNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DdTlcInfo[] = {  {&_swigt__p_DdTlcInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DoubleArray[] = {  {&_swigt__p_DoubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EpDouble[] = {  {&_swigt__p_EpDouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntArray[] = {  {&_swigt__p_IntArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MtrNode[] = {  {&_swigt__p_MtrNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodePair[] = {  {&_swigt__p_NodePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RangeError[] = {  {&_swigt__p_RangeError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringArray[] = {  {&_swigt__p_StringArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_DdNode[] = {  {&_swigt__p_p_DdNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int[] = {  {&_swigt__p_p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_DdNode[] = {  {&_swigt__p_p_p_DdNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_char[] = {  {&_swigt__p_p_p_char, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CUDD_VALUE_TYPE,
  _swigc__p_Cudd_AggregationType,
  _swigc__p_Cudd_ErrorType,
  _swigc__p_DdApaDigit,
  _swigc__p_DdApaNumber,
  _swigc__p_DdArray,
  _swigc__p_DdGen,
  _swigc__p_DdHalfWord,
  _swigc__p_DdManager,
  _swigc__p_DdNode,
  _swigc__p_DdTlcInfo,
  _swigc__p_DoubleArray,
  _swigc__p_EpDouble,
  _swigc__p_FILE,
  _swigc__p_IntArray,
  _swigc__p_MtrNode,
  _swigc__p_NodePair,
  _swigc__p_RangeError,
  _swigc__p_StringArray,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_p_DdNode,
  _swigc__p_p_char,
  _swigc__p_p_int,
  _swigc__p_p_p_DdNode,
  _swigc__p_p_p_char,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "DOCSTRING",SWIG_FromCharPtr("PyCUDD 2.0.1\nPython interface to Colorado University Decision Diagram package\nWith BREL support\nCompiled on Feb 20 2015, 23:50:12\nBugs to:aravind@engr.ucsb.edu"));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"mgr",Swig_var_mgr_get, Swig_var_mgr_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

